{"sampleFiles":[{"hasRelativeAssetsUrls":false,"path":"src/app/multiple-feeds/financial-chart-multiple-feeds.component.ts","content":"import {\r\n    AfterViewInit,\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ElementRef,\r\n    NgZone,\r\n    OnDestroy,\r\n    ViewChild\r\n} from \"@angular/core\";\r\nimport { IgxFinancialChartComponent } from \"igniteui-angular-charts\";\r\nimport { IgxLegendComponent } from \"igniteui-angular-charts\";\r\n\r\n@Component({\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    selector: \"app-financial-chart-multiple-feeds\",\r\n    styleUrls: [\"./financial-chart-multiple-feeds.component.scss\"],\r\n    templateUrl: \"./financial-chart-multiple-feeds.component.html\"\r\n})\r\n\r\nexport class FinancialChartMultipleFeedsComponent implements AfterViewInit, OnDestroy {\r\n\r\n    @ViewChild(\"chart\", { static: true })\r\n    public chart: IgxFinancialChartComponent;\r\n    @ViewChild(\"legend\", { static: true })\r\n    public legend: IgxLegendComponent;\r\n    @ViewChild(\"legend\", { static: true })\r\n    public feedToggleButton: IgxLegendComponent;\r\n\r\n    @ViewChild(\"fpsSpan\", { static: true })\r\n    public fpsSpan: ElementRef;\r\n    @ViewChild(\"feedStatus\", { static: true })\r\n    public feedStatus: ElementRef;\r\n    @ViewChild(\"legendBadgeTemplate\")\r\n    public legendBadgeTemplate: ElementRef;\r\n\r\n    public dataFeeds: any[];\r\n    private currIndex: number = 0;\r\n    private startDate: Date;\r\n\r\n    private maxPoints: number = 4 * 365;\r\n\r\n    private refreshInterval: number = 20;\r\n    private frameCounter: number = 0;\r\n    private frameUpdate: Date;\r\n\r\n    private feedInterval: number = -1;\r\n    private feedUpdating: boolean = true;\r\n\r\n    constructor(private _zone: NgZone) {\r\n        const startYear = new Date().getFullYear() - 4;\r\n        this.startDate = new Date(startYear, 1, 1, 16, 30, 0);\r\n        this.dataFeeds = [\r\n            this.GenerateData(this.startDate, 150, \"Microsoft (MSFT)\"),\r\n            this.GenerateData(this.startDate, 200, \"Facebook (FB)\"),\r\n            this.GenerateData(this.startDate, 400, \"Tesla (TSLA)\"),\r\n            this.GenerateData(this.startDate, 350, \"Netflix (NFLX)\"),\r\n            this.GenerateData(this.startDate, 250, \"Nvidia (NVDA)\")\r\n        ];\r\n    }\r\n\r\n    public AddDays(date: Date, days: number): Date {\r\n        return new Date(date.getTime() + days * 24 * 60 * 60 * 1000);\r\n    }\r\n\r\n    public GenerateItem(date: Date, price: number): any {\r\n        const t = date;\r\n        const o = price;\r\n        const h = o + (Math.random() * 5);\r\n        const l = o - (Math.random() * 5);\r\n        const c = l + (Math.random() * (h - l));\r\n\r\n        return { date: t, open: o, high: h, low: l, close: c};\r\n    }\r\n\r\n    public GenerateData(startDate: Date, startPrice: number, stockName: string): any[] {\r\n        const stockData: any[] = [];\r\n        let stockTime = this.AddDays(startDate, 0);\r\n        let stockPrice: number = startPrice;\r\n\r\n        for (this.currIndex = 0; this.currIndex < this.maxPoints; this.currIndex++) {\r\n\r\n            const item = this.GenerateItem(stockTime, stockPrice);\r\n            stockTime = this.AddDays(stockTime, 1);\r\n            stockPrice += Math.random() * 4.1 - 2.0;\r\n            stockData.push(item);\r\n        }\r\n        // setting data intent for Series Title\r\n        (stockData as any).__dataIntents = {\r\n            close: [\"SeriesTitle/\" + stockName]\r\n        };\r\n        return stockData;\r\n    }\r\n\r\n    public AppendDataItemTo(data: any[]): void {\r\n        const lastItem = data[data.length - 1];\r\n        const stockPrice = lastItem.close + Math.random() * 4.1 - 2.0;\r\n        const stockDate = this.AddDays(lastItem.date, 1);\r\n        const newItem = this.GenerateItem(stockDate, stockPrice);\r\n        const oldVal = data[0];\r\n\r\n        data.push(newItem);\r\n        this.chart.notifyInsertItem(data, data.length - 1, newItem);\r\n        data.shift();\r\n        this.chart.notifyRemoveItem(data, 0, oldVal);\r\n    }\r\n\r\n    public OnDataFeedTick(): void {\r\n        if (!this.feedUpdating) {\r\n            return;\r\n        }\r\n        // appending new data items to each data feed\r\n        for (const data of this.dataFeeds) {\r\n            this.AppendDataItemTo(data);\r\n        }\r\n\r\n        // this.frameCounter++;\r\n        // const currTime = new Date();\r\n        // const elapsed = (currTime.getTime() - this.frameUpdate.getTime());\r\n        // if (elapsed > 5000) {\r\n        //     const fps = this.frameCounter / (elapsed / 1000.0);\r\n        //     this.frameUpdate = currTime;\r\n        //     this.frameCounter = 0;\r\n        //     this.fpsSpan.nativeElement.textContent = \"FPS: \" + Math.round(fps).toString();\r\n        // }\r\n    }\r\n\r\n    public StopDataFeed(): void {\r\n        if (this.feedInterval >= 0) {\r\n            this._zone.runOutsideAngular(() => {\r\n                window.clearInterval(this.feedInterval);\r\n            });\r\n            this.feedInterval = -1;\r\n            this.feedStatus.nativeElement.textContent = \"Turn On Live Data\";\r\n        }\r\n    }\r\n\r\n    public StartDataFeed(): void {\r\n        this._zone.runOutsideAngular(() => {\r\n            this.feedStatus.nativeElement.textContent = \"Turn Off Live Data\";\r\n            this.feedInterval = window.setInterval(() => this.OnDataFeedTick(),\r\n            this.refreshInterval);\r\n        });\r\n    }\r\n\r\n    public onFeedToggleClicked(): void {\r\n        if (this.feedUpdating) {\r\n            this.StopDataFeed();\r\n        } else {\r\n            this.StartDataFeed();\r\n        }\r\n\r\n        this.feedUpdating = !this.feedUpdating;\r\n    }\r\n\r\n    public ngAfterViewInit(): void {\r\n        this.frameUpdate = new Date();\r\n        this.setupInterval();\r\n    }\r\n\r\n    public ngOnDestroy(): void {\r\n        this.StopDataFeed();\r\n    }\r\n\r\n    public setupInterval(): void {\r\n        this.StopDataFeed();\r\n        this.StartDataFeed();\r\n    }\r\n\r\n    public onSeriesAdded(e: any): void {\r\n        const seriesName: string = e.args.series.name.toString();\r\n\r\n        // hide legend item for series in the zoom slider\r\n        if (seriesName.startsWith(\"zoomSliderSeries\")) {\r\n            e.args.series.title = \"\";\r\n            e.args.series.legendItemVisibility = 1;\r\n            e.args.series.legendItemBadgeTemplate = null;\r\n            e.args.series.legendItemTemplate = null;\r\n            e.args.series.legend = null;\r\n        }\r\n    }\r\n}\r\n","isMain":true,"fileExtension":"ts","fileHeader":"ts"},{"hasRelativeAssetsUrls":false,"path":"src/app/multiple-feeds/financial-chart-multiple-feeds.component.html","content":"<div class=\"container sample\">\r\n\r\n    <div class=\"options horizontal\">\r\n        <button (click)=\"onFeedToggleClicked()\">\r\n            <span #feedStatus class=\"options-label\">Turn Off Live Data</span>\r\n        </button>\r\n        <span #fpsSpan class=\"options-label\"></span>\r\n    </div>\r\n\r\n    <div class=\"options vertical\">\r\n        <label id=\"legendTitle\">Multiple Stock Data Feed from NYSE</label>\r\n        <igx-legend #legend class=\"legend\" orientation=\"horizontal\" ></igx-legend>\r\n    </div>\r\n    <igx-financial-chart height=\"100%\" width=\"100%\"\r\n        #chart\r\n        [dataSource]=\"dataFeeds\"\r\n        [tooltipTemplate]=\"stockTooltip\"\r\n        [legend]=\"legend\"\r\n        chartType=\"line\"\r\n        thickness=\"2\"\r\n        yAxisLabelExtent=\"40\"\r\n        isToolbarVisible=\"false\"\r\n        (seriesAdded)=\"onSeriesAdded($event)\">\r\n    </igx-financial-chart>\r\n\r\n\r\n    <ng-template let-series=\"series\" let-item=\"item\" #stockTooltip>\r\n        <div>\r\n            <div>\r\n                <div class=\"tooltipTitle\" [style.color]=\"series.actualBrush\">{{series.title}}</div>\r\n            </div>\r\n            <div class=\"tooltipTable\">\r\n                <div class=\"tooltipRow\" >\r\n                    <div class=\"tooltipLbl\" style=\"color: rgb(92, 92, 92);\">Date:</div>\r\n                    <div class=\"tooltipVal\">{{item.date | date: \"MMM dd, yyyy\"}}</div>\r\n                </div>\r\n                <div class=\"tooltipRow\" >\r\n                    <div class=\"tooltipLbl\" [style.color]=\"series.actualBrush\">Value:</div>\r\n                    <div class=\"tooltipVal\" [style.color]=\"series.actualBrush\">{{item.close | number:0}}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </ng-template>\r\n\r\n</div>\r\n","isMain":true,"fileExtension":"html","fileHeader":"html"},{"hasRelativeAssetsUrls":false,"path":"src/app/multiple-feeds/financial-chart-multiple-feeds.component.scss","content":"/* styles are loaded the Shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/\r\n","isMain":true,"fileExtension":"scss","fileHeader":"scss"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.module.ts","content":"import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppComponent } from \"./app.component\";\r\nimport { FinancialChartMultipleFeedsComponent } from \"./multiple-feeds/financial-chart-multiple-feeds.component\";\r\nimport { \r\n\tIgxFinancialChartModule,\r\n\tIgxLegendModule\r\n } from \"igniteui-angular-charts\";\n\n\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\r\n\tAppComponent,\r\n\tFinancialChartMultipleFeedsComponent\r\n],\n  imports: [\r\n\tBrowserModule,\r\n\tBrowserAnimationsModule,\r\n\tFormsModule,\r\n\tIgxFinancialChartModule,\r\n\tIgxLegendModule\r\n],\n  providers: [],\n  entryComponents: [],\n  schemas: []\n})\nexport class AppModule {}\n","isMain":true,"fileExtension":"ts","fileHeader":"modules"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.component.html","content":"<app-financial-chart-multiple-feeds></app-financial-chart-multiple-feeds>"}],"sampleDependencies":"{\"@angular/animations\":\"10.0.14\",\"@angular/common\":\"10.0.14\",\"@angular/compiler\":\"10.0.14\",\"@angular/core\":\"^10.0.14\",\"@angular/forms\":\"10.0.14\",\"@angular/platform-browser\":\"10.0.14\",\"@angular/platform-browser-dynamic\":\"10.0.14\",\"@types/hammerjs\":\"^2.0.35\",\"classlist.js\":\"^1.1.20150312\",\"core-js\":\"^2.6.2\",\"hammerjs\":\"^2.0.8\",\"igniteui-angular\":\"11.1.10\",\"igniteui-angular-charts\":\"11.2.0-beta.0\",\"igniteui-angular-core\":\"11.2.0-beta.0\",\"intl\":\"^1.2.5\",\"jszip\":\"^3.1.5\",\"rxjs\":\"^6.5.4\",\"tslib\":\"1.13.0\",\"web-animations-js\":\"^2.3.2\",\"zone.js\":\"~0.10.2\"}"}