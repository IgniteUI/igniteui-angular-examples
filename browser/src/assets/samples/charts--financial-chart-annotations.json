{"sampleFiles":[{"hasRelativeAssetsUrls":false,"path":"src/app/annotations/financial-chart-annotations.component.ts","content":"import { AfterViewInit, ViewChild, ChangeDetectionStrategy, Component } from \"@angular/core\";\r\nimport { IgxFinancialChartComponent } from \"igniteui-angular-charts\";\r\nimport { StocksUtility } from \"../../../utilities/StocksUtility\";\r\n\r\n@Component({\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [ StocksUtility ],\r\n    selector: \"app-financial-chart-annotations\",\r\n    styleUrls: [\"./financial-chart-annotations.component.scss\"],\r\n    templateUrl: \"./financial-chart-annotations.component.html\"\r\n})\r\nexport class FinancialChartAnnotationsComponent implements AfterViewInit {\r\n\r\n    @ViewChild(\"financialChart\", { static: true })\r\n    public chart: IgxFinancialChartComponent;\r\n    public stocksData: any;\r\n    public calloutsData: any[];\r\n    public options: SampleOptions = new SampleOptions();\r\n    public excludedProperties: any;\r\n\r\n    constructor(private dataService: StocksUtility) {\r\n\r\n        const today = new Date()\r\n        const year = today.getFullYear();\r\n        const dateMonth = today.getMonth();\r\n        const dateEnd = new Date(year + 5, dateMonth, 1);\r\n        const dateStart = new Date(year - 1, dateMonth, 1);\r\n\r\n        this.stocksData = [\r\n            this.dataService = StocksUtility.GetStocksBetween(dateStart, dateEnd)\r\n        ];\r\n\r\n        this.calloutsData = this.getCallouts(this.stocksData);\r\n    }\r\n\r\n    public ngAfterViewInit(): void {\r\n        // binding only properties with \"stack\" prefix\r\n        this.chart.excludedProperties = [ \"info\", \"label\", \"value\" ];\r\n    }\r\n\r\n    public getCallouts(stocks: any[]): any[] {\r\n        const callouts: any[] = [];\r\n        for (const stock of stocks) {\r\n            const intervalSplit = Math.floor(Math.random() * (300 - 280)) + 280;\r\n            const intervalDiv = Math.floor(Math.random() * (400 - 360)) + 360;\r\n            const calloutMin = new CalloutDataItem({label: \"MIN\"});\r\n            const calloutMax = new CalloutDataItem({label: \"MAX\"});\r\n            // initalizing values for min/max callouts\r\n            calloutMin.value = Number.MAX_VALUE;\r\n            calloutMax.value = Number.MIN_VALUE;\r\n            let idx: number = 0;\r\n\r\n            for (const item of stock) {\r\n                // finding item with min/max price\r\n                if (calloutMin.value > item.close) {\r\n                    calloutMin.value = item.close;\r\n                    calloutMin.index = idx;\r\n                }\r\n                if (calloutMax.value < item.close) {\r\n                    calloutMax.value = item.close;\r\n                    calloutMax.index = idx;\r\n                }\r\n                const offset = idx + 10;\r\n                const calloutEvent = new CalloutDataItem({index: idx });\r\n                // creating SPLIT/DIVIDEND events at specific intervals\r\n                if (offset % intervalSplit === 5) {\r\n                    calloutEvent.value = item.close;\r\n                    calloutEvent.label = \"SPLIT\";\r\n                    callouts.push(calloutEvent);\r\n                } else if (offset % intervalDiv === 5) {\r\n                    calloutEvent.value = item.close;\r\n                    calloutEvent.label = \"DIV\";\r\n                    callouts.push(calloutEvent);\r\n                }\r\n\r\n                idx++;\r\n            }\r\n            callouts.push(calloutMin);\r\n            callouts.push(calloutMax);\r\n        }\r\n        return callouts;\r\n    }\r\n}\r\n\r\nclass CalloutDataItem {\r\n    public label: string;\r\n    public index: number;\r\n    public value: number;\r\n\r\n    public constructor(init?: Partial<CalloutDataItem>) {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nclass SampleOptions {\r\n    public crosshairAnnotations: string = \"Both\";\r\n    public finalValueAnnotations: boolean = true;\r\n    public calloutsVisible: boolean = true;\r\n    public itemToolTip: string = \"Item\";\r\n    public markerTypes: string = \"None\";\r\n}\r\n","isMain":true,"fileExtension":"ts","fileHeader":"ts"},{"hasRelativeAssetsUrls":false,"path":"src/app/annotations/financial-chart-annotations.component.html","content":"<div class=\"container sample\">\r\n    <div class=\"options horizontal\">\r\n        <label class=\"options-label\">Annotations: </label>\r\n        <label class=\"options-item\"><input [(ngModel)]=\"options.calloutsVisible\" type=\"checkbox\" />Show Callouts</label>\r\n        <label class=\"option-item\"><input [(ngModel)]=\"options.finalValueAnnotations\" type=\"checkbox\" />Final Value</label>\r\n        <label class=\"options-item\">Crosshairs</label>\r\n        <select class=\"select\" [(ngModel)]=\"options.crosshairAnnotations\">\r\n            <option>None</option>\r\n            <option>Both</option>\r\n        </select>\r\n        <label class=\"optionItem\">Item Tooltip</label>\r\n        <select class=\"select\" [(ngModel)]=\"options.itemToolTip\">\r\n            <option>None</option>\r\n            <option>Item</option>\r\n        </select>\r\n        <label class=\"optionItem\">Markers</label>\r\n        <select class=\"select\" [(ngModel)]=\"options.markerTypes\">\r\n            <option>None</option>\r\n            <option>Circle</option>\r\n        </select>\r\n    </div>\r\n    <div class=\"container\">\r\n        <igx-financial-chart #financialChart height=\"100%\" width=\"100%\"\r\n            [dataSource]=\"stocksData\"\r\n            chartType=\"Line\"\r\n            [crosshairsDisplayMode]=\"options.crosshairAnnotations\"\r\n            [finalValueAnnotationsVisible]=\"options.finalValueAnnotations\"\r\n            [markerTypes]=\"options.markerTypes\"\r\n            [calloutsVisible]=\"options.calloutsVisible\"\r\n            [calloutsDataSource]=\"calloutsData\"\r\n            calloutsXMemberPath=\"index\"\r\n            calloutsYMemberPath=\"value\"\r\n            calloutsLabelMemberPath=\"label\"\r\n            calloutsContentMemberPath=\"label\"\r\n            [toolTipType]=\"options.itemToolTip\"\r\n            xAxisExtent=\"50\"\r\n            thickness=\"2\">\r\n        </igx-financial-chart>\r\n\r\n    </div>\r\n</div>\r\n","isMain":true,"fileExtension":"html","fileHeader":"html"},{"hasRelativeAssetsUrls":false,"path":"src/app/annotations/financial-chart-annotations.component.scss","content":"/* styles are loaded the Shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/\r\n","isMain":true,"fileExtension":"scss","fileHeader":"scss"},{"hasRelativeAssetsUrls":false,"path":"src/app/utilities/StocksUtility.ts","content":"export class StocksUtility {\r\n\r\n    public static intervalDays: number = 1;\r\n    public static intervalHours: number = 0;\r\n    public static intervalMinutes: number = 0;\r\n\r\n    public static priceStart: number = 200;\r\n    public static priceRange: number = 1;\r\n    public static volumeRange: number = 1000;\r\n    public static volumeStart: number = 20000000;\r\n\r\n    public static GetStocksFrom(dateEnd: Date, years: number): any {\r\n        const dateStart = this.AddYears(dateEnd, -years);\r\n        return this.GetStocksBetween(dateStart, dateEnd);\r\n    }\r\n\r\n    public static GetStocksItems(points: number): any {\r\n        this.intervalDays = 0;\r\n        this.intervalHours = 1;\r\n        this.intervalMinutes = 0;\r\n\r\n        const today = new Date();\r\n        const year = today.getFullYear();\r\n        const dateEnd = new Date(year, 11, 1);\r\n        const dateStart = this.AddHours(dateEnd, -points);\r\n        return this.GetStocksBetween(dateStart, dateEnd);\r\n    }\r\n\r\n    public static GetStocksBetween(dateStart: Date, dateEnd: Date): any {\r\n\r\n        let interval = this.intervalDays * 24 * 60;\r\n        interval += this.intervalHours * 60;\r\n        interval += this.intervalMinutes;\r\n\r\n        let time = this.AddDays(dateStart, 0);\r\n        let v = this.volumeStart;\r\n        let o = this.priceStart;\r\n        let h = o + (Math.random() * this.priceRange);\r\n        let l = o - (Math.random() * this.priceRange);\r\n        let c = l + (Math.random() * (h - l));\r\n\r\n        const stock = [];\r\n        while (time.getTime() < dateEnd.getTime()) {\r\n            stock.push({ date: time, open: o, high: h, low: l, close: c, volume: v });\r\n\r\n            o = c + ((Math.random() - 0.5) * this.priceRange);\r\n            if (o < 0) {\r\n                o = Math.abs(o) + 2;\r\n            }\r\n            h = o + (Math.random() * this.priceRange);\r\n            l = o - (Math.random() * this.priceRange);\r\n            c = l + (Math.random() * (h - l));\r\n            v = v + ((Math.random() - 0.5) * this.volumeRange);\r\n            if (v < 0) {\r\n                v = Math.abs(v) + 10000;\r\n            }\r\n\r\n            o = Math.round(o * 100) / 100;\r\n            h = Math.round(h * 100) / 100;\r\n            l = Math.round(l * 100) / 100;\r\n            c = Math.round(c * 100) / 100;\r\n            v = Math.round(v * 100) / 100;\r\n\r\n            time = this.AddMinutes(time, interval);\r\n        }\r\n        // setting data intent for Series Title\r\n        (stock as any).__dataIntents = {\r\n            close: [\"SeriesTitle/Stock Prices\"]\r\n        };\r\n        return stock;\r\n    }\r\n\r\n    public static AddMinutes(date: Date, minutes: number): Date {\r\n        return new Date(date.getTime() + minutes * 60 * 1000);\r\n    }\r\n\r\n    public static AddHours(date: Date, hours: number): Date {\r\n        return new Date(date.getTime() + hours * 60 * 60 * 1000);\r\n    }\r\n\r\n    public static AddDays(date: Date, days: number): Date {\r\n        return new Date(date.getTime() + days * 24 * 60 * 60 * 1000);\r\n    }\r\n\r\n    public static AddYears(date: Date, years: number): Date {\r\n        return new Date(date.getFullYear() + years, date.getMonth(), date.getDate());\r\n    }\r\n\r\n    public static toShortString(largeValue: number): string {\r\n        let roundValue: number;\r\n\r\n        if (largeValue >= 1000000) {\r\n            roundValue = Math.round(largeValue / 100000) / 10;\r\n            return roundValue + \"M\";\r\n        }\r\n        if (largeValue >= 1000) {\r\n            roundValue = Math.round(largeValue / 100) / 10;\r\n            return roundValue + \"K\";\r\n        }\r\n\r\n        roundValue = Math.round(largeValue);\r\n        return roundValue + \"\";\r\n    }\r\n\r\n    public static GetYear(date: Date): number {\r\n        return date.getFullYear();\r\n    }\r\n\r\n    public static GetQuarter(date: Date): number {\r\n        const month = date.getMonth();\r\n        return Math.round((month + 2) / 3);\r\n    }\r\n\r\n    public static GetLastItem(array: any[]): any {\r\n        if (array.length === 0) {\r\n            return null;\r\n        }\r\n        return array[array.length - 1];\r\n    }\r\n\r\n    public static GetNewItem(array: any[], interval?: number): any {\r\n        const lastItem = this.GetLastItem(array);\r\n\r\n        if (interval === undefined) {\r\n            interval = this.intervalDays * 24 * 60;\r\n            interval += this.intervalHours * 60;\r\n            interval += this.intervalMinutes;\r\n        }\r\n\r\n        const time = this.AddMinutes(lastItem.date, interval);\r\n        let v = lastItem.volume;\r\n        let o = lastItem.open;\r\n        let h = lastItem.high;\r\n        let l = lastItem.low;\r\n        let c = lastItem.close;\r\n\r\n        o = c + ((Math.random() - 0.5) * this.priceRange);\r\n        if (o < 0) {\r\n            o = Math.abs(o) + 2;\r\n        }\r\n        h = o + (Math.random() * this.priceRange);\r\n        l = o - (Math.random() * this.priceRange);\r\n        c = l + (Math.random() * (h - l));\r\n        v = v + ((Math.random() - 0.5) * this.volumeRange);\r\n        if (v < 0) {\r\n            v = Math.abs(v) + 10000;\r\n        }\r\n\r\n        const newValue = { date: time, open: o, high: h, low: l, close: c, volume: v };\r\n\r\n        return newValue;\r\n    }\r\n}\r\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.module.ts","content":"import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppComponent } from \"./app.component\";\r\nimport { FinancialChartAnnotationsComponent } from \"./annotations/financial-chart-annotations.component\";\r\nimport { \r\n\tIgxFinancialChartModule,\r\n\tIgxLegendModule\r\n } from \"igniteui-angular-charts\";\r\nimport { StocksUtility } from \"./utilities/StocksUtility\";\n\n\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\r\n\tAppComponent,\r\n\tFinancialChartAnnotationsComponent\r\n],\n  imports: [\r\n\tBrowserModule,\r\n\tBrowserAnimationsModule,\r\n\tFormsModule,\r\n\tIgxFinancialChartModule,\r\n\tIgxLegendModule\r\n],\n  providers: [StocksUtility],\n  entryComponents: [],\n  schemas: []\n})\nexport class AppModule {}\n","isMain":true,"fileExtension":"ts","fileHeader":"modules"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.component.html","content":"<app-financial-chart-annotations></app-financial-chart-annotations>"}],"sampleDependencies":"{\"@angular/animations\":\"10.0.14\",\"@angular/common\":\"10.0.14\",\"@angular/compiler\":\"10.0.14\",\"@angular/core\":\"^10.0.14\",\"@angular/forms\":\"10.0.14\",\"@angular/platform-browser\":\"10.0.14\",\"@angular/platform-browser-dynamic\":\"10.0.14\",\"@types/hammerjs\":\"^2.0.35\",\"classlist.js\":\"^1.1.20150312\",\"core-js\":\"^2.6.2\",\"hammerjs\":\"^2.0.8\",\"igniteui-angular\":\"11.1.10\",\"igniteui-angular-charts\":\"11.2.0-beta.0\",\"igniteui-angular-core\":\"11.2.0-beta.0\",\"intl\":\"^1.2.5\",\"jszip\":\"^3.1.5\",\"rxjs\":\"^6.5.4\",\"tslib\":\"1.13.0\",\"web-animations-js\":\"^2.3.2\",\"zone.js\":\"~0.10.2\"}"}