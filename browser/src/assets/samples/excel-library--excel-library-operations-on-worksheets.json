{"sampleFiles":[{"hasRelativeAssetsUrls":false,"path":"src/app/excel-library/operations-on/worksheets.component.ts","content":"import {\r\n    AfterViewInit, ChangeDetectionStrategy, Component\r\n} from \"@angular/core\";\r\nimport { Color } from \"igniteui-angular-core\";\r\n\r\nimport {\r\n    CustomFilterCondition,\r\n    ExcelComparisonOperator,\r\n    FormatConditionTextOperator,\r\n    OrderedSortCondition,\r\n    RelativeIndex,\r\n    SortDirection,\r\n    WorkbookColorInfo\r\n} from \"igniteui-angular-excel\";\r\n\r\nimport { Workbook } from \"igniteui-angular-excel\";\r\nimport { WorkbookFormat } from \"igniteui-angular-excel\";\r\nimport { ExcelUtility } from \"../../utilities/excel-utility\";\r\n\r\n@Component({\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    selector: \"app-worksheets\",\r\n    styleUrls: [\"./worksheets.component.scss\"],\r\n    templateUrl: \"./worksheets.component.html\"\r\n})\r\nexport class ExcelLibraryOperationsOnWorksheetsComponent implements AfterViewInit {\r\n\r\n    // if needed, uncomment to get access to IG control\r\n    // @ViewChild(\"chart\")\r\n    // public chart: IgxCategoryChartComponent;\r\n    // @ViewChild(\"chart\")\r\n    // public chart: IgxDataChartComponent;\r\n    // @ViewChild(\"grid\")\r\n    // public chart: IgxGridComponent;\r\n\r\n    public data: any;\r\n    public isSorted: boolean;\r\n    public isFiltered: boolean;\r\n    public isProtected: boolean;\r\n    public showGridlines: boolean;\r\n    public showHeaders: boolean;\r\n    public applyConditionalFormatting: boolean;\r\n    public workbook: Workbook;\r\n\r\n    constructor() {\r\n        this.showGridlines = true;\r\n        this.showHeaders = true;\r\n    }\r\n\r\n    public ngOnInit() {\r\n    }\r\n\r\n    public ngAfterViewInit(): void {\r\n        // bind excel data to the chart\r\n        // this.chart.dataSource = this.data;\r\n    }\r\n\r\n    public initData(): void {\r\n        const companies = [\"Amazon\", \"Ford\", \"Jaguar\", \"Tesla\", \"IBM\", \"Microsoft\"];\r\n        const firstNames = [\"Andrew\", \"Mike\", \"Martin\", \"Ann\", \"Victoria\", \"John\", \"Brian\", \"Jason\", \"David\"];\r\n        const lastNames = [\"Smith\", \"Jordan\", \"Johnson\", \"Anderson\", \"Louis\", \"Phillips\", \"Williams\"];\r\n        const cities = [\"London\", \"Paris\", \"Boston\", \"Berlin\"];\r\n        const countries = [\"UK\", \"France\", \"USA\", \"Germany\", \"Poland\", \"Brazil\"];\r\n        const titles = [\"Sales Rep.\", \"Owner\", \"Administrator\", \"Manager\"];\r\n        const streets = [\"Main St\", \"Madison St\", \"Broad Way\"];\r\n        const headers = [\"Company Name\",\r\n            \"Contact Title\",\r\n            \"Country\",\r\n            \"City\",\r\n            \"Contact Name\",\r\n            \"Address\",\r\n            \"Postal Code\",\r\n            \"Customer ID\",\r\n            \"Salary\",\r\n            \"Age\"];\r\n        const dataSource = new Array<any>();\r\n        // generating excel data source\r\n        this.workbook = new Workbook(WorkbookFormat.Excel2007);\r\n        const sheet = this.workbook.worksheets().add(\"Sheet1\");\r\n\r\n        for (let i = 0; i < headers.length; i++) {\r\n            sheet.rows(0).cells(i).value = headers[i];\r\n        }\r\n\r\n        for (let i = 1; i < 20; i++) {\r\n            const companyName = this.getItem(companies);\r\n            const contactTitle = this.getItem(titles);\r\n            const country = this.getItem(countries);\r\n            const city = this.getItem(cities);\r\n            const contactName = this.getItem(firstNames) + \" \" + this.getItem(lastNames);\r\n            const address = this.getRandom(10, 60) + \" \" + this.getItem(streets);\r\n            const postalCode = this.getRandom(100, 400) + \" \" + this.getRandom(50, 90);\r\n            const customerID = \"CID-\" + this.getRandom(500, 900);\r\n            const salary = this.getSalary(85000, 200000);\r\n            const age = this.getRandom(20, 65);\r\n            const dataItem = [\r\n                companyName,\r\n                contactTitle,\r\n                country,\r\n                city,\r\n                contactName,\r\n                address,\r\n                postalCode,\r\n                customerID,\r\n                salary,\r\n                age\r\n            ];\r\n            for (let j = 0; j < dataItem.length; j++) {\r\n                sheet.rows(i).cells(j).value = dataItem[j];\r\n            }\r\n        }\r\n    }\r\n\r\n    public exportData() {\r\n        this.initData();\r\n        const sheet = this.workbook.worksheets(0);\r\n        sheet.defaultColumnWidth = 220 * 20;\r\n\r\n        if (this.isSorted) {\r\n            sheet.sortSettings.setRegion(\"A1:A20\");\r\n            sheet.sortSettings.sortConditions().addItem(\r\n                new RelativeIndex(0), new OrderedSortCondition(SortDirection.Ascending));\r\n        }\r\n        if (this.isFiltered) {\r\n            sheet.filterSettings.setRegion(\"C1:C20\");\r\n            sheet.filterSettings.applyCustomFilter(0, new CustomFilterCondition(ExcelComparisonOperator.Equals, \"USA\"));\r\n        }\r\n        if (this.isProtected) {\r\n            sheet.protect();\r\n        }\r\n        if (!this.showHeaders) {\r\n            sheet.displayOptions.showRowAndColumnHeaders = false;\r\n        }\r\n        if (!this.showGridlines) {\r\n            sheet.displayOptions.showGridlines = false;\r\n        }\r\n        if (this.applyConditionalFormatting) {\r\n            const green = new Color();\r\n            green.colorString = \"Green\";\r\n\r\n            const blue = new Color();\r\n            blue.colorString = \"Blue\";\r\n\r\n            const orange = new Color();\r\n            orange.colorString = \"Orange\";\r\n\r\n            const format = sheet.conditionalFormats().addTextCondition(\r\n                \"A1:A20\", \"Amazon\", FormatConditionTextOperator.Contains);\r\n\r\n            const format2 = sheet.conditionalFormats().addTextCondition(\r\n                \"A1:A20\", \"IBM\", FormatConditionTextOperator.Contains);\r\n\r\n            const format3 = sheet.conditionalFormats().addTextCondition(\r\n                \"A1:A20\", \"Tesla\", FormatConditionTextOperator.Contains);\r\n\r\n            format.cellFormat.font.colorInfo = new WorkbookColorInfo(green);\r\n            format2.cellFormat.font.colorInfo = new WorkbookColorInfo(blue);\r\n            format3.cellFormat.font.colorInfo = new WorkbookColorInfo(orange);\r\n        }\r\n\r\n        ExcelUtility.save(this.workbook, \"worksheetsSample\");\r\n    }\r\n\r\n    public getRandom(min: number, max: number): number {\r\n        return Math.floor(Math.random() * (max - min + 1) + min);\r\n    }\r\n\r\n    public getItem(array: string[]): string {\r\n        const i = this.getRandom(0, array.length - 1);\r\n        return array[i];\r\n    }\r\n\r\n    public getSalary(min: number, max: number) {\r\n        const n = this.getRandom(min, max);\r\n        const s = n.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\r\n        return \"$\" + s.replace(\".00\", \"\");\r\n    }\r\n}\r\n","isMain":true,"fileExtension":"ts","fileHeader":"ts"},{"hasRelativeAssetsUrls":false,"path":"src/app/excel-library/operations-on/worksheets.component.html","content":"<div class=\"sample-wrapper container\">\r\n    <div class=\"options\">\r\n        <button class=\"optionItem\" (click)=\"exportData()\">Export Excel File with Settings</button>\r\n        <label class=\"optionItem\"><input [(ngModel)]=\"isSorted\" type=\"checkbox\" />Apply Sort</label>\r\n        <label class=\"optionItem\"><input [(ngModel)]=\"isFiltered\" type=\"checkbox\" />Apply Filter</label>\r\n        <label class=\"optionItem\"><input [(ngModel)]=\"isProtected\" type=\"checkbox\" />Protect Worksheet</label>\r\n        <label class=\"optionItem\"><input [(ngModel)]=\"showGridlines\" type=\"checkbox\" />Show Gridlines</label>\r\n        <label class=\"optionItem\"><input [(ngModel)]=\"showHeaders\" type=\"checkbox\" />Show Row and Column Headers</label>\r\n        <label class=\"optionItem\"><input [(ngModel)]=\"applyConditionalFormatting\" type=\"checkbox\" />Apply Conditional Formatting</label>\r\n    </div>\r\n</div>","isMain":true,"fileExtension":"html","fileHeader":"html"},{"hasRelativeAssetsUrls":false,"path":"src/app/excel-library/operations-on/worksheets.component.scss","content":".container {\r\n    display: flex;\r\n    flex-flow: column;\r\n    height: 100%;\r\n    min-width: 300px;\r\n}\r\n\r\n.options {\r\n    margin-top: 5px;\r\n    margin-bottom: 5px;\r\n    margin-right: 10px;\r\n    margin-left: 10px;\r\n}\r\n\r\n.optionItem {\r\n    margin-left: 10px;\r\n    display: inline-block;\r\n    vertical-align: center;\r\n}","isMain":true,"fileExtension":"scss","fileHeader":"scss"},{"hasRelativeAssetsUrls":false,"path":"src/app/utilities/excel-utility.ts","content":"import { saveAs } from \"file-saver\";\r\nimport { Workbook } from \"igniteui-angular-excel\";\r\nimport { WorkbookFormat } from \"igniteui-angular-excel\";\r\nimport { WorkbookSaveOptions } from \"igniteui-angular-excel\";\r\n\r\nexport class ExcelUtility {\r\n    public static getExtension(format: WorkbookFormat) {\r\n        switch (format) {\r\n            case WorkbookFormat.StrictOpenXml:\r\n            case WorkbookFormat.Excel2007:\r\n                return \".xlsx\";\r\n            case WorkbookFormat.Excel2007MacroEnabled:\r\n                return \".xlsm\";\r\n            case WorkbookFormat.Excel2007MacroEnabledTemplate:\r\n                return \".xltm\";\r\n            case WorkbookFormat.Excel2007Template:\r\n                return \".xltx\";\r\n            case WorkbookFormat.Excel97To2003:\r\n                return \".xls\";\r\n            case WorkbookFormat.Excel97To2003Template:\r\n                return \".xlt\";\r\n        }\r\n    }\r\n\r\n    public static load(file: File): Promise<Workbook> {\r\n        return new Promise<Workbook>((resolve, reject) => {\r\n            ExcelUtility.readFileAsUint8Array(file).then((a) => {\r\n                Workbook.load(a, null, (w) => {\r\n                    resolve(w);\r\n                }, (e) => {\r\n                    reject(e);\r\n                });\r\n            }, (e) => {\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    public static loadFromUrl(url: string): Promise<Workbook> {\r\n        return new Promise<Workbook>((resolve, reject) => {\r\n            const req = new XMLHttpRequest();\r\n            req.open(\"GET\", url, true);\r\n            req.responseType = \"arraybuffer\";\r\n            req.onload = (d) => {\r\n                const data = new Uint8Array(req.response);\r\n                Workbook.load(data, null, (w) => {\r\n                    resolve(w);\r\n                }, (e) => {\r\n                    reject(e);\r\n                });\r\n            };\r\n            req.send();\r\n        });\r\n    }\r\n\r\n    public static save(workbook: Workbook, fileNameWithoutExtension: string): Promise<string> {\r\n        return new Promise<string>((resolve, reject) => {\r\n            const opt = new WorkbookSaveOptions();\r\n            opt.type = \"blob\";\r\n\r\n            workbook.save(opt, (d) => {\r\n                const fileExt = ExcelUtility.getExtension(workbook.currentFormat);\r\n                const fileName = fileNameWithoutExtension + fileExt;\r\n                saveAs(d as Blob, fileName);\r\n                resolve(fileName);\r\n            }, (e) => {\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    private static readFileAsUint8Array(file: File): Promise<Uint8Array> {\r\n        return new Promise<Uint8Array>((resolve, reject) => {\r\n            const fr = new FileReader();\r\n            fr.onerror = (e) => {\r\n                reject(fr.error);\r\n            };\r\n\r\n            if (fr.readAsBinaryString) {\r\n                fr.onload = (e) => {\r\n                    const rs = (fr as any).resultString;\r\n                    const str: string = rs != null ? rs : fr.result;\r\n                    const result = new Uint8Array(str.length);\r\n                    for (let i = 0; i < str.length; i++) {\r\n                        result[i] = str.charCodeAt(i);\r\n                    }\r\n                    resolve(result);\r\n                };\r\n                fr.readAsBinaryString(file);\r\n            } else {\r\n                fr.onload = (e) => {\r\n                    resolve(new Uint8Array(fr.result as ArrayBuffer));\r\n                };\r\n                fr.readAsArrayBuffer(file);\r\n            }\r\n        });\r\n    }\r\n}\r\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.module.ts","content":"import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppComponent } from \"./app.component\";\r\nimport { \r\n\tIgxButtonModule,\r\n\tIgxGridModule\r\n } from \"igniteui-angular\";\r\nimport { IgxCategoryChartModule } from \"igniteui-angular-charts\";\r\nimport { IgxExcelModule } from \"igniteui-angular-excel\";\r\nimport { ExcelUtility } from \"./utilities/excel-utility\";\r\nimport { ExcelLibraryOperationsOnWorksheetsComponent } from \"./excel-library/operations-on/worksheets.component\";\n\n\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\r\n\tAppComponent,\r\n\tExcelLibraryOperationsOnWorksheetsComponent\r\n],\n  imports: [\r\n\tBrowserModule,\r\n\tBrowserAnimationsModule,\r\n\tFormsModule,\r\n\tIgxButtonModule,\r\n\tIgxCategoryChartModule,\r\n\tIgxGridModule,\r\n\tIgxExcelModule\r\n],\n  providers: [],\n  entryComponents: [],\n  schemas: []\n})\nexport class AppModule {}\n","isMain":true,"fileExtension":"ts","fileHeader":"modules"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.component.html","content":"<app-worksheets></app-worksheets>"}],"sampleDependencies":"{\"@angular/animations\":\"10.0.14\",\"@angular/common\":\"10.0.14\",\"@angular/compiler\":\"10.0.14\",\"@angular/core\":\"^10.0.14\",\"@angular/forms\":\"10.0.14\",\"@angular/platform-browser\":\"10.0.14\",\"@angular/platform-browser-dynamic\":\"10.0.14\",\"@types/hammerjs\":\"^2.0.35\",\"classlist.js\":\"^1.1.20150312\",\"core-js\":\"^2.6.2\",\"hammerjs\":\"^2.0.8\",\"igniteui-angular\":\"11.1.10\",\"igniteui-angular-core\":\"11.2.0-beta.0\",\"igniteui-angular-excel\":\"11.2.0-beta.0\",\"intl\":\"^1.2.5\",\"jszip\":\"^3.1.5\",\"rxjs\":\"^6.5.4\",\"tslib\":\"1.13.0\",\"web-animations-js\":\"^2.3.2\",\"zone.js\":\"~0.10.2\"}"}
