{"sampleFiles":[{"hasRelativeAssetsUrls":false,"path":"src/app/maps/geo-map-navigation/map-navigation.component.ts","content":"import { AfterViewInit, Component, TemplateRef, ViewChild, ChangeDetectorRef } from \"@angular/core\";\r\nimport { IgxArcGISOnlineMapImagery  } from \"igniteui-angular-maps\";\r\nimport { IgxGeographicMapComponent } from \"igniteui-angular-maps\";\r\nimport { EsriUtility, EsriStyle } from \"../../utilities/EsriUtility\";\r\nimport { MapUtility, MapRegion } from \"../../utilities/MapUtility\";\r\nimport { IgxRectChangedEventArgs } from 'igniteui-angular-core';\r\n\r\n@Component({\r\n  selector: \"app-map-navigation\",\r\n  styleUrls: [\"./map-navigation.component.scss\"],\r\n  templateUrl: \"./map-navigation.component.html\"\r\n})\r\n\r\nexport class MapNavigationComponent implements AfterViewInit {\r\n\r\n    public isRunning: boolean;\r\n    public regionType: string = \"United States\";\r\n    @ViewChild(\"map\", {static: true})\r\n    public geoMap: IgxGeographicMapComponent;\r\n    @ViewChild(\"template\", {static: true})\r\n    public tooltip: TemplateRef<object>;\r\n\r\n    public geoRect: any;\r\n    public geoT: string;\r\n    public geoL: string;\r\n    public geoH: string;\r\n    public geoW: string;\r\n\r\n    public winT: string;\r\n    public winL: string;\r\n    public winH: string;\r\n    public winW: string;\r\n\r\n    public posHorizontal: number;\r\n    public posVertical: number;\r\n    public scale: number;\r\n    public mapHoverLongitude: string = \"0.0°W\";\r\n    public mapHoverLatitude: string = \"0.0°S\";\r\n    public mapHoverX: string = \"0.0000\";\r\n    public mapHoverY: string = \"0.0000\";\r\n    public mapHoverPixelX = \"0 px\";\r\n    public mapHoverPixelY = \"0 px\";\r\n    public navigationOptions: Element[] = [];\r\n    public navigationRegions: any = {};\r\n\r\n    constructor(private ref: ChangeDetectorRef) {\r\n\r\n        const regions =  MapUtility.getRegions();\r\n        for (const key in regions) {\r\n            if (regions.hasOwnProperty(key)) {\r\n                const region = regions[key];\r\n                const name = region.name;\r\n                this.navigationRegions[name] = region;\r\n            }\r\n        }\r\n    }\r\n\r\n    public ngAfterViewInit(): void {\r\n        this.componentDidMount();\r\n\r\n        if (this.geoMap !== undefined) {\r\n            console.log(\"ngAfterViewInit map\");\r\n            this.geoMap.actualWindowRectChanged.subscribe((e: IgxRectChangedEventArgs) =>\r\n                this.onMapWindowRectChanged(this.geoMap, e)\r\n            );\r\n\r\n            this.geoMap.zoomToGeographic({ left: -134.5, top: 16.5, width: 70.0, height: 37.0 });\r\n\r\n            const tileSource = new IgxArcGISOnlineMapImagery();\r\n            tileSource.mapServerUri = EsriUtility.getUri(EsriStyle.WorldOceansMap);\r\n            this.geoMap.backgroundContent = tileSource;\r\n            this.geoMap.windowPositionHorizontal = 0.1;\r\n            this.geoMap.windowPositionVertical = 0.1;\r\n            this.geoMap.windowScale = 0.1;\r\n        }\r\n    }\r\n\r\n    public onMapWindowRectChanged(geoMap: IgxGeographicMapComponent, e: any) {\r\n\r\n        // converting window rect to geographic rect/region:\r\n        const geoRect: any = geoMap.getGeographicFromZoom(e.args.newRect);\r\n        geoRect.bottom = geoRect.top + geoRect.height;\r\n        geoRect.right = geoRect.left + geoRect.width;\r\n        // calculating center of geographic region\r\n        geoRect.longitude = geoRect.left + (geoRect.width / 2);\r\n        geoRect.latitude = geoRect.top + (geoRect.height / 2);\r\n        this.geoRect = geoRect;\r\n\r\n        const h = geoMap.actualWindowPositionHorizontal\r\n        const v = geoMap.actualWindowPositionVertical;\r\n        const s = geoMap.actualWindowScale;\r\n\r\n        this.geoT = \"T: \" + MapUtility.toLat(this.geoRect.top);\r\n        this.geoL = \"L: \" + MapUtility.toLng(this.geoRect.left);\r\n        this.geoH = \"H: \" + MapUtility.toLng(this.geoRect.height);\r\n        this.geoW = \"W: \" + MapUtility.toLng(this.geoRect.width);\r\n\r\n        this.winT = \"T: \" + e.args.newRect.top.toFixed(4);\r\n        this.winL = \"L: \" + e.args.newRect.left.toFixed(4);\r\n        this.winH = \"H: \" + e.args.newRect.height.toFixed(4);\r\n        this.winW = \"W: \" + e.args.newRect.width.toFixed(4);\r\n\r\n        this.posHorizontal = parseFloat(h.toFixed(4));\r\n        this.posVertical = parseFloat(v.toFixed(4));\r\n        this.scale = parseFloat(s.toFixed(4));\r\n\r\n        this.ref.detectChanges();\r\n    }\r\n\r\n    public onMapMouseMove = (e: any) => {\r\n        const bounds = e.target.getBoundingClientRect();\r\n        const relativeCoordinate = {\r\n            x: e.clientX - bounds.left,\r\n            y: e.clientY - bounds.top\r\n        };\r\n\r\n        const windowCoordinate = {\r\n            x: (e.clientX - bounds.left) / bounds.width,\r\n            y: (e.clientY - bounds.top) / bounds.height\r\n        };\r\n\r\n        // converting mouse pixel coordinate to geographic coordinate:\r\n        const geoCoordinate: any = this.geoMap.getGeographicPoint(relativeCoordinate);\r\n\r\n        this.mapHoverLongitude = MapUtility.toLng(geoCoordinate.x);\r\n        this.mapHoverLatitude = MapUtility.toLat(geoCoordinate.y);\r\n        this.mapHoverX = windowCoordinate.x.toFixed(4);\r\n        this.mapHoverY = windowCoordinate.y.toFixed(4);\r\n        this.mapHoverPixelX = MapUtility.toPixel(relativeCoordinate.x);\r\n        this.mapHoverPixelY = MapUtility.toPixel(relativeCoordinate.y);\r\n\r\n        this.ref.detectChanges();\r\n    }\r\n\r\n    public componentDidMount() {\r\n        const elem = document.getElementById('map');\r\n        elem.addEventListener('mousemove', this.onMapMouseMove, false);\r\n    }\r\n\r\n    public onSelectionChanged = (e: any) => {\r\n        if (this.geoMap === undefined) return;\r\n\r\n        const name = e.target.value.toString();\r\n        const region = this.navigationRegions[name];\r\n\r\n        this.geoMap.zoomToGeographic(region);\r\n    }\r\n}\r\n","isMain":true,"fileExtension":"ts","fileHeader":"ts"},{"hasRelativeAssetsUrls":false,"path":"src/app/maps/geo-map-navigation/map-navigation.component.html","content":"<div class=\"container sample\">\r\n\r\n    <div class=\"container\" id=\"map\" >\r\n        <igx-geographic-map #map\r\n            width=\"100%\"\r\n            height=\"100%\"\r\n            zoomable=\"true\">\r\n        </igx-geographic-map>\r\n    </div>\r\n\r\n    <div class=\"overlay-left\" >\r\n        <div class=\"vertical overlay-border\" style=\"background: rgba(217, 217, 217, 0.5)\" >\r\n            <label style=\"font-weight: 600\" >Select Map Region</label>\r\n            <select [(ngModel)]=\"regionType\" (change)=\"onSelectionChanged($event)\">\r\n                <option>Australia</option>\r\n                <option>Caribbean</option>\r\n                <option>Egypt</option>\r\n                <option>European</option>\r\n                <option>Japan</option>\r\n                <option>Hawaii</option>\r\n                <option>Poland</option>\r\n                <option>South Africa</option>\r\n                <option>United States</option>\r\n                <option>United Kingdom</option>\r\n                <option>Uruguay</option>\r\n            </select>\r\n            <label style=\"font-weight: 600\">Map Geographic Rect</label>\r\n\r\n            <div class=\"horizontal\" >\r\n                <div class=\"vertical\"  style=\"margin-right: 1rem\">\r\n                    <label >{{geoT}}</label>\r\n                    <label >{{geoL}}</label>\r\n                </div>\r\n                <div class=\"vertical\">\r\n                    <label >{{geoH}}</label>\r\n                    <label >{{geoW}}</label>\r\n                </div>\r\n            </div>\r\n\r\n            <label style=\"font-weight: 600\">Map Window Rect</label>\r\n            <div class=\"horizontal\">\r\n                <div class=\"vertical\" style=\"margin-right: 1rem\">\r\n                    <label >{{winT}}</label>\r\n                    <label >{{winL}}</label>\r\n                </div>\r\n                <div class=\"vertical\">\r\n                    <label >{{winH}}</label>\r\n                    <label >{{winW}}</label>\r\n                </div>\r\n            </div>\r\n\r\n            <label style=\"font-weight: 600\">Map Window Position</label>\r\n            <div class=\"horizontal\">\r\n                <div class=\"vertical\" style=\"margin-right: 1rem\">\r\n                    <label >Horizontal:</label>\r\n                    <label >Vertical:</label>\r\n                    <label >Scale:</label>\r\n                </div>\r\n                <div class=\"vertical\">\r\n                    <label >{{posHorizontal}}</label>\r\n                    <label >{{posVertical}}</label>\r\n                    <label >{{scale}}</label>\r\n                </div>\r\n            </div>\r\n\r\n            <label style=\"font-weight: 600\">Map Hover Coordinates</label>\r\n            <div class=\"horizontal\">\r\n                <div class=\"vertical\" style=\"margin-right: 1rem\">\r\n                    <label >Longitude: </label>\r\n                    <label >Latitude: </label>\r\n                    <label >Window X: </label>\r\n                    <label >Window Y: </label>\r\n                    <label >Pixel X: </label>\r\n                    <label >Pixel Y: </label>\r\n                </div>\r\n                <div class=\"vertical\">\r\n                    <label >{{mapHoverLatitude}}</label>\r\n                    <label >{{mapHoverLongitude}}</label>\r\n                    <label >{{mapHoverX}}</label>\r\n                    <label >{{mapHoverY}}</label>\r\n                    <label >{{mapHoverPixelX}}</label>\r\n                    <label >{{mapHoverPixelY}}</label>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"overlay-bottom-right\">Imagery Tiles: @ESRI/ArcGIS</div>\r\n\r\n</div>\r\n","isMain":true,"fileExtension":"html","fileHeader":"html"},{"hasRelativeAssetsUrls":false,"path":"src/app/maps/geo-map-navigation/map-navigation.component.scss","content":"/* styles are loaded the Shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/\r\n","isMain":true,"fileExtension":"scss","fileHeader":"scss"},{"hasRelativeAssetsUrls":false,"path":"src/app/utilities/WorldUtility.ts","content":"export class WorldUtility {\r\n\r\n    // calculate geo-paths between two locations using great circle formula\r\n    public static calcPaths(origin: any, dest: any): any[] {\r\n        const interval = 200;\r\n        const paths: any[] = [[]];\r\n        let pathID = 0;\r\n        const distance = this.calcDistance(origin, dest);\r\n        if (distance <= interval) {\r\n            paths[pathID].push({ x: origin.lon, y: origin.lat });\r\n            paths[pathID].push({ x: dest.lon, y: dest.lat });\r\n        } else {\r\n            let current = origin;\r\n            let previous = origin;\r\n\r\n            for (let dist = interval; dist <= distance; dist += interval) {\r\n                previous = current;\r\n                paths[pathID].push({ x: current.lon, y: current.lat });\r\n\r\n                const bearing = this.calcBearing(current, dest);\r\n                current = this.calcDestination(current, bearing, interval);\r\n                // ensure geo-path wrap around the world through the new date-line\r\n                if (previous.lon > 150 && current.lon < -150) {\r\n                    paths[pathID].push({ x: 180, y: current.lat });\r\n                    paths.push([]);\r\n                    pathID++;\r\n                    current = { lon: -180, lat: current.lat };\r\n                } else if (previous.lon < -150 && current.lon > 150) {\r\n                    paths[pathID].push({ x: -180, y: current.lat });\r\n                    paths.push([]);\r\n                    pathID++;\r\n                    current = { lon: 180, lat: current.lat };\r\n                }\r\n            }\r\n            paths[pathID].push({ x: dest.lon, y: dest.lat });\r\n        }\r\n        return paths;\r\n    }\r\n\r\n    // calculate bearing angle between two locations\r\n    public static calcBearing(origin: any, dest: any): number {\r\n        origin = this.toRadianLocation(origin);\r\n        dest = this.toRadianLocation(dest);\r\n        const range = (dest.lon - origin.lon);\r\n        const y = Math.sin(range) * Math.cos(dest.lat);\r\n        const x = Math.cos(origin.lat) * Math.sin(dest.lat) -\r\n                Math.sin(origin.lat) * Math.cos(dest.lat) * Math.cos(range);\r\n        const angle = Math.atan2(y, x);\r\n        return this.toDegreesNormalized(angle);\r\n    }\r\n\r\n    // calculate destination for origin location and travel distance\r\n    public static calcDestination(origin: any, bearing: number, distance: number): any {\r\n        const radius = 6371.0;\r\n        origin = this.toRadianLocation(origin);\r\n        bearing = this.toRadians(bearing);\r\n        distance = distance / radius; // angular distance in radians\r\n\r\n        let lat = Math.asin(Math.sin(origin.lat) * Math.cos(distance) +\r\n                       Math.cos(origin.lat) * Math.sin(distance) * Math.cos(bearing));\r\n        const x = Math.sin(bearing) * Math.sin(distance) * Math.cos(origin.lat);\r\n        const y = Math.cos(distance) - Math.sin(origin.lat) * Math.sin(origin.lat);\r\n        let lon = origin.lon + Math.atan2(x, y);\r\n        // normalize lon to coordinate between -180º and +180º\r\n        lon = (lon + 3 * Math.PI) % (2 * Math.PI) - Math.PI;\r\n\r\n        lon = this.toDegrees(lon);\r\n        lat = this.toDegrees(lat);\r\n\r\n        return { lon, lat };\r\n    }\r\n\r\n    // calculate distance between two locations\r\n    public static calcDistance(origin: any, dest: any): number {\r\n        origin = this.toRadianLocation(origin);\r\n        dest = this.toRadianLocation(dest);\r\n        const sinProd = Math.sin(origin.lat) * Math.sin(dest.lat);\r\n        const cosProd = Math.cos(origin.lat) * Math.cos(dest.lat);\r\n        const lonDelta = (dest.lon - origin.lon);\r\n\r\n        const angle = Math.acos(sinProd + cosProd * Math.cos(lonDelta));\r\n        const distance = angle * 6371.0;\r\n        return distance; // * 6371.0; // in km\r\n    }\r\n\r\n    public static toRadianLocation(geoPoint: any): any {\r\n        const x = this.toRadians(geoPoint.lon);\r\n        const y = this.toRadians(geoPoint.lat);\r\n        return { lon: x, lat: y };\r\n    }\r\n\r\n    public static toRadians(degrees: number): number {\r\n        return degrees * Math.PI / 180;\r\n    }\r\n\r\n    public static toDegrees(radians: number): number {\r\n        return (radians * 180.0 / Math.PI);\r\n    }\r\n\r\n    public static toDegreesNormalized(radians: number): number {\r\n        let degrees = this.toDegrees(radians);\r\n        degrees = (degrees + 360) % 360;\r\n        return degrees;\r\n    }\r\n\r\n    // converts latitude coordinate to a string\r\n    public static toStringLat(latitude: number): string {\r\n        const str = Math.abs(latitude).toFixed(1) + \"°\";\r\n        return latitude > 0 ? str + \"N\" : str + \"S\";\r\n    }\r\n\r\n    // converts longitude coordinate to a string\r\n    public static toStringLon(coordinate: number): string {\r\n        const val = Math.abs(coordinate);\r\n        const str = val < 100 ? val.toFixed(1) : val.toFixed(0);\r\n        return coordinate > 0 ? str + \"°E\" : str + \"°W\";\r\n    }\r\n\r\n    public static toStringAbbr(value: number): string {\r\n        if (value > 1000000000000) {\r\n            return (value / 1000000000000).toFixed(1) + \" T\";\r\n        } else if (value > 1000000000) {\r\n            return (value / 1000000000).toFixed(1) + \" B\";\r\n        } else if (value > 1000000) {\r\n            return (value / 1000000).toFixed(1) + \" M\";\r\n        } else if (value > 1000) {\r\n            return (value / 1000).toFixed(1) + \" K\";\r\n        }\r\n        return value.toFixed(0);\r\n    }\r\n\r\n    public static getLongitude(location: any): number {\r\n        if (location.x) { return location.x; }\r\n        if (location.lon) { return location.lon; }\r\n        if (location.longitude) { return location.longitude; }\r\n        return Number.NaN;\r\n    }\r\n\r\n    public static getLatitude(location: any): number {\r\n        if (location.y) { return location.y; }\r\n        if (location.lat) { return location.lat; }\r\n        if (location.latitude) { return location.latitude; }\r\n        return Number.NaN;\r\n    }\r\n\r\n    public static getBounds(locations: any[]): any {\r\n        let minLat = 90;\r\n        let maxLat = -90;\r\n        let minLon = 180;\r\n        let maxLon = -180;\r\n\r\n        for (const location of locations) {\r\n            const crrLon = this.getLongitude(location);\r\n            if (!Number.isNaN(crrLon)) {\r\n                minLon = Math.min(minLon, crrLon);\r\n                maxLon = Math.max(maxLon, crrLon);\r\n            }\r\n\r\n            const crrLat = this.getLatitude(location);\r\n            if (!Number.isNaN(crrLat)) {\r\n                minLat = Math.min(minLat, crrLat);\r\n                maxLat = Math.max(maxLat, crrLat);\r\n            }\r\n        }\r\n\r\n        const geoBounds = {\r\n            left: minLon,\r\n            top: minLat,\r\n            width: Math.abs(maxLon - minLon),\r\n// tslint:disable-next-line: object-literal-sort-keys\r\n            height: Math.abs(maxLat - minLat)\r\n        };\r\n        return geoBounds;\r\n    }\r\n}\r\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/utilities/MapUtility.ts","content":"import { IgxGeographicMapComponent } from 'igniteui-angular-maps';\r\n\r\nexport enum MapRegion {\r\n    Caribbean = \"Caribbean\",\r\n    UnitedStates = \"United States\",\r\n    UnitedKingdom = \"United Kingdom\",\r\n    European = \"European\",\r\n    SouthAfrica = \"South Africa\",\r\n    Poland = \"Poland\",\r\n    Australia = \"Australia\",\r\n    Japan = \"Japan\",\r\n    Uruguay = \"Uruguay\",\r\n    Egypt = \"Egypt\",\r\n    Hawaii = \"Hawaii\"\r\n}\r\n\r\nexport class MapUtility {\r\n\r\n    public static navigateTo(geoMap: IgxGeographicMapComponent, name: MapRegion) {\r\n\r\n        const geoRect = this.getRegions()[name];\r\n        geoMap.zoomToGeographic(geoRect);\r\n    }\r\n\r\n    public static toPixel(num: number): string {\r\n        const s = Math.abs(num).toFixed(0);\r\n        return s + \" px\";\r\n    }\r\n\r\n    public static toLng(num: number): string {\r\n        num = this.clamp(num, -180, 180);\r\n\r\n        let s = Math.abs(num).toFixed(1);\r\n        if (num < 100) {\r\n            s = \"  \" + s;\r\n        }\r\n\r\n        if (num > 0) {\r\n            return s + \"°E\";\r\n        } else  {\r\n            return s + \"°W\";\r\n        }\r\n    }\r\n\r\n    public static toLat(num: number): string {\r\n        num = this.clamp(num, -90, 90);\r\n\r\n        let s = Math.abs(num).toFixed(1);\r\n        if (num < 100) {\r\n            s = \"  \" + s;\r\n        }\r\n\r\n        if (num > 0) {\r\n            return s + \"°N\";\r\n        } else  {\r\n            return s + \"°S\";\r\n        }\r\n    }\r\n\r\n    public static clamp(num: number, min: number, max: number): number {\r\n        return Math.max(min, Math.min(max, num));\r\n    }\r\n\r\n    public static pad(num: number, places?: number): string {\r\n        places = places || 20;\r\n        let s = num.toFixed(1).toString();\r\n        while (s.length < places) { s = \" \" + s; }\r\n        return s;\r\n    }\r\n\r\n    public static getBingKey(): string {\r\n        return \"Aj2inbXEmvSbAbbVUKH1-DWlUeWIGjFTY3K2K8d1lqE5mEwI3_1oFX2U2tqONiHF\";\r\n    }\r\n\r\n    public static getRegions(): any {\r\n        // create regions only once\r\n        if (this.regions === undefined) {\r\n            this.createRegions();\r\n        }\r\n        return this.regions;\r\n    }\r\n\r\n    private static regions: any;\r\n\r\n    private static addRegion(name: string, geoRect: any) {\r\n        geoRect.name = name;\r\n        geoRect.longitude = geoRect.left + (geoRect.width / 2);\r\n        geoRect.latitude = geoRect.top + (geoRect.height / 2);\r\n\r\n        this.regions[name] = geoRect;\r\n    }\r\n\r\n    private static createRegions() {\r\n        this.regions = {};\r\n        this.addRegion(MapRegion.Australia, { left: 81.5, top: -52.0, width: 98.0, height: 56.0 });\r\n        this.addRegion(MapRegion.Caribbean, { left: -92.9, top: 5.4, width: 35.1, height: 25.8 });\r\n        this.addRegion(MapRegion.Egypt, { left: 19.3, top: 19.9, width: 19.3, height: 13.4 });\r\n        this.addRegion(MapRegion.European, { left: -36.0, top: 31.0, width: 98.0, height: 38.0 });\r\n        this.addRegion(MapRegion.Japan, { left: 122.7, top: 29.4, width: 27.5, height: 17.0 });\r\n        this.addRegion(MapRegion.Hawaii, { left: -161.2, top: 18.5, width: 6.6, height: 4.8 });\r\n        this.addRegion(MapRegion.Poland, { left: 13.0, top: 48.0, width: 11.0, height: 9.0 });\r\n        this.addRegion(MapRegion.SouthAfrica, { left: 9.0, top: -37.1, width: 26.0, height: 17.8 });\r\n        this.addRegion(MapRegion.UnitedStates, { left: -134.5, top: 16.0, width: 70.0, height: 37.0 });\r\n        this.addRegion(MapRegion.UnitedKingdom, { left: -15.0, top: 49.5, width: 22.5, height: 8.0 });\r\n        this.addRegion(MapRegion.Uruguay, { left: -62.1, top: -35.7, width: 10.6, height: 7.0 });\r\n    }\r\n\r\n}\r\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/utilities/EsriUtility.ts","content":"/* tslint:disable:object-literal-sort-keys */\r\n// tslint:disable:object-literal-shorthand\r\n// tslint:disable:max-line-length\r\n// tslint:disable:member-ordering\r\n\r\n/**\r\n * Describes available links to imagery tile sources on public ArcGIS/Esri servers.\r\n * You can find up-to-date list on https://services.arcgisonline.com/arcgis/rest/services\r\n */\r\nexport enum EsriStyle {\r\n\r\n    // these Esri maps show geographic tiles for the whole of world\r\n    WorldStreetMap = \"https://services.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer\",\r\n    WorldTopographicMap = \"https://services.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer\",\r\n    WorldImageryMap = \"https://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer\",\r\n    WorldOceansMap = \"https://services.arcgisonline.com/ArcGIS/rest/services/Ocean_Basemap/MapServer\",\r\n    WorldNationalGeoMap = \"https://services.arcgisonline.com/ArcGIS/rest/services/NatGeo_World_Map/MapServer\",\r\n    WorldTerrainMap = \"https://services.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer\",\r\n    WorldDeLormesMap = \"https://services.arcgisonline.com/ArcGIS/rest/services/Specialty/DeLorme_World_Base_Map/MapServer\",\r\n    WorldLightGrayMap = \"https://services.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer\",\r\n    WorldShadedReliefMap = \"https://services.arcgisonline.com/ArcGIS/rest/services/World_Shaded_Relief/MapServer\",\r\n    WorldPhysicalMap = \"https://services.arcgisonline.com/ArcGIS/rest/services/World_Physical_Map/MapServer\",\r\n\r\n    // these Esri maps show geographic tiles for the whole of world without contours of continents\r\n    // therefore the Map should also load a shapefile of continents when using them\r\n    WorldAdminOverlay = \"https://services.arcgisonline.com/ArcGIS/rest/services/Reference/World_Reference_Overlay/MapServer\",\r\n    WorldTransportationOverlay = \"https://services.arcgisonline.com/ArcGIS/rest/services/Reference/World_Transportation/MapServer\",\r\n    WorldBoundariesDarkOverlay = \"https://services.arcgisonline.com/ArcGIS/rest/services/Reference/World_Boundaries_and_Places/MapServer\",\r\n    WorldBoundariesLightOverlay = \"https://services.arcgisonline.com/ArcGIS/rest/services/Reference/World_Boundaries_and_Places_Alternate/MapServer\",\r\n    WorldLabelsLightGrayOverlay = \"https://services.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Reference/MapServer\",\r\n\r\n    // these Esri maps show only geographic tiles for the USA\r\n    // therefore the Map should be zoomed in to geographic bounds of USA when using them\r\n    UsaOwnerOccupiedHousing = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Owner_Occupied_Housing/MapServer\",\r\n    UsaSoilSurvey = \"https://services.arcgisonline.com/ArcGIS/rest/services/Specialty/Soil_Survey_Map/MapServer\",\r\n    UsaPopulationOlderThanAge64 = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Percent_Over_64/MapServer\",\r\n    UsaPopulationYoungerThan18 = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Percent_Under_18/MapServer\",\r\n    UsaPopulationGrowth2015 = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Projected_Population_Change/MapServer\",\r\n    UsaUnemploymentRate = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Unemployment_Rate/MapServer\",\r\n    UsaSocialVulnerability = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Social_Vulnerability_Index/MapServer\",\r\n    UsaRetailSpendingPotential = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Retail_Spending_Potential/MapServer\",\r\n    UsaPopulationChange2010 = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Recent_Population_Change/MapServer\",\r\n    UsaPopulationChange2000 = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_1990-2000_Population_Change/MapServer\",\r\n    UsaPopulationDensity = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Population_Density/MapServer\",\r\n    UsaPopulationByGender = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Population_by_Sex/MapServer\",\r\n    UsaMedianHouseholdIncome = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Median_Household_Income/MapServer\",\r\n    UsaMedianNetWorth = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Median_Net_Worth/MapServer\",\r\n    UsaMedianHomeValue = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Median_Home_Value/MapServer\",\r\n    UsaMedianAge = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Median_Age/MapServer\",\r\n    UsaLaborForceParticipation = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Labor_Force_Participation_Rate/MapServer\",\r\n    UsaAverageHouseholdSize = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Average_Household_Size/MapServer\",\r\n    UsaDiversityIndex = \"https://services.arcgisonline.com/ArcGIS/rest/services/Demographics/USA_Diversity_Index/MapServer\",\r\n    UsaRailNetwork = \"https://services.arcgisonline.com/ArcGIS/rest/services/Reference/World_Reference_Overlay/MapServer\"\r\n\r\n}\r\n\r\nexport class EsriUtility {\r\n\r\n    public static getUri(style: EsriStyle): string {\r\n\r\n        const isHttpSecured = window.location.toString().startsWith(\"https:\");\r\n\r\n        // resolving Esri Server uri based on hosting website\r\n        let uri: string = style;\r\n        if (!isHttpSecured) {\r\n            uri = uri.replace(\"https:\", \"http:\");\r\n        }\r\n        return uri;\r\n    }\r\n}\r\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.module.ts","content":"import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppComponent } from \"./app.component\";\r\nimport { MapNavigationComponent } from \"./maps/geo-map-navigation/map-navigation.component\";\r\nimport { IgxGeographicMapModule } from \"igniteui-angular-maps\";\n\n\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\r\n\tAppComponent,\r\n\tMapNavigationComponent\r\n],\n  imports: [\r\n\tBrowserModule,\r\n\tBrowserAnimationsModule,\r\n\tFormsModule,\r\n\tIgxGeographicMapModule\r\n],\n  providers: [],\n  entryComponents: [],\n  schemas: []\n})\nexport class AppModule {}\n","isMain":true,"fileExtension":"ts","fileHeader":"modules"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.component.html","content":"<app-map-navigation></app-map-navigation>"}],"sampleDependencies":"{\"@angular/animations\":\"10.0.14\",\"@angular/common\":\"10.0.14\",\"@angular/compiler\":\"10.0.14\",\"@angular/core\":\"^10.0.14\",\"@angular/forms\":\"10.0.14\",\"@angular/platform-browser\":\"10.0.14\",\"@angular/platform-browser-dynamic\":\"10.0.14\",\"@types/hammerjs\":\"^2.0.35\",\"classlist.js\":\"^1.1.20150312\",\"core-js\":\"^2.6.2\",\"hammerjs\":\"^2.0.8\",\"igniteui-angular\":\"11.1.10\",\"igniteui-angular-charts\":\"11.2.0-beta.0\",\"igniteui-angular-core\":\"11.2.0-beta.0\",\"igniteui-angular-maps\":\"11.2.0-beta.0\",\"intl\":\"^1.2.5\",\"jszip\":\"^3.1.5\",\"rxjs\":\"^6.5.4\",\"tslib\":\"1.13.0\",\"web-animations-js\":\"^2.3.2\",\"zone.js\":\"~0.10.2\"}"}