{"sampleFiles":[{"hasRelativeAssetsUrls":false,"path":"src/app/high-volume/category-chart-high-volume.component.ts","content":"import {\r\n    AfterViewInit,\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ElementRef,\r\n    Input,\r\n    NgZone,\r\n    OnDestroy,\r\n    ViewChild\r\n} from \"@angular/core\";\r\n\r\nimport { IgxAssigningCategoryStyleEventArgs } from \"igniteui-angular-charts\";\r\nimport { IgxCategoryChartComponent } from \"igniteui-angular-charts\";\r\nimport { IgxChartSeriesEventArgs } from \"igniteui-angular-charts\";\r\nimport {\r\n    IgxHorizontalAnchoredCategorySeriesComponent\r\n} from \"igniteui-angular-charts\";\r\n\r\n@Component({\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    selector: \"app-category-chart-high-volume\",\r\n    styleUrls: [\"./category-chart-high-volume.component.scss\"],\r\n    templateUrl: \"./category-chart-high-volume.component.html\"\r\n})\r\nexport class CategoryChartHighVolumeComponent implements AfterViewInit, OnDestroy {\r\n    @Input()\r\n    public scalingRatio: number = 1;\r\n\r\n    @ViewChild(\"chart\", { static: true })\r\n    public chart: IgxCategoryChartComponent;\r\n\r\n    private currValue: number = 15;\r\n    private currIndex: number = 0;\r\n\r\n    private _maxPoints: number = 500000;\r\n\r\n    private _refreshMilliseconds: number = 10;\r\n    private _interval: number = -1;\r\n    private _frames: number = 0;\r\n    private _time: Date;\r\n    private _assigningData: boolean = false;\r\n    private _data: any[];\r\n\r\n    constructor(private _zone: NgZone) {\r\n        this._data = this.generateData();\r\n    }\r\n\r\n    public onGenerateDataClicked() {\r\n        this._data = this.generateData();\r\n    }\r\n\r\n    public onAssignDataClicked() {\r\n        this._time = new Date();\r\n        this._assigningData = true;\r\n        this.chart.dataSource = this._data;\r\n    }\r\n\r\n    public onMaxPointsChanged(e: any) {\r\n        let num: number = parseInt(e.target.value, 10);\r\n        if (isNaN(num)) {\r\n            num = 5000;\r\n        }\r\n        if (num < 5000) {\r\n            num = 5000;\r\n        }\r\n        if (num > 2000000) {\r\n            num = 2000000;\r\n        }\r\n        this.maxPoints = num;\r\n    }\r\n\r\n    public get maxPointsText(): string {\r\n        return this.toShortString(this._maxPoints);\r\n    }\r\n\r\n    public get maxPoints(): number {\r\n        return this._maxPoints;\r\n    }\r\n    @Input()\r\n    public set maxPoints(v: number) {\r\n        this._maxPoints = v;\r\n    }\r\n\r\n    public ngOnDestroy(): void {\r\n        if (this._interval >= 0) {\r\n            this._zone.runOutsideAngular(() => {\r\n            window.clearInterval(this._interval);\r\n            });\r\n            this._interval = -1;\r\n        }\r\n    }\r\n\r\n    public ngAfterViewInit(): void {\r\n        this.chart.seriesAdded.subscribe((args: { sender: any, args: IgxChartSeriesEventArgs }) => {\r\n            const cat = args.args.series as IgxHorizontalAnchoredCategorySeriesComponent;\r\n            cat.isCustomCategoryStyleAllowed = true;\r\n            cat.assigningCategoryStyle.subscribe((event: { sender: any, args: IgxAssigningCategoryStyleEventArgs }) => {\r\n                if (this._assigningData) {\r\n                    this._assigningData = false;\r\n\r\n                    this._zone.runOutsideAngular(() => {\r\n                        window.setTimeout(() => {}, 0);\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        this.chart.seriesRemoved.subscribe((event: { sender: any, args: IgxChartSeriesEventArgs }) => {\r\n            const cat = event.args.series as IgxHorizontalAnchoredCategorySeriesComponent;\r\n            cat.isCustomCategoryStyleAllowed = false;\r\n            cat.assigningCategoryStyle.unsubscribe();\r\n        });\r\n\r\n        this.chart.dataSource = this._data;\r\n    }\r\n\r\n    private generateData(): any[] {\r\n        const data: any[] = [];\r\n        for (this.currIndex = 0; this.currIndex <= this.maxPoints; this.currIndex++) {\r\n            this.currValue += Math.random() * 4.0 - 2.0;\r\n            const label = this.toShortString(this.currIndex);\r\n            data.push({ Label: label, Value: this.currValue });\r\n        }\r\n        return data;\r\n    }\r\n\r\n    private toShortString(largeValue: number): string {\r\n        let roundValue: number;\r\n\r\n        if (largeValue >= 1000000) {\r\n            roundValue = Math.round(largeValue / 100000) / 10;\r\n            return roundValue + \"m\";\r\n        }\r\n        if (largeValue >= 1000) {\r\n            roundValue = Math.round(largeValue / 100) / 10;\r\n            return roundValue + \"k\";\r\n        }\r\n\r\n        roundValue = Math.round(largeValue);\r\n        return roundValue + \"\";\r\n    }\r\n}\r\n","isMain":true,"fileExtension":"ts","fileHeader":"ts"},{"hasRelativeAssetsUrls":false,"path":"src/app/high-volume/category-chart-high-volume.component.html","content":"<div class=\"container sample\">\r\n    <div class=\"options horizontal\">\r\n        <button (click)=\"onGenerateDataClicked()\">Generate Data</button>\r\n        <button (click)=\"onAssignDataClicked()\">AssignData</button>\r\n\r\n        <label class=\"options-label\">Data amount: {{ maxPointsText }}</label>\r\n        <input class=\"options-slider\" type=\"range\" id=\"slider\" min=\"5000\" max=\"2000000\" step=\"1000\" [value]=\"maxPoints\"\r\n            (input)=\"onMaxPointsChanged($event)\"/>\r\n    </div>\r\n    <div class=\"container\">\r\n        <igx-category-chart height=\"100%\" yAxisLabelExtent=\"40\" #chart>\r\n        </igx-category-chart>\r\n    </div>\r\n</div>\r\n","isMain":true,"fileExtension":"html","fileHeader":"html"},{"hasRelativeAssetsUrls":false,"path":"src/app/high-volume/category-chart-high-volume.component.scss","content":"/* styles are loaded the Shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/\r\n","isMain":true,"fileExtension":"scss","fileHeader":"scss"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.module.ts","content":"import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppComponent } from \"./app.component\";\r\nimport { CategoryChartHighVolumeComponent } from \"./high-volume/category-chart-high-volume.component\";\r\nimport { \r\n\tIgxCategoryChartModule,\r\n\tIgxLegendModule\r\n } from \"igniteui-angular-charts\";\r\nimport { IgxSliderModule } from \"igniteui-angular\";\n\n\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\r\n\tAppComponent,\r\n\tCategoryChartHighVolumeComponent\r\n],\n  imports: [\r\n\tBrowserModule,\r\n\tBrowserAnimationsModule,\r\n\tFormsModule,\r\n\tIgxCategoryChartModule,\r\n\tIgxLegendModule,\r\n\tIgxSliderModule\r\n],\n  providers: [],\n  entryComponents: [],\n  schemas: []\n})\nexport class AppModule {}\n","isMain":true,"fileExtension":"ts","fileHeader":"modules"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.component.html","content":"<app-category-chart-high-volume></app-category-chart-high-volume>"}],"sampleDependencies":"{\"@angular/animations\":\"10.0.14\",\"@angular/common\":\"10.0.14\",\"@angular/compiler\":\"10.0.14\",\"@angular/core\":\"^10.0.14\",\"@angular/forms\":\"10.0.14\",\"@angular/platform-browser\":\"10.0.14\",\"@angular/platform-browser-dynamic\":\"10.0.14\",\"@types/hammerjs\":\"^2.0.35\",\"classlist.js\":\"^1.1.20150312\",\"core-js\":\"^2.6.2\",\"hammerjs\":\"^2.0.8\",\"igniteui-angular\":\"11.1.10\",\"igniteui-angular-charts\":\"11.2.0-beta.0\",\"igniteui-angular-core\":\"11.2.0-beta.0\",\"intl\":\"^1.2.5\",\"jszip\":\"^3.1.5\",\"rxjs\":\"^6.5.4\",\"tslib\":\"1.13.0\",\"web-animations-js\":\"^2.3.2\",\"zone.js\":\"~0.10.2\"}"}