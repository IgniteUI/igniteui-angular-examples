{"sampleFiles":[{"hasRelativeAssetsUrls":false,"path":"src/app/excel-library/working-with/objects.component.ts","content":"import {\r\n    AfterViewInit, ChangeDetectionStrategy, Component, ViewChild, ViewContainerRef\r\n} from \"@angular/core\";\r\n\r\n// NOTE if needed, import either CategoryChart, DataChart, or Grid component:\r\n// import { IgxGridComponent } from \"igniteui-angular\";\r\nimport { IgxCategoryChartComponent } from \"igniteui-angular-charts\";\r\n// import { IgxDataChartComponent } from \"igniteui-angular-charts\";\r\n\r\n// import Excel components that the sample will be showcasing:\r\nimport { TextFormatMode } from \"igniteui-angular-excel\";\r\nimport { Workbook } from \"igniteui-angular-excel\";\r\nimport { WorkbookFormat } from \"igniteui-angular-excel\";\r\nimport { Worksheet } from \"igniteui-angular-excel\";\r\nimport { WorksheetTable } from \"igniteui-angular-excel\";\r\n\r\n@Component({\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    selector: \"app-objects\",\r\n    styleUrls: [\"./objects.component.scss\"],\r\n    templateUrl: \"./objects.component.html\"\r\n})\r\nexport class ExcelLibraryWorkingWithObjectsComponent implements AfterViewInit {\r\n\r\n    // if needed, uncomment to get access to IG control\r\n    // @ViewChild(\"chart\")\r\n    // public chart: IgxCategoryChartComponent;\r\n    // @ViewChild(\"chart\")\r\n    // public chart: IgxDataChartComponent;\r\n    // @ViewChild(\"grid\")\r\n    // public chart: IgxGridComponent;\r\n\r\n    public data: any;\r\n\r\n    constructor() {\r\n\r\n        // generate excel data or load data from .xls file\r\n        const usaMedals: any = [\r\n            { Year: \"1996\", UnitedStates: 148 },\r\n            { Year: \"2000\", UnitedStates: 142 },\r\n            { Year: \"2004\", UnitedStates: 134 },\r\n            { Year: \"2008\", UnitedStates: 131 },\r\n            { Year: \"2012\", UnitedStates: 135 },\r\n            { Year: \"2016\", UnitedStates: 146 }\r\n        ];\r\n        const chinaMedals: any = [\r\n            { Year: \"1996\", China: 110 },\r\n            { Year: \"2000\", China: 115 },\r\n            { Year: \"2004\", China: 121 },\r\n            { Year: \"2008\", China: 129 },\r\n            { Year: \"2012\", China: 115 },\r\n            { Year: \"2016\", China: 112 }\r\n        ];\r\n        const russiaMedals: any = [\r\n            { Year: \"1996\", Russia: 95 },\r\n            { Year: \"2000\", Russia: 91 },\r\n            { Year: \"2004\", Russia: 86 },\r\n            { Year: \"2008\", Russia: 65 },\r\n            { Year: \"2012\", Russia: 77 },\r\n            { Year: \"2016\", Russia: 88 }\r\n        ];\r\n        this.data = [ usaMedals, chinaMedals, russiaMedals ];\r\n    }\r\n\r\n    public ngOnInit() {\r\n    }\r\n\r\n    public ngAfterViewInit(): void {\r\n        // bind excel data to the chart\r\n        // this.chart.dataSource = this.data;\r\n    }\r\n\r\n}\r\n","isMain":true,"fileExtension":"ts","fileHeader":"ts"},{"hasRelativeAssetsUrls":false,"path":"src/app/excel-library/working-with/objects.component.html","content":"<div class=\"sample-wrapper container\">\r\n    <div class=\"options\">\r\n        <span> show usage of Objects and visualize it if needed </span>\r\n        <igx-category-chart\r\n            height=\"300px\" width=\"400px\"\r\n            #chart\r\n            [dataSource]=\"data\">\r\n        </igx-category-chart>\r\n\r\n\r\n    </div>\r\n\r\n</div>\r\n","isMain":true,"fileExtension":"html","fileHeader":"html"},{"hasRelativeAssetsUrls":false,"path":"src/app/excel-library/working-with/objects.component.scss","content":".container {\r\n    display: flex;\r\n    flex-flow: column;\r\n    height: 100%;\r\n    min-width: 300px;\r\n}\r\n\r\n.options {\r\n    margin-top: 5px;\r\n    margin-bottom: 5px;\r\n    margin-right: 10px;\r\n    margin-left: 10px;\r\n}","isMain":true,"fileExtension":"scss","fileHeader":"scss"},{"hasRelativeAssetsUrls":false,"path":"src/app/utilities/excel-utility.ts","content":"import { saveAs } from \"file-saver\";\r\nimport { Workbook } from \"igniteui-angular-excel\";\r\nimport { WorkbookFormat } from \"igniteui-angular-excel\";\r\nimport { WorkbookSaveOptions } from \"igniteui-angular-excel\";\r\n\r\nexport class ExcelUtility {\r\n    public static getExtension(format: WorkbookFormat) {\r\n        switch (format) {\r\n            case WorkbookFormat.StrictOpenXml:\r\n            case WorkbookFormat.Excel2007:\r\n                return \".xlsx\";\r\n            case WorkbookFormat.Excel2007MacroEnabled:\r\n                return \".xlsm\";\r\n            case WorkbookFormat.Excel2007MacroEnabledTemplate:\r\n                return \".xltm\";\r\n            case WorkbookFormat.Excel2007Template:\r\n                return \".xltx\";\r\n            case WorkbookFormat.Excel97To2003:\r\n                return \".xls\";\r\n            case WorkbookFormat.Excel97To2003Template:\r\n                return \".xlt\";\r\n        }\r\n    }\r\n\r\n    public static load(file: File): Promise<Workbook> {\r\n        return new Promise<Workbook>((resolve, reject) => {\r\n            ExcelUtility.readFileAsUint8Array(file).then((a) => {\r\n                Workbook.load(a, null, (w) => {\r\n                    resolve(w);\r\n                }, (e) => {\r\n                    reject(e);\r\n                });\r\n            }, (e) => {\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    public static loadFromUrl(url: string): Promise<Workbook> {\r\n        return new Promise<Workbook>((resolve, reject) => {\r\n            const req = new XMLHttpRequest();\r\n            req.open(\"GET\", url, true);\r\n            req.responseType = \"arraybuffer\";\r\n            req.onload = (d) => {\r\n                const data = new Uint8Array(req.response);\r\n                Workbook.load(data, null, (w) => {\r\n                    resolve(w);\r\n                }, (e) => {\r\n                    reject(e);\r\n                });\r\n            };\r\n            req.send();\r\n        });\r\n    }\r\n\r\n    public static save(workbook: Workbook, fileNameWithoutExtension: string): Promise<string> {\r\n        return new Promise<string>((resolve, reject) => {\r\n            const opt = new WorkbookSaveOptions();\r\n            opt.type = \"blob\";\r\n\r\n            workbook.save(opt, (d) => {\r\n                const fileExt = ExcelUtility.getExtension(workbook.currentFormat);\r\n                const fileName = fileNameWithoutExtension + fileExt;\r\n                saveAs(d as Blob, fileName);\r\n                resolve(fileName);\r\n            }, (e) => {\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    private static readFileAsUint8Array(file: File): Promise<Uint8Array> {\r\n        return new Promise<Uint8Array>((resolve, reject) => {\r\n            const fr = new FileReader();\r\n            fr.onerror = (e) => {\r\n                reject(fr.error);\r\n            };\r\n\r\n            if (fr.readAsBinaryString) {\r\n                fr.onload = (e) => {\r\n                    const rs = (fr as any).resultString;\r\n                    const str: string = rs != null ? rs : fr.result;\r\n                    const result = new Uint8Array(str.length);\r\n                    for (let i = 0; i < str.length; i++) {\r\n                        result[i] = str.charCodeAt(i);\r\n                    }\r\n                    resolve(result);\r\n                };\r\n                fr.readAsBinaryString(file);\r\n            } else {\r\n                fr.onload = (e) => {\r\n                    resolve(new Uint8Array(fr.result as ArrayBuffer));\r\n                };\r\n                fr.readAsArrayBuffer(file);\r\n            }\r\n        });\r\n    }\r\n}\r\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.module.ts","content":"import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppComponent } from \"./app.component\";\r\nimport { \r\n\tIgxButtonModule,\r\n\tIgxGridModule\r\n } from \"igniteui-angular\";\r\nimport { IgxCategoryChartModule } from \"igniteui-angular-charts\";\r\nimport { IgxExcelModule } from \"igniteui-angular-excel\";\r\nimport { ExcelUtility } from \"./utilities/excel-utility\";\r\nimport { ExcelLibraryWorkingWithObjectsComponent } from \"./excel-library/working-with/objects.component\";\n\n\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\r\n\tAppComponent,\r\n\tExcelLibraryWorkingWithObjectsComponent\r\n],\n  imports: [\r\n\tBrowserModule,\r\n\tBrowserAnimationsModule,\r\n\tFormsModule,\r\n\tIgxButtonModule,\r\n\tIgxCategoryChartModule,\r\n\tIgxGridModule,\r\n\tIgxExcelModule\r\n],\n  providers: [],\n  entryComponents: [],\n  schemas: []\n})\nexport class AppModule {}\n","isMain":true,"fileExtension":"ts","fileHeader":"modules"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.component.html","content":"<app-objects></app-objects>"}],"sampleDependencies":"{\"@angular/animations\":\"10.0.14\",\"@angular/common\":\"10.0.14\",\"@angular/compiler\":\"10.0.14\",\"@angular/core\":\"^10.0.14\",\"@angular/forms\":\"10.0.14\",\"@angular/platform-browser\":\"10.0.14\",\"@angular/platform-browser-dynamic\":\"10.0.14\",\"@types/hammerjs\":\"^2.0.35\",\"classlist.js\":\"^1.1.20150312\",\"core-js\":\"^2.6.2\",\"hammerjs\":\"^2.0.8\",\"igniteui-angular\":\"11.1.10\",\"igniteui-angular-core\":\"11.2.0-beta.0\",\"igniteui-angular-excel\":\"11.2.0-beta.0\",\"intl\":\"^1.2.5\",\"jszip\":\"^3.1.5\",\"rxjs\":\"^6.5.4\",\"tslib\":\"1.13.0\",\"web-animations-js\":\"^2.3.2\",\"zone.js\":\"~0.10.2\"}"}
