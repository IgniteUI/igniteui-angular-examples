{"sampleFiles":[{"hasRelativeAssetsUrls":false,"path":"src/app/high-frequency/financial-chart-high-frequency.component.ts","content":"import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    Input,\n    NgZone,\n    OnDestroy,\n    ViewChild\n} from \"@angular/core\";\nimport { IgxFinancialChartComponent } from \"igniteui-angular-charts\";\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: \"app-financial-chart-high-frequency\",\n    styleUrls: [\"./financial-chart-high-frequency.component.scss\"],\n    templateUrl: \"./financial-chart-high-frequency.component.html\"\n})\nexport class FinancialChartHighFrequencyComponent implements AfterViewInit, OnDestroy {\n\n    @Input()\n    public scalingRatio: number = 1;\n\n    public data: any[];\n\n    @ViewChild(\"chart\", { static: true })\n    public chart: IgxFinancialChartComponent;\n\n    @ViewChild(\"fpsSpan\", { static: true })\n    public fpsSpan: ElementRef;\n\n    private currValue: number = 150;\n    private currIndex: number = 0;\n    private currDate: Date = new Date(2018, 3, 1);\n\n    private _maxPoints: number = 250;\n\n    private _refreshInterval: number = 10;\n    private _interval: number = -1;\n    private _frames: number = 0;\n    private _time: Date;\n    private _shouldTick = true;\n    private _timerButtonText = \"Stop Data\";\n\n    constructor(private _zone: NgZone) {\n        this.data = this.generateData();\n    }\n\n    public onOptimizeScalingChanged(checked: boolean) {\n        if (checked) {\n            this.scalingRatio = 1.0;\n        } else {\n            this.scalingRatio = NaN;\n        }\n    }\n\n    public onChangeAmountClicked() {\n        this.data = this.generateData();\n    }\n\n    public onTimerButtonClicked() {\n        this._shouldTick = !this._shouldTick;\n\n        if (this._shouldTick) {\n            this.timerButtonText = \"Stop Data\";\n        }\n        else {\n            this.timerButtonText = \"Live Data\";\n        }\n    }\n\n    public onRefreshFrequencyChanged(e: any) {\n        let num: number = parseInt(e.target.value, 10);\n        if (isNaN(num)) {\n            num = 10;\n        }\n        if (num < 10) {\n            num = 10;\n        }\n        if (num > 1000) {\n            num = 1000;\n        }\n        this._refreshInterval = num;\n        this.setupInterval();\n    }\n\n    public onMaxPointsChanged(e: any) {\n        let num: number = parseInt(e.target.value, 10);\n\n        if (isNaN(num)) {\n            num = 250;\n        }\n        if (num < 250) {\n            num = 250;\n        }\n        if (num > 100000) {\n            num = 100000;\n        }\n        this._maxPoints = num;\n    }\n\n    public get maxPointsText(): string {\n        return this.toShortString(this._maxPoints);\n    }\n\n    public get maxPoints(): number {\n        return this._maxPoints;\n    }\n    @Input()\n    public set maxPoints(v: number) {\n        this._maxPoints = v;\n    }\n\n    public get refreshInterval(): number {\n        return this._refreshInterval;\n    }\n    @Input()\n    public set refreshInterval(v: number) {\n        this._refreshInterval = v;\n        this.setupInterval();\n    }\n    public get refreshIntervalText(): string {\n        return (this._refreshInterval / 1000).toFixed(3) + \"s\";\n    }\n\n    @Input()\n    public set timerButtonText(v: string){\n        this._timerButtonText = v;\n    }\n\n    public get timerButtonText(): string{\n        return this._timerButtonText;\n    }\n\n    public ngOnDestroy(): void {\n        if (this._interval >= 0) {\n            this._zone.runOutsideAngular(() => {\n                window.clearInterval(this._interval);\n            });\n            this._interval = -1;\n        }\n    }\n\n    public ngAfterViewInit(): void {\n        this._time = new Date();\n        this.setupInterval();\n    }\n\n    private setupInterval(): void {\n        if (this._interval >= 0) {\n            this._zone.runOutsideAngular(() => {\n                window.clearInterval(this._interval);\n            });\n            this._interval = -1;\n        }\n\n        this._zone.runOutsideAngular(() => {\n            this._interval = window.setInterval(() => this.tick(),\n            this.refreshInterval);\n        });\n    }\n\n    private generateData(): any[] {\n        const data: any[] = [];\n        for (this.currIndex = 0; this.currIndex < this.maxPoints; this.currIndex++) {\n            this.currValue += Math.random() * 4.0 - 2.0;\n            data.push(this.getValue());\n        }\n        return data;\n    }\n\n    private addHours(date: Date, hours: number): Date {\n        return new Date(date.getTime() + hours * 60 * 60 * 1000);\n    }\n\n    private getValue(): any {\n        this.currValue = Math.abs(this.currValue);\n        this.currDate = this.addHours(this.currDate, 1);\n        const o = this.currValue + ((Math.random() - 0.5) * 1);\n        const h = this.currValue + (Math.random() * 2);\n        const l = this.currValue - (Math.random() * 2);\n        const c = this.currValue + ((Math.random() - 0.5) * 2);\n        const newVal = { Date: this.currDate, Open: o, High: h, Low: l, Close: c};\n        return newVal;\n    }\n\n    private tick(): void {\n        if (this._shouldTick) {\n            this.currValue += Math.random() * 4.0 - 2.0;\n            this.currIndex++;\n            const newVal = this.getValue();\n            const oldVal = this.data[0];\n\n            this.data.push(newVal);\n            this.chart.notifyInsertItem(this.data, this.data.length - 1, newVal);\n            this.data.shift();\n            this.chart.notifyRemoveItem(this.data, 0, oldVal);\n\n            this._frames++;\n            const currTime = new Date();\n            const elapsed = (currTime.getTime() - this._time.getTime());\n            if (elapsed > 5000) {\n                const fps = this._frames / (elapsed / 1000.0);\n                this._time = currTime;\n                this._frames = 0;\n                this.fpsSpan.nativeElement.textContent = Math.round(fps).toString();\n            }\n        }\n    }\n\n    private toShortString(largeValue: number): string {\n        let roundValue: string;\n\n        if (largeValue >= 1000000) {\n            roundValue = (largeValue / 1000000).toFixed(1);\n            return roundValue + \"m\";\n        }\n        if (largeValue >= 1000) {\n            roundValue = (largeValue / 1000).toFixed(0);\n            return roundValue + \"k\";\n        }\n\n        roundValue = largeValue.toFixed(0);\n        return roundValue + \"\";\n    }\n}\n","isMain":true,"fileExtension":"ts","fileHeader":"ts"},{"hasRelativeAssetsUrls":false,"path":"src/app/high-frequency/financial-chart-high-frequency.component.html","content":"<div class=\"container sample\">\n    <div class=\"options horizontal\">\n        <label class=\"options-label\" style=\"width: 5rem;\">Data Update:</label>\n        <label class=\"options-value\">{{refreshIntervalText}}</label>\n        <input class=\"options-slider\" type=\"range\" step=\"5\"\n        [min]=\"5\"\n        [max]=\"1000\"\n        [value]=\"refreshInterval\"\n        (input)=\"onRefreshFrequencyChanged($event)\"/>\n        <button #timerButton (click)=\"onTimerButtonClicked()\">{{timerButtonText}}</button>\n        <label class=\"options-label\">FPS: </label>\n        <span #fpsSpan class=\"options-label\"> 60</span>\n    </div>\n    <div class=\"options horizontal\">\n        <label class=\"options-label\" style=\"width: 5rem;\">Data Points:</label>\n        <label class=\"options-value\">{{maxPointsText}}</label>\n        <input class=\"options-slider\" type=\"range\" step=\"1000\"\n        [min]=\"250\"\n        [max]=\"100000\"\n        [value]=\"maxPoints\"\n        (input)=\"onMaxPointsChanged($event)\"/>\n        <button (click)=\"onChangeAmountClicked()\">Generate</button>\n        <label class=\"options-label\">Optimize Scaling: </label>\n        <input class=\"options-checkbox\" type=\"checkbox\" (change)=\"onOptimizeScalingChanged($event.target.checked)\"/>\n    </div>\n\n    <igx-financial-chart height=\"100%\" width=\"100%\"\n        [dataSource]=\"data\"\n        [pixelScalingRatio]=\"scalingRatio\"\n        chartType=\"line\"\n        zoomSliderType=\"none\"\n        thickness=\"2\"\n        #chart>\n    </igx-financial-chart>\n</div>\n","isMain":true,"fileExtension":"html","fileHeader":"html"},{"hasRelativeAssetsUrls":false,"path":"src/app/high-frequency/financial-chart-high-frequency.component.scss","content":"/* styles are loaded the Shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/\r\n","isMain":true,"fileExtension":"scss","fileHeader":"scss"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.module.ts","content":"import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppComponent } from \"./app.component\";\r\nimport { FinancialChartHighFrequencyComponent } from \"./high-frequency/financial-chart-high-frequency.component\";\r\nimport { IgxFinancialChartModule } from \"igniteui-angular-charts\";\r\nimport { IgxSliderModule } from \"igniteui-angular\";\n\n\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\r\n\tAppComponent,\r\n\tFinancialChartHighFrequencyComponent\r\n],\n  imports: [\r\n\tBrowserModule,\r\n\tBrowserAnimationsModule,\r\n\tFormsModule,\r\n\tIgxFinancialChartModule,\r\n\tIgxSliderModule\r\n],\n  providers: [],\n  entryComponents: [],\n  schemas: []\n})\nexport class AppModule {}\n","isMain":true,"fileExtension":"ts","fileHeader":"modules"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.component.html","content":"<app-financial-chart-high-frequency></app-financial-chart-high-frequency>"}],"sampleDependencies":"{\"@angular/animations\":\"10.0.14\",\"@angular/common\":\"10.0.14\",\"@angular/compiler\":\"10.0.14\",\"@angular/core\":\"^10.0.14\",\"@angular/forms\":\"10.0.14\",\"@angular/platform-browser\":\"10.0.14\",\"@angular/platform-browser-dynamic\":\"10.0.14\",\"@types/hammerjs\":\"^2.0.35\",\"classlist.js\":\"^1.1.20150312\",\"core-js\":\"^2.6.2\",\"hammerjs\":\"^2.0.8\",\"igniteui-angular\":\"11.1.10\",\"igniteui-angular-charts\":\"11.2.0-beta.0\",\"igniteui-angular-core\":\"11.2.0-beta.0\",\"intl\":\"^1.2.5\",\"jszip\":\"^3.1.5\",\"rxjs\":\"^6.5.4\",\"tslib\":\"1.13.0\",\"web-animations-js\":\"^2.3.2\",\"zone.js\":\"~0.10.2\"}"}