{"sampleFiles":[{"hasRelativeAssetsUrls":false,"path":"src/app/excel-library/working-with/charts.component.ts","content":"import { AfterViewInit, ChangeDetectionStrategy, Component} from \"@angular/core\";\r\nimport { AxisType } from \"igniteui-angular-excel\";\r\nimport { ChartType } from \"igniteui-angular-excel\";\r\nimport { Workbook } from \"igniteui-angular-excel\";\r\nimport { WorkbookFormat } from \"igniteui-angular-excel\";\r\nimport { WorksheetRegion } from \"igniteui-angular-excel\";\r\nimport { ExcelUtility } from \"../../utilities/excel-utility\";\r\n\r\n@Component({\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    selector: \"app-charts\",\r\n    styleUrls: [\"./charts.component.scss\"],\r\n    templateUrl: \"./charts.component.html\"\r\n})\r\nexport class ExcelLibraryWorkingWithChartsComponent implements AfterViewInit {\r\n\r\n    public excelData: any[];\r\n    public chartData: any[];\r\n\r\n    constructor() {\r\n        this.initializeData();\r\n    }\r\n\r\n    public initializeData() {\r\n        const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\" ];\r\n        const groups = [\"Heating\", \"Electricity\", \"Water\", \"Taxes\"];\r\n\r\n        const expanseKey = \"Expense\";\r\n        const monthKey = \"Month\";\r\n        const data = new Array<any>();\r\n        // generating excel data source\r\n        for (const group of groups) {\r\n            const r = {};\r\n            r[expanseKey] = group;\r\n            let index = 0;\r\n            for (const month of months) {\r\n                const x = index * 15 * Math.PI / 180;\r\n                const rand = this.getRandom(50, 100);\r\n                const heat = Math.abs(Math.cos(x)) * 300 + rand;\r\n                const ac = Math.abs(Math.sin(x)) * 500 + rand;\r\n                if (group === \"Heating\") {\r\n                    r[month] = Math.round(heat);\r\n                } else if (group === \"Electricity\") {\r\n                    r[month] = Math.round(ac);\r\n                } else if (group === \"Water\") {\r\n                    r[month] = this.getRandom(100, 150);\r\n                } else if (group === \"Taxes\") {\r\n                    r[month] = this.getRandom(700, 800);\r\n                }\r\n                index = index + 1;\r\n            }\r\n            data.push(r);\r\n        }\r\n        this.excelData = data;\r\n        // since we will export the data transposed (plotByRows will be true)\r\n        // if we want to show the data that way in the ui then we need a transposed\r\n        // version of the data for the category chart to bind to\r\n        const chartData = new Array<any>();\r\n        for (const month of months) {\r\n            const r = {};\r\n            r[monthKey] = month;\r\n            for (const item of data) {\r\n                r[item[expanseKey]] = item[month];\r\n            }\r\n            chartData.push(r);\r\n        }\r\n        this.chartData = chartData;\r\n    }\r\n\r\n    public getRandom(min: number, max: number): number {\r\n        return Math.floor(Math.random() * (max - min + 1) + min);\r\n    }\r\n\r\n    public exportData() {\r\n        const headers = Object.keys(this.excelData[0]);\r\n        const wb = new Workbook(WorkbookFormat.Excel2007);\r\n        const ws = wb.worksheets().add(\"Sheet1\");\r\n        ws.defaultColumnWidth = 200 * 20;\r\n\r\n        // reserving the [0] row where we will place the chart shape\r\n        // the [1] will be the headers. so data will start on [2]\r\n        const firstDataRow = 2;\r\n        const headerRow = ws.rows(firstDataRow - 1);\r\n        for (let c = 0; c < headers.length; c++) {\r\n            headerRow.setCellValue(c, headers[c]);\r\n        }\r\n\r\n        for (let r = 0; r < this.excelData.length; r++) {\r\n            const xlRow = ws.rows(r + firstDataRow);\r\n            const dataRow = this.excelData[r];\r\n            for (let c = 0; c < headers.length; c++) {\r\n                xlRow.setCellValue(c, dataRow[headers[c]]);\r\n            }\r\n        }\r\n        const indexRow = firstDataRow - 1;\r\n        const indexData = firstDataRow + this.excelData.length - 1;\r\n        const indexHeader = headers.length - 1;\r\n\r\n        const tableRegion = new WorksheetRegion(ws, indexRow, 0, indexData, indexHeader);\r\n        const table = ws.tables().add(tableRegion.toString(), true);\r\n\r\n        // set some extra height for the row where the chart will be\r\n        ws.rows(0).height = 5000;\r\n        const chart = ws.shapes().addChart(ChartType.ColumnClustered,\r\n          ws.rows(0).cells(0), { x: 0, y: 0 },\r\n          ws.rows(0).cells(headers.length - 1), { x: 100, y: 100 });\r\n        chart.setSourceData(table.wholeTableRegion.toString(), true);\r\n\r\n        chart.axisCollection(AxisType.Category).axisBetweenCategories = true;\r\n\r\n        ExcelUtility.save(wb, \"chartSample\");\r\n    }\r\n\r\n    public ngOnInit() {\r\n    }\r\n\r\n    public ngAfterViewInit(): void {\r\n    }\r\n\r\n}\r\n","isMain":true,"fileExtension":"ts","fileHeader":"ts"},{"hasRelativeAssetsUrls":false,"path":"src/app/excel-library/working-with/charts.component.html","content":"<div class=\"container\">\r\n    <div class=\"options\">\r\n        <button (click)=\"exportData()\">Export To Excel File</button>\r\n    </div>\r\n    <div class=\"chart\">\r\n        <igx-category-chart #chart\r\n            height=\"60%\" width=\"100%\"\r\n            yAxisMinimumValue=0\r\n            xAxisInterval=1\r\n            chartType=\"column\"\r\n            brushes=\"#4f81bd, #c0504d, #9bbb59, #8064a2\"\r\n            outlines=\"#4f81bd, #c0504d, #9bbb59, #8064a2\"\r\n            thickness=0\r\n            [dataSource]=\"chartData\">\r\n        </igx-category-chart>\r\n\r\n        <igx-grid [data]=\"excelData\" height=\"40%\" width=\"100%\" [autoGenerate]=\"false\">\r\n            <igx-column [field]=\"'Expense'\" [resizable]=\"true\" width=\"10%\"></igx-column>\r\n            <igx-column [field]=\"'Jan'\" [resizable]=\"true\" width=\"7.5%\"></igx-column>\r\n            <igx-column [field]=\"'Feb'\" [resizable]=\"true\" width=\"7.5%\"></igx-column>\r\n            <igx-column [field]=\"'Mar'\" [resizable]=\"true\" width=\"7.5%\"></igx-column>\r\n            <igx-column [field]=\"'Apr'\" [resizable]=\"true\" width=\"7.5%\"></igx-column>\r\n            <igx-column [field]=\"'May'\" [resizable]=\"true\" width=\"7.5%\"></igx-column>\r\n            <igx-column [field]=\"'Jun'\" [resizable]=\"true\" width=\"7.5%\"></igx-column>\r\n            <igx-column [field]=\"'Jul'\" [resizable]=\"true\" width=\"7.5%\"></igx-column>\r\n            <igx-column [field]=\"'Aug'\" [resizable]=\"true\" width=\"7.5%\"></igx-column>\r\n            <igx-column [field]=\"'Sep'\" [resizable]=\"true\" width=\"7.5%\"></igx-column>\r\n            <igx-column [field]=\"'Oct'\" [resizable]=\"true\" width=\"7.5%\"></igx-column>\r\n            <igx-column [field]=\"'Nov'\" [resizable]=\"true\" width=\"7.5%\"></igx-column>\r\n            <igx-column [field]=\"'Dec'\" [resizable]=\"true\" width=\"7.5%\"></igx-column>\r\n        </igx-grid>\r\n    </div>\r\n</div>\r\n","isMain":true,"fileExtension":"html","fileHeader":"html"},{"hasRelativeAssetsUrls":false,"path":"src/app/excel-library/working-with/charts.component.scss","content":".container {\r\n    display: flex;\r\n    flex-flow: column;\r\n    height: 100%;\r\n    min-width: 300px;\r\n}\r\n\r\n.chart {\r\n    flex: 1;\r\n    overflow: hidden;\r\n}","isMain":true,"fileExtension":"scss","fileHeader":"scss"},{"hasRelativeAssetsUrls":false,"path":"src/app/utilities/excel-utility.ts","content":"import { saveAs } from \"file-saver\";\r\nimport { Workbook } from \"igniteui-angular-excel\";\r\nimport { WorkbookFormat } from \"igniteui-angular-excel\";\r\nimport { WorkbookSaveOptions } from \"igniteui-angular-excel\";\r\n\r\nexport class ExcelUtility {\r\n    public static getExtension(format: WorkbookFormat) {\r\n        switch (format) {\r\n            case WorkbookFormat.StrictOpenXml:\r\n            case WorkbookFormat.Excel2007:\r\n                return \".xlsx\";\r\n            case WorkbookFormat.Excel2007MacroEnabled:\r\n                return \".xlsm\";\r\n            case WorkbookFormat.Excel2007MacroEnabledTemplate:\r\n                return \".xltm\";\r\n            case WorkbookFormat.Excel2007Template:\r\n                return \".xltx\";\r\n            case WorkbookFormat.Excel97To2003:\r\n                return \".xls\";\r\n            case WorkbookFormat.Excel97To2003Template:\r\n                return \".xlt\";\r\n        }\r\n    }\r\n\r\n    public static load(file: File): Promise<Workbook> {\r\n        return new Promise<Workbook>((resolve, reject) => {\r\n            ExcelUtility.readFileAsUint8Array(file).then((a) => {\r\n                Workbook.load(a, null, (w) => {\r\n                    resolve(w);\r\n                }, (e) => {\r\n                    reject(e);\r\n                });\r\n            }, (e) => {\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    public static loadFromUrl(url: string): Promise<Workbook> {\r\n        return new Promise<Workbook>((resolve, reject) => {\r\n            const req = new XMLHttpRequest();\r\n            req.open(\"GET\", url, true);\r\n            req.responseType = \"arraybuffer\";\r\n            req.onload = (d) => {\r\n                const data = new Uint8Array(req.response);\r\n                Workbook.load(data, null, (w) => {\r\n                    resolve(w);\r\n                }, (e) => {\r\n                    reject(e);\r\n                });\r\n            };\r\n            req.send();\r\n        });\r\n    }\r\n\r\n    public static save(workbook: Workbook, fileNameWithoutExtension: string): Promise<string> {\r\n        return new Promise<string>((resolve, reject) => {\r\n            const opt = new WorkbookSaveOptions();\r\n            opt.type = \"blob\";\r\n\r\n            workbook.save(opt, (d) => {\r\n                const fileExt = ExcelUtility.getExtension(workbook.currentFormat);\r\n                const fileName = fileNameWithoutExtension + fileExt;\r\n                saveAs(d as Blob, fileName);\r\n                resolve(fileName);\r\n            }, (e) => {\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    private static readFileAsUint8Array(file: File): Promise<Uint8Array> {\r\n        return new Promise<Uint8Array>((resolve, reject) => {\r\n            const fr = new FileReader();\r\n            fr.onerror = (e) => {\r\n                reject(fr.error);\r\n            };\r\n\r\n            if (fr.readAsBinaryString) {\r\n                fr.onload = (e) => {\r\n                    const rs = (fr as any).resultString;\r\n                    const str: string = rs != null ? rs : fr.result;\r\n                    const result = new Uint8Array(str.length);\r\n                    for (let i = 0; i < str.length; i++) {\r\n                        result[i] = str.charCodeAt(i);\r\n                    }\r\n                    resolve(result);\r\n                };\r\n                fr.readAsBinaryString(file);\r\n            } else {\r\n                fr.onload = (e) => {\r\n                    resolve(new Uint8Array(fr.result as ArrayBuffer));\r\n                };\r\n                fr.readAsArrayBuffer(file);\r\n            }\r\n        });\r\n    }\r\n}\r\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.module.ts","content":"import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppComponent } from \"./app.component\";\r\nimport { IgxButtonModule } from \"igniteui-angular\";\r\nimport { IgxCategoryChartModule } from \"igniteui-angular-charts\";\r\nimport { ExcelUtility } from \"./utilities/excel-utility\";\r\nimport { ExcelLibraryWorkingWithChartsComponent } from \"./excel-library/working-with/charts.component\";\n\n\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\r\n\tAppComponent,\r\n\tExcelLibraryWorkingWithChartsComponent\r\n],\n  imports: [\r\n\tBrowserModule,\r\n\tBrowserAnimationsModule,\r\n\tFormsModule,\r\n\tIgxButtonModule,\r\n\tIgxCategoryChartModule\r\n],\n  providers: [],\n  entryComponents: [],\n  schemas: []\n})\nexport class AppModule {}\n","isMain":true,"fileExtension":"ts","fileHeader":"modules"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.component.html","content":"<app-charts></app-charts>"}],"sampleDependencies":"{\"@angular/animations\":\"10.0.14\",\"@angular/common\":\"10.0.14\",\"@angular/compiler\":\"10.0.14\",\"@angular/core\":\"^10.0.14\",\"@angular/forms\":\"10.0.14\",\"@angular/platform-browser\":\"10.0.14\",\"@angular/platform-browser-dynamic\":\"10.0.14\",\"@types/hammerjs\":\"^2.0.35\",\"classlist.js\":\"^1.1.20150312\",\"core-js\":\"^2.6.2\",\"hammerjs\":\"^2.0.8\",\"igniteui-angular\":\"11.1.10\",\"igniteui-angular-core\":\"11.2.0-beta.0\",\"igniteui-angular-excel\":\"11.2.0-beta.0\",\"intl\":\"^1.2.5\",\"jszip\":\"^3.1.5\",\"rxjs\":\"^6.5.4\",\"tslib\":\"1.13.0\",\"web-animations-js\":\"^2.3.2\",\"zone.js\":\"~0.10.2\"}"}