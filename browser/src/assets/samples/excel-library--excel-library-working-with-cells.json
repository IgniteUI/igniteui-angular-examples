{"sampleFiles":[{"hasRelativeAssetsUrls":false,"path":"src/app/excel-library/working-with/cells.component.ts","content":"import {\r\n    Component, ComponentFactoryResolver,\r\n    Injector, OnInit, ViewChild, ViewContainerRef } from \"@angular/core\";\r\n// importing IG components:\r\nimport { CellReferenceMode } from \"igniteui-angular-excel\";\r\nimport { WorksheetMergedCellsRegion} from \"igniteui-angular-excel\";\r\nimport { FormattedString } from \"igniteui-angular-excel\";\r\nimport { Formula } from \"igniteui-angular-excel\";\r\nimport { Workbook } from \"igniteui-angular-excel\";\r\nimport { WorkbookFormat } from \"igniteui-angular-excel\";\r\nimport { Worksheet } from \"igniteui-angular-excel\";\r\nimport { WorksheetCellComment } from \"igniteui-angular-excel\";\r\nimport {\r\n    WorkbookExportService\r\n} from \"../../utilities/excel-exporter\";\r\nimport { ExcelUtility } from \"../../utilities/excel-utility\";\r\n\r\n@Component({\r\n    providers: [ WorkbookExportService ],\r\n    selector: \"app-cells\",\r\n    styleUrls: [\"./cells.component.scss\"],\r\n    templateUrl: \"./cells.component.html\"\r\n})\r\nexport class ExcelLibraryWorkingWithCellsComponent implements OnInit {\r\n\r\n    @ViewChild(\"gridContainer\", { read: ViewContainerRef })\r\n    public gridContainerRef: ViewContainerRef;\r\n    public canSave = false;\r\n    public wb: Workbook;\r\n    public ws: Worksheet;\r\n    public worksheetRegion: string[];\r\n    public selectedRegion: string;\r\n    public cellFeatures: string[];\r\n\r\n    constructor(private resolver: ComponentFactoryResolver, private injector: Injector) {\r\n    }\r\n\r\n    public ngOnInit() {\r\n        this.workbookCreate();\r\n    }\r\n    public workbookSave(): void {\r\n        if (this.canSave) {\r\n            ExcelUtility.save(this.wb, \"ExcelWorkbook\").then((f) => {\r\n                console.log(\"Saved:\" + f);\r\n            }, (e) => {\r\n                console.error(\"ExcelUtility.Save Error:\" + e);\r\n            });\r\n        }\r\n    }\r\n    public workbookParse(wb: Workbook): void {\r\n        if (wb === undefined) {\r\n            this.worksheetRegion = null;\r\n            this.selectedRegion = null;\r\n        } else {\r\n            const names = new Array<string>();\r\n            for (const ws of wb.worksheets()) {\r\n                for (const tbl of ws.tables()) {\r\n                    names.push(ws.name + \" - \" + tbl.name);\r\n                }\r\n            }\r\n            this.worksheetRegion = names;\r\n            this.selectedRegion = names.length > 0 ? names[0] : null;\r\n        }\r\n        this.wb = wb;\r\n        this.canSave = wb != null;\r\n    }\r\n    public workbookCreate(): void {\r\n        const wb = new Workbook(WorkbookFormat.Excel2007);\r\n        const employeeSheet = wb.worksheets().add(\"Employees\");\r\n        const employeeHeader = employeeSheet.rows(0);\r\n        const companies = [\"Amazon\", \"Ford\", \"Jaguar\", \"Tesla\", \"IBM\", \"Microsoft\" ];\r\n        const firstNames = [\"Andrew\", \"Mike\", \"Martin\", \"Ann\", \"Victoria\", \"John\", \"Brian\", \"Jason\", \"David\" ];\r\n        const lastNames = [\"Smith\", \"Jordan\", \"Johnson\", \"Anderson\", \"Louis\", \"Phillips\", \"Williams\" ];\r\n        const countries = [\"UK\", \"France\", \"USA\", \"Germany\", \"Poland\", \"Brazil\" ];\r\n        const titles = [\"Sales Rep.\", \"Engineer\", \"Administrator\", \"Manager\" ];\r\n        const employeeColumns = [\"Name\", \"Company\", \"Title\", \"Age\", \"Country\"];\r\n        for (let col = 0; col < employeeColumns.length; col++) {\r\n            employeeSheet.columns(col).width = 5000;\r\n            employeeHeader.setCellValue(col, employeeColumns[col]);\r\n        }\r\n        for (let i = 1; i < 20; i++) {\r\n            const company = this.getItem(companies);\r\n            const title = this.getItem(titles);\r\n            const country = this.getItem(countries);\r\n            const name = this.getItem(firstNames) + \" \" + this.getItem(lastNames);\r\n            const salary = this.getRandom(45000, 95000);\r\n            const age = this.getRandom(20, 65);\r\n            const wr = employeeSheet.rows(i);\r\n            wr.setCellValue(0, name);\r\n            wr.setCellValue(1, company);\r\n            wr.setCellValue(2, title);\r\n            wr.setCellValue(3, age);\r\n            wr.setCellValue(4, country);\r\n            wr.setCellValue(5, salary);\r\n        }\r\n        const expanseSheet = wb.worksheets().add(\"Expanses\");\r\n        const expanseHeader = expanseSheet.rows(0);\r\n        const expanseNames = [\"Year\", \"Computers\", \"Research\", \"Travel\", \"Salary\", \"Software\" ];\r\n        let expanseCol = 0;\r\n        for (const key of expanseNames) {\r\n            expanseSheet.columns(expanseCol).width = 5000;\r\n            expanseHeader.setCellValue(expanseCol, key);\r\n            for (let i = 1; i < 20; i++) {\r\n                const wr = expanseSheet.rows(i);\r\n                if (key === \"Year\") {\r\n                    wr.setCellValue(expanseCol, 2010 + i);\r\n                } else if (key === \"Computers\") {\r\n                    wr.setCellValue(expanseCol, this.getAmount(50000, 65000));\r\n                } else if (key === \"Research\") {\r\n                    wr.setCellValue(expanseCol, this.getAmount(150000, 165000));\r\n                } else if (key === \"Travel\") {\r\n                    wr.setCellValue(expanseCol, this.getAmount(20000, 25000));\r\n                } else if (key === \"Salary\") {\r\n                    wr.setCellValue(expanseCol, this.getAmount(4000000, 450000));\r\n                } else if (key === \"Software\") {\r\n                    wr.setCellValue(expanseCol, this.getAmount(100000, 150000));\r\n                }\r\n            }\r\n            expanseCol++;\r\n        }\r\n        const incomeSheet = wb.worksheets().add(\"Income\");\r\n        const incomeHeader = incomeSheet.rows(0);\r\n        const incomeNames = [\"Year\", \"Phones\", \"Computers\", \"Software\", \"Services\", \"Royalties\" ];\r\n        let incomeCol = 0;\r\n        for (const key of incomeNames) {\r\n            incomeSheet.columns(incomeCol).width = 5000;\r\n            incomeHeader.setCellValue(incomeCol, key);\r\n            for (let i = 1; i < 20; i++) {\r\n                const wr = incomeSheet.rows(i);\r\n                if (key === \"Year\") {\r\n                    wr.setCellValue(incomeCol, 2010 + i);\r\n                } else if (key === \"Software\") {\r\n                    wr.setCellValue(incomeCol, this.getAmount(700000, 850000));\r\n                } else if (key === \"Computers\") {\r\n                    wr.setCellValue(incomeCol, this.getAmount(250000, 265000));\r\n                } else if (key === \"Royalties\") {\r\n                    wr.setCellValue(incomeCol, this.getAmount(400000, 450000));\r\n                } else if (key === \"Phones\") {\r\n                    wr.setCellValue(incomeCol, this.getAmount(6000000, 650000));\r\n                } else if (key === \"Services\") {\r\n                    wr.setCellValue(incomeCol, this.getAmount(700000, 750000));\r\n                }\r\n            }\r\n            incomeCol++;\r\n        }\r\n        this.workbookParse(wb);\r\n    }\r\n    public onCommentChanged(input: HTMLInputElement): void {\r\n        const ws = this.wb.worksheets(0);\r\n        const wr = ws.rows(0);\r\n        const d = new WorksheetCellComment();\r\n        const formatted = new FormattedString(\"This cell has a reference name.\");\r\n        if (input.checked === true) {\r\n            // Cell Comment\r\n            d.text = formatted;\r\n            wr.cells(0).comment = d;\r\n        } else {\r\n            wr.cells(0).comment = null;\r\n        }\r\n    }\r\n    public onFormulaChanged(input: HTMLInputElement): void {\r\n        // Cell Formula\r\n        const ws = this.wb.worksheets(0);\r\n        let formula: Formula;\r\n        if (input.checked === true) {\r\n            // Using a Formula object to apply a formula\r\n            formula = Formula.parse(\"=AVERAGE(F2:F20)\", CellReferenceMode.A1);\r\n            formula.applyTo(ws.rows(21).cells(5));\r\n            ws.rows(20).cells(5).value = \"Average Salary\";\r\n        } else {\r\n            if (ws.rows(21).cells(5).formula != null) {\r\n                formula = ws.rows(21).cells(5).formula;\r\n            }\r\n            if (formula != null) {\r\n                ws.rows(21).cells(5).value = null;\r\n                ws.rows(20).cells(5).value = null;\r\n            }\r\n        }\r\n    }\r\n    public onMergeChanged(input: HTMLInputElement): void {\r\n        let mergedRegion: WorksheetMergedCellsRegion;\r\n        if (input.checked === true) {\r\n            // Using merge cells\r\n             this.wb.worksheets(0).rows(2).cells(2).value = \"Engineer\";\r\n             this.wb.worksheets(0).rows(3).cells(2).value = \"Engineer\";\r\n             this.wb.worksheets(0).rows(4).cells(2).value = \"Engineer\";\r\n             this.wb.worksheets(0).mergedCellsRegions().add(2, 2, 4, 2);\r\n             mergedRegion = this.wb.worksheets(0).mergedCellsRegions(0);\r\n        } else {\r\n            if (this.wb.worksheets(0).mergedCellsRegions().count === 1) {\r\n                    mergedRegion = this.wb.worksheets(0).mergedCellsRegions(0);\r\n                }\r\n            if (mergedRegion != null) {\r\n                this.wb.worksheets(0).mergedCellsRegions().removeAt(0);\r\n                this.wb.worksheets(0).rows(2).cells(2).value = \"Engineer\";\r\n                this.wb.worksheets(0).rows(3).cells(2).value = \"Engineer\";\r\n                this.wb.worksheets(0).rows(4).cells(2).value = \"Engineer\";\r\n            }\r\n        }\r\n    }\r\n    public getRandom(min: number, max: number): number {\r\n        return Math.floor(Math.random() * (max - min + 1) + min);\r\n    }\r\n    public getItem(array: string[]): string {\r\n        const i = this.getRandom(0, array.length - 1);\r\n        return array[i];\r\n    }\r\n    public getAmount(min: number, max: number) {\r\n        const n = this.getRandom(min, max);\r\n        const s = n.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\r\n        return s;\r\n    }\r\n}\r\n","isMain":true,"fileExtension":"ts","fileHeader":"ts"},{"hasRelativeAssetsUrls":false,"path":"src/app/excel-library/working-with/cells.component.html","content":"<div class=\"sample-wrapper container\">\r\n    <div class=\"cellOptions\">\r\n\r\n        <div class=\"workbookOperations\">         \r\n            <button class=\"workbookButton\" (click)=\"workbookSave()\" [disabled]=\"!canSave\">\r\n                <label>Save Workbook</label>\r\n            </button>           \r\n        </div>       \r\n        <div class=\"cellFeatures\">\r\n            <label class=\"label\">Add a Comment to cell A1: </label> \r\n            <input type=\"checkbox\" id=\"addComment\" (change)='onCommentChanged($event.target)'> <br/>\r\n            <label class=\"label\">Add a Formula for cells F2 to F20: </label> \r\n            <input type=\"checkbox\" id=\"addFormula\" (change)='onFormulaChanged($event.target)'>  <br/>\r\n            <label class=\"label\">Merge Cells: </label>\r\n            <input type=\"checkbox\" id=\"mergeCells\" (change)='onMergeChanged($event.target)'> \r\n        </div>\r\n    </div>\r\n\r\n\r\n</div>\r\n","isMain":true,"fileExtension":"html","fileHeader":"html"},{"hasRelativeAssetsUrls":false,"path":"src/app/excel-library/working-with/cells.component.scss","content":".cellOptions {\r\n    display: \"block\";\r\n    width: 100%;\r\n}\r\n\r\n.workbookOperations {\r\n    width: 160px;\r\n    padding-left: 5px;\r\n    padding-right: 5px;\r\n    float:left;\r\n}\r\n\r\n.workbookDetails {\r\n    float:left;\r\n    width: 35%;\r\n    height: 100px;\r\n    padding-left: 5px;\r\n    padding-right: 5px;\r\n}\r\n\r\n.cellFeatures {\r\n    float:left;\r\n    width: 35%;\r\n    height: 100px;\r\n    padding-left: 5px;\r\n    padding-right: 5px;\r\n}\r\n\r\n.workbookDetails > select {\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: 90px;\r\n}\r\n\r\n.label {\r\n    margin-top: 8px;\r\n    font-weight: bold;\r\n}\r\n\r\n.workbookPreview {\r\n    display: inline-block;\r\n    padding-left: 5px;\r\n    padding-right: 5px;\r\n    width: 100%;\r\n    height: 200px;\r\n}\r\n\r\n.workbookButton {\r\n    display: block;\r\n    width: 150px;\r\n    margin-top: 5px;\r\n}\r\n\r\n.workbookSelector {\r\n    display: inline-block;\r\n    width: 150px;\r\n    margin-top: 5px;\r\n}","isMain":true,"fileExtension":"scss","fileHeader":"scss"},{"hasRelativeAssetsUrls":false,"path":"src/app/utilities/excel-utility.ts","content":"import { saveAs } from \"file-saver\";\r\nimport { Workbook } from \"igniteui-angular-excel\";\r\nimport { WorkbookFormat } from \"igniteui-angular-excel\";\r\nimport { WorkbookSaveOptions } from \"igniteui-angular-excel\";\r\n\r\nexport class ExcelUtility {\r\n    public static getExtension(format: WorkbookFormat) {\r\n        switch (format) {\r\n            case WorkbookFormat.StrictOpenXml:\r\n            case WorkbookFormat.Excel2007:\r\n                return \".xlsx\";\r\n            case WorkbookFormat.Excel2007MacroEnabled:\r\n                return \".xlsm\";\r\n            case WorkbookFormat.Excel2007MacroEnabledTemplate:\r\n                return \".xltm\";\r\n            case WorkbookFormat.Excel2007Template:\r\n                return \".xltx\";\r\n            case WorkbookFormat.Excel97To2003:\r\n                return \".xls\";\r\n            case WorkbookFormat.Excel97To2003Template:\r\n                return \".xlt\";\r\n        }\r\n    }\r\n\r\n    public static load(file: File): Promise<Workbook> {\r\n        return new Promise<Workbook>((resolve, reject) => {\r\n            ExcelUtility.readFileAsUint8Array(file).then((a) => {\r\n                Workbook.load(a, null, (w) => {\r\n                    resolve(w);\r\n                }, (e) => {\r\n                    reject(e);\r\n                });\r\n            }, (e) => {\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    public static loadFromUrl(url: string): Promise<Workbook> {\r\n        return new Promise<Workbook>((resolve, reject) => {\r\n            const req = new XMLHttpRequest();\r\n            req.open(\"GET\", url, true);\r\n            req.responseType = \"arraybuffer\";\r\n            req.onload = (d) => {\r\n                const data = new Uint8Array(req.response);\r\n                Workbook.load(data, null, (w) => {\r\n                    resolve(w);\r\n                }, (e) => {\r\n                    reject(e);\r\n                });\r\n            };\r\n            req.send();\r\n        });\r\n    }\r\n\r\n    public static save(workbook: Workbook, fileNameWithoutExtension: string): Promise<string> {\r\n        return new Promise<string>((resolve, reject) => {\r\n            const opt = new WorkbookSaveOptions();\r\n            opt.type = \"blob\";\r\n\r\n            workbook.save(opt, (d) => {\r\n                const fileExt = ExcelUtility.getExtension(workbook.currentFormat);\r\n                const fileName = fileNameWithoutExtension + fileExt;\r\n                saveAs(d as Blob, fileName);\r\n                resolve(fileName);\r\n            }, (e) => {\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    private static readFileAsUint8Array(file: File): Promise<Uint8Array> {\r\n        return new Promise<Uint8Array>((resolve, reject) => {\r\n            const fr = new FileReader();\r\n            fr.onerror = (e) => {\r\n                reject(fr.error);\r\n            };\r\n\r\n            if (fr.readAsBinaryString) {\r\n                fr.onload = (e) => {\r\n                    const rs = (fr as any).resultString;\r\n                    const str: string = rs != null ? rs : fr.result;\r\n                    const result = new Uint8Array(str.length);\r\n                    for (let i = 0; i < str.length; i++) {\r\n                        result[i] = str.charCodeAt(i);\r\n                    }\r\n                    resolve(result);\r\n                };\r\n                fr.readAsBinaryString(file);\r\n            } else {\r\n                fr.onload = (e) => {\r\n                    resolve(new Uint8Array(fr.result as ArrayBuffer));\r\n                };\r\n                fr.readAsArrayBuffer(file);\r\n            }\r\n        });\r\n    }\r\n}\r\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.module.ts","content":"import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppComponent } from \"./app.component\";\r\nimport { \r\n\tIgxButtonModule,\r\n\tIgxGridModule\r\n } from \"igniteui-angular\";\r\nimport { IgxCategoryChartModule } from \"igniteui-angular-charts\";\r\nimport { IgxExcelModule } from \"igniteui-angular-excel\";\r\nimport { ExcelUtility } from \"./utilities/excel-utility\";\r\nimport { ExcelLibraryWorkingWithCellsComponent } from \"./excel-library/working-with/cells.component\";\n\n\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\r\n\tAppComponent,\r\n\tExcelLibraryWorkingWithCellsComponent\r\n],\n  imports: [\r\n\tBrowserModule,\r\n\tBrowserAnimationsModule,\r\n\tFormsModule,\r\n\tIgxButtonModule,\r\n\tIgxCategoryChartModule,\r\n\tIgxGridModule,\r\n\tIgxExcelModule\r\n],\n  providers: [],\n  entryComponents: [],\n  schemas: []\n})\nexport class AppModule {}\n","isMain":true,"fileExtension":"ts","fileHeader":"modules"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.component.html","content":"<app-cells></app-cells>"}],"sampleDependencies":"{\"@angular/animations\":\"10.0.14\",\"@angular/common\":\"10.0.14\",\"@angular/compiler\":\"10.0.14\",\"@angular/core\":\"^10.0.14\",\"@angular/forms\":\"10.0.14\",\"@angular/platform-browser\":\"10.0.14\",\"@angular/platform-browser-dynamic\":\"10.0.14\",\"@types/hammerjs\":\"^2.0.35\",\"classlist.js\":\"^1.1.20150312\",\"core-js\":\"^2.6.2\",\"hammerjs\":\"^2.0.8\",\"igniteui-angular\":\"11.1.10\",\"igniteui-angular-core\":\"11.2.0-beta.0\",\"igniteui-angular-excel\":\"11.2.0-beta.0\",\"intl\":\"^1.2.5\",\"jszip\":\"^3.1.5\",\"rxjs\":\"^6.5.4\",\"tslib\":\"1.13.0\",\"web-animations-js\":\"^2.3.2\",\"zone.js\":\"~0.10.2\"}"}