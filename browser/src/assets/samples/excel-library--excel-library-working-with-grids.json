{"sampleFiles":[{"hasRelativeAssetsUrls":false,"path":"src/app/excel-library/working-with/grids.component.ts","content":"import { Component, OnInit, ViewChild } from \"@angular/core\";\r\n// importing IG components:\r\nimport { DefaultSortingStrategy, IgxGridComponent, SortingDirection } from \"igniteui-angular\";\r\nimport { FormatConditionIconSet } from \"igniteui-angular-excel\";\r\n// importing IG utilities:\r\nimport {\r\n    IWorkbookExportEndedEventArgs,\r\n    WorkbookExportOptions,\r\n    WorkbookExportService\r\n} from \"../../utilities/excel-exporter\";\r\nimport { ExcelUtility } from \"../../utilities/excel-utility\";\r\n\r\n@Component({\r\n    providers: [ WorkbookExportService ],\r\n    selector: \"app-grids\",\r\n    styleUrls: [\"./grids.component.scss\"],\r\n    templateUrl: \"./grids.component.html\"\r\n})\r\nexport class ExcelLibraryWorkingWithGridsComponent implements OnInit {\r\n\r\n    @ViewChild(\"grid\", { read: IgxGridComponent, static: true })\r\n    public grid: IgxGridComponent;\r\n    public data: any[];\r\n\r\n    constructor(private exporter: WorkbookExportService) {\r\n        this.initData();\r\n\r\n        exporter.onWorkbookExportEnded.subscribe({ next: (e: IWorkbookExportEndedEventArgs) => {\r\n            // the discontinued column shows a check/x icon so we can do that in the workbook\r\n            // using an icon conditional format\r\n            const iconRegion = e.getDataRegionFromHeader(\"Euro\");\r\n            if (iconRegion != null) {\r\n                const iconFormat = e.worksheet.conditionalFormats().addIconSetCondition(iconRegion.toString(),\r\n                FormatConditionIconSet.IconSet3Symbols);\r\n                iconFormat.showValue = false;\r\n            }\r\n            ExcelUtility.save(e.workbook, e.fileName);\r\n        }});\r\n    }\r\n\r\n    public exportGrid() {\r\n        const opt = new WorkbookExportOptions(\"ExcelWorkbooks\");\r\n        opt.exportAsTable = true;\r\n        // we want to create an icon set for the Euro field and excel\r\n        // conditional formatting doesn't work on boolean\r\n        opt.columnOptions = {\r\n            Euro : { valueFormatter: (v) => v === true ? 1 : v === false ? 0 : v }\r\n        };\r\n        this.exporter.export(this.grid, opt);\r\n    }\r\n\r\n    public ngOnInit() {\r\n        this.grid.sortingExpressions = [\r\n            { dir: SortingDirection.Asc, fieldName: \"ContactTitle\", ignoreCase: true,\r\n              strategy: DefaultSortingStrategy.instance() },\r\n            { dir: SortingDirection.Desc, fieldName: \"Country\", ignoreCase: true,\r\n              strategy: DefaultSortingStrategy.instance() }\r\n        ];\r\n    }\r\n\r\n    public initData(): void {\r\n        const companies = [\"Amazon\", \"Ford\", \"Jaguar\", \"Tesla\", \"IBM\", \"Microsoft\" ];\r\n        const firstNames = [\"Andrew\", \"Mike\", \"Martin\", \"Ann\", \"Victoria\", \"John\", \"Brian\", \"Jason\", \"David\" ];\r\n        const lastNames = [\"Smith\", \"Jordan\", \"Johnson\", \"Anderson\", \"Louis\", \"Phillips\", \"Williams\" ];\r\n        const cities = [\"London\", \"Paris\", \"Boston\", \"Berlin\" ];\r\n        const countries = [\"UK\", \"France\", \"USA\", \"Germany\", \"Poland\", \"Brazil\" ];\r\n        const titles = [\"Sales Rep.\", \"Owner\", \"Administrator\", \"Manager\" ];\r\n        const streets = [\"Main St\", \"Madison St\", \"Broad Way\" ];\r\n\r\n        const dataSource = new Array<any>();\r\n        // generating excel data source\r\n        for (let i = 0; i < 20; i++) {\r\n            const companyName = this.getItem(companies);\r\n            const contactTitle = this.getItem(titles);\r\n            const country = this.getItem(countries);\r\n            const city = this.getItem(cities);\r\n            const contactName = this.getItem(firstNames) + \" \" + this.getItem(lastNames);\r\n            const address = this.getRandom(10, 60) + \" \" + this.getItem(streets);\r\n            const postalCode = this.getRandom(100, 400) + \" \" + this.getRandom(50, 90);\r\n            const customerID = \"CID-\" + this.getRandom(500, 900);\r\n            const salary = this.getSalary(85000, 200000);\r\n            const age = this.getRandom(20, 65);\r\n            const isEuropean = country !== \"USA\" && country !== \"Brazil\";\r\n            const dataItem = {\r\n                Address: address,\r\n                Age: age,\r\n                City: city,\r\n                CompanyName: companyName,\r\n                ContactName: contactName,\r\n                ContactTitle: contactTitle,\r\n                Country: country,\r\n                Euro: isEuropean,\r\n                ID: customerID,\r\n                PostalCode: postalCode,\r\n                Salary: salary\r\n            };\r\n            dataSource.push(dataItem);\r\n        }\r\n        this.data = dataSource;\r\n    }\r\n\r\n    public getRandom(min: number, max: number): number {\r\n        return Math.floor(Math.random() * (max - min + 1) + min);\r\n    }\r\n\r\n    public getItem(array: string[]): string {\r\n        const i = this.getRandom(0, array.length - 1);\r\n        return array[i];\r\n    }\r\n\r\n    public getSalary(min: number, max: number) {\r\n        const n = this.getRandom(min, max);\r\n        const s = n.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\r\n        return \"$\" + s.replace(\".00\", \"\");\r\n    }\r\n}\r\n","isMain":true,"fileExtension":"ts","fileHeader":"ts"},{"hasRelativeAssetsUrls":false,"path":"src/app/excel-library/working-with/grids.component.html","content":"<div class=\"sample-wrapper container\">\r\n    <div class=\"options\">\r\n        <button (click)=\"exportGrid()\">Export to Excel</button>\r\n    </div>\r\n    <igx-grid #grid [data]=\"data\" [autoGenerate]=\"false\" height=\"500px\" width=\"100%\">\r\n        <igx-column width=\"15%\" sortable=\"true\" field=\"CompanyName\" header=\"Company\"></igx-column>\r\n        <igx-column width=\"15%\" sortable=\"true\" field=\"ContactName\" header=\"Name\"></igx-column>\r\n        <igx-column width=\"15%\" sortable=\"true\" field=\"ContactTitle\" header=\"Title\"></igx-column>\r\n        <igx-column width=\"15%\" sortable=\"true\" field=\"Country\" header=\"Country\"></igx-column>\r\n        <igx-column width=\"10%\" sortable=\"true\" field=\"Euro\" header=\"Euro\" [dataType]=\"'boolean'\">\r\n            <ng-template igxCell let-cell=\"cell\" let-val>\r\n                <img *ngIf=\"val\"  title=\"Euro\" alt=\"Euro\"   src=\"https://static.infragistics.com/xplatform/images/grid/active.png\"  />\r\n                <img *ngIf=\"!val\" title=\"Other\" alt=\"Other\" src=\"https://static.infragistics.com/xplatform/images/grid/expired.png\"/>\r\n            </ng-template>\r\n        </igx-column>\r\n        <igx-column width=\"15%\" sortable=\"true\" field=\"Salary\" header=\"Salary\"></igx-column>\r\n        <igx-column width=\"10%\" sortable=\"true\" field=\"Age\" header=\"Age\"></igx-column>\r\n    </igx-grid>\r\n</div>\r\n","isMain":true,"fileExtension":"html","fileHeader":"html"},{"hasRelativeAssetsUrls":false,"path":"src/app/excel-library/working-with/grids.component.scss","content":".container {\r\n    display: flex;\r\n    flex-flow: column;\r\n    height: 100%;\r\n    min-width: 300px;\r\n}\r\n\r\n.options {\r\n    margin-top: 5px;\r\n    margin-bottom: 5px;\r\n    margin-right: 10px;\r\n    margin-left: 10px;\r\n}","isMain":true,"fileExtension":"scss","fileHeader":"scss"},{"hasRelativeAssetsUrls":false,"path":"src/app/utilities/excel-utility.ts","content":"import { saveAs } from \"file-saver\";\r\nimport { Workbook } from \"igniteui-angular-excel\";\r\nimport { WorkbookFormat } from \"igniteui-angular-excel\";\r\nimport { WorkbookSaveOptions } from \"igniteui-angular-excel\";\r\n\r\nexport class ExcelUtility {\r\n    public static getExtension(format: WorkbookFormat) {\r\n        switch (format) {\r\n            case WorkbookFormat.StrictOpenXml:\r\n            case WorkbookFormat.Excel2007:\r\n                return \".xlsx\";\r\n            case WorkbookFormat.Excel2007MacroEnabled:\r\n                return \".xlsm\";\r\n            case WorkbookFormat.Excel2007MacroEnabledTemplate:\r\n                return \".xltm\";\r\n            case WorkbookFormat.Excel2007Template:\r\n                return \".xltx\";\r\n            case WorkbookFormat.Excel97To2003:\r\n                return \".xls\";\r\n            case WorkbookFormat.Excel97To2003Template:\r\n                return \".xlt\";\r\n        }\r\n    }\r\n\r\n    public static load(file: File): Promise<Workbook> {\r\n        return new Promise<Workbook>((resolve, reject) => {\r\n            ExcelUtility.readFileAsUint8Array(file).then((a) => {\r\n                Workbook.load(a, null, (w) => {\r\n                    resolve(w);\r\n                }, (e) => {\r\n                    reject(e);\r\n                });\r\n            }, (e) => {\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    public static loadFromUrl(url: string): Promise<Workbook> {\r\n        return new Promise<Workbook>((resolve, reject) => {\r\n            const req = new XMLHttpRequest();\r\n            req.open(\"GET\", url, true);\r\n            req.responseType = \"arraybuffer\";\r\n            req.onload = (d) => {\r\n                const data = new Uint8Array(req.response);\r\n                Workbook.load(data, null, (w) => {\r\n                    resolve(w);\r\n                }, (e) => {\r\n                    reject(e);\r\n                });\r\n            };\r\n            req.send();\r\n        });\r\n    }\r\n\r\n    public static save(workbook: Workbook, fileNameWithoutExtension: string): Promise<string> {\r\n        return new Promise<string>((resolve, reject) => {\r\n            const opt = new WorkbookSaveOptions();\r\n            opt.type = \"blob\";\r\n\r\n            workbook.save(opt, (d) => {\r\n                const fileExt = ExcelUtility.getExtension(workbook.currentFormat);\r\n                const fileName = fileNameWithoutExtension + fileExt;\r\n                saveAs(d as Blob, fileName);\r\n                resolve(fileName);\r\n            }, (e) => {\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    private static readFileAsUint8Array(file: File): Promise<Uint8Array> {\r\n        return new Promise<Uint8Array>((resolve, reject) => {\r\n            const fr = new FileReader();\r\n            fr.onerror = (e) => {\r\n                reject(fr.error);\r\n            };\r\n\r\n            if (fr.readAsBinaryString) {\r\n                fr.onload = (e) => {\r\n                    const rs = (fr as any).resultString;\r\n                    const str: string = rs != null ? rs : fr.result;\r\n                    const result = new Uint8Array(str.length);\r\n                    for (let i = 0; i < str.length; i++) {\r\n                        result[i] = str.charCodeAt(i);\r\n                    }\r\n                    resolve(result);\r\n                };\r\n                fr.readAsBinaryString(file);\r\n            } else {\r\n                fr.onload = (e) => {\r\n                    resolve(new Uint8Array(fr.result as ArrayBuffer));\r\n                };\r\n                fr.readAsArrayBuffer(file);\r\n            }\r\n        });\r\n    }\r\n}\r\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.module.ts","content":"import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppComponent } from \"./app.component\";\r\nimport { \r\n\tIgxButtonModule,\r\n\tIgxGridModule\r\n } from \"igniteui-angular\";\r\nimport { IgxCategoryChartModule } from \"igniteui-angular-charts\";\r\nimport { IgxExcelModule } from \"igniteui-angular-excel\";\r\nimport { ExcelUtility } from \"./utilities/excel-utility\";\r\nimport { ExcelLibraryWorkingWithGridsComponent } from \"./excel-library/working-with/grids.component\";\n\n\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\r\n\tAppComponent,\r\n\tExcelLibraryWorkingWithGridsComponent\r\n],\n  imports: [\r\n\tBrowserModule,\r\n\tBrowserAnimationsModule,\r\n\tFormsModule,\r\n\tIgxButtonModule,\r\n\tIgxCategoryChartModule,\r\n\tIgxGridModule,\r\n\tIgxExcelModule\r\n],\n  providers: [],\n  entryComponents: [],\n  schemas: []\n})\nexport class AppModule {}\n","isMain":true,"fileExtension":"ts","fileHeader":"modules"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.component.html","content":"<app-grids></app-grids>"}],"sampleDependencies":"{\"@angular/animations\":\"10.0.14\",\"@angular/common\":\"10.0.14\",\"@angular/compiler\":\"10.0.14\",\"@angular/core\":\"^10.0.14\",\"@angular/forms\":\"10.0.14\",\"@angular/platform-browser\":\"10.0.14\",\"@angular/platform-browser-dynamic\":\"10.0.14\",\"@types/hammerjs\":\"^2.0.35\",\"classlist.js\":\"^1.1.20150312\",\"core-js\":\"^2.6.2\",\"hammerjs\":\"^2.0.8\",\"igniteui-angular\":\"11.1.10\",\"igniteui-angular-core\":\"11.2.0-beta.0\",\"igniteui-angular-excel\":\"11.2.0-beta.0\",\"intl\":\"^1.2.5\",\"jszip\":\"^3.1.5\",\"rxjs\":\"^6.5.4\",\"tslib\":\"1.13.0\",\"web-animations-js\":\"^2.3.2\",\"zone.js\":\"~0.10.2\"}"}