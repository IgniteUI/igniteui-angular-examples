{"sampleFiles":[{"hasRelativeAssetsUrls":false,"path":"src/app/high-frequency/category-chart-high-frequency.component.ts","content":"import {\r\n    AfterViewInit,\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ElementRef,\r\n    Input,\r\n    NgZone,\r\n    OnDestroy,\r\n    ViewChild\r\n} from \"@angular/core\";\r\nimport { IgxCategoryChartComponent } from \"igniteui-angular-charts\";\r\n\r\n@Component({\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    selector: \"app-category-chart-high-frequency\",\r\n    styleUrls: [\"./category-chart-high-frequency.component.scss\"],\r\n    templateUrl: \"./category-chart-high-frequency.component.html\"\r\n})\r\nexport class CategoryChartHighFrequencyComponent implements AfterViewInit, OnDestroy {\r\n\r\n    public data: any[];\r\n\r\n    @ViewChild(\"chart\", { static: true })\r\n    public chart: IgxCategoryChartComponent;\r\n\r\n    private currValue: number = 15;\r\n    private currIndex: number = 0;\r\n\r\n    private shouldTick: boolean = true;\r\n    private _timerStatusText: string = \"Stop\";\r\n\r\n    private _maxPoints: number = 5000;\r\n\r\n    private _refreshInterval: number = 10;\r\n    private _interval: number = -1;\r\n    private _frames: number = 0;\r\n    private _time: Date;\r\n\r\n    constructor(private _zone: NgZone) {\r\n        this.data = this.generateData();\r\n    }\r\n\r\n    public onChangeAmountClicked() {\r\n        this.data = this.generateData();\r\n    }\r\n\r\n    public onTimerStartStopClick() {\r\n        if (this.shouldTick) {\r\n            this.shouldTick = false;\r\n            this._timerStatusText = \"Start\";\r\n        }\r\n        else {\r\n            this.shouldTick = true;\r\n            this._timerStatusText = \"Stop\";\r\n        }\r\n    }\r\n\r\n    public onRefreshFrequencyChanged(e: any) {\r\n        let num: number = parseInt(e.target.value, 10);\r\n\r\n        if (isNaN(num)) {\r\n            num = 10;\r\n        }\r\n        if (num < 10) {\r\n            num = 10;\r\n        }\r\n        if (num > 1000) {\r\n            num = 1000;\r\n        }\r\n        this._refreshInterval = num;\r\n        this.setupInterval();\r\n    }\r\n\r\n    public onMaxPointsChanged(e: any) {\r\n        let num: number = parseInt(e.target.value, 10);\r\n\r\n        if (isNaN(num)) {\r\n            num = 1000;\r\n        }\r\n        if (num < 1000) {\r\n            num = 1000;\r\n        }\r\n        if (num > 1000000) {\r\n            num = 1000000;\r\n        }\r\n        this._maxPoints = num;\r\n    }\r\n\r\n    public get maxPointsText(): string {\r\n        return this.toShortString(this._maxPoints);\r\n    }\r\n\r\n    public get maxPoints(): number {\r\n        return this._maxPoints;\r\n    }\r\n\r\n    @Input()\r\n    public set maxPoints(v: number) {\r\n        this._maxPoints = v;\r\n    }\r\n\r\n    public get refreshInterval(): number {\r\n        return this._refreshInterval;\r\n    }\r\n\r\n    @Input()\r\n    public set refreshInterval(v: number) {\r\n        this._refreshInterval = v;\r\n        this.setupInterval();\r\n    }\r\n\r\n    public get refreshIntervalText(): string {\r\n        return (this._refreshInterval / 1000).toFixed(3) + \"s\";\r\n    }\r\n\r\n    public get timerStatusText() {\r\n        return this._timerStatusText;\r\n    }\r\n\r\n    @Input()\r\n    public set timerStatusText(v: string) {\r\n        this._timerStatusText = v;\r\n    }\r\n\r\n    public ngOnDestroy(): void {\r\n        if (this._interval >= 0) {\r\n            this._zone.runOutsideAngular(() => {\r\n                window.clearInterval(this._interval);\r\n            });\r\n            this._interval = -1;\r\n        }\r\n    }\r\n\r\n    public ngAfterViewInit(): void {\r\n        this._time = new Date();\r\n        this.setupInterval();\r\n    }\r\n\r\n    private setupInterval(): void {\r\n        if (this._interval >= 0) {\r\n            this._zone.runOutsideAngular(() => {\r\n                window.clearInterval(this._interval);\r\n            });\r\n            this._interval = -1;\r\n        }\r\n\r\n        this._zone.runOutsideAngular(() => {\r\n            this._interval = window.setInterval(() => this.tick(),\r\n                this.refreshInterval);\r\n        });\r\n    }\r\n\r\n    private generateData(): any[] {\r\n        const data: any[] = [];\r\n        for (this.currIndex = 0; this.currIndex < this.maxPoints; this.currIndex++) {\r\n            this.currValue += Math.random() * 4.0 - 2.0;\r\n            data.push({ Label: this.currIndex.toString(), Value: this.currValue });\r\n        }\r\n        return data;\r\n    }\r\n\r\n\r\n\r\n    private tick(): void {\r\n\r\n        if (this.shouldTick) {\r\n\r\n            this.currValue += Math.random() * 4.0 - 2.0;\r\n            this.currIndex++;\r\n            const newVal = { Label: this.currIndex.toString(), Value: this.currValue };\r\n\r\n            const oldVal = this.data[0];\r\n            this.data.push(newVal);\r\n            this.chart.notifyInsertItem(this.data, this.data.length - 1, newVal);\r\n            this.data.shift();\r\n            this.chart.notifyRemoveItem(this.data, 0, oldVal);\r\n\r\n            this._frames++;\r\n            const currTime = new Date();\r\n            const elapsed = (currTime.getTime() - this._time.getTime());\r\n            if (elapsed > 5000) {\r\n                const fps = this._frames / (elapsed / 1000.0);\r\n                this._time = currTime;\r\n                this._frames = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    private toShortString(largeValue: number): string {\r\n        let roundValue: string;\r\n\r\n        if (largeValue >= 1000000) {\r\n            roundValue = (largeValue / 1000000).toFixed(1);\r\n            return roundValue + \"m\";\r\n        }\r\n        if (largeValue >= 1000) {\r\n            roundValue = (largeValue / 1000).toFixed(0);\r\n            return roundValue + \"k\";\r\n        }\r\n\r\n        roundValue = largeValue.toFixed(0);\r\n        return roundValue + \"\";\r\n    }\r\n}\r\n","isMain":true,"fileExtension":"ts","fileHeader":"ts"},{"hasRelativeAssetsUrls":false,"path":"src/app/high-frequency/category-chart-high-frequency.component.html","content":"<div class=\"container sample\">\r\n    <div class=\"options horizontal\">\r\n        <button style=\"width: 5rem\" (click)=\"onTimerStartStopClick()\">{{timerStatusText}}</button>\r\n        <label class=\"options-label\">Refresh: </label>\r\n        <label class=\"options-value\">{{ refreshIntervalText }}</label>\r\n        <input class=\"options-slider\" type=\"range\" min=\"10\" max=\"1000\" step=\"10\"\r\n        [value]=\"refreshInterval\" (change)=\"onRefreshFrequencyChanged($event)\"/>\r\n\r\n        <button (click)=\"onChangeAmountClicked()\" style=\"margin-left: 1rem;\">Generate</button>\r\n        <label class=\"options-label\">Points: </label>\r\n        <label class=\"options-value\">{{maxPointsText}}</label>\r\n        <input class=\"options-slider\" type=\"range\" min=\"1000\" max=\"50000\" step=\"100\"\r\n         [value]=\"maxPoints\" (change)=\"onMaxPointsChanged($event)\" />\r\n    </div>\r\n\r\n    <div class=\"container\">\r\n        <igx-category-chart height=\"100%\"\r\n            [dataSource]=\"data\"\r\n            yAxisLabelExtent=\"40\"\r\n            #chart>\r\n        </igx-category-chart>\r\n    </div>\r\n</div>\r\n","isMain":true,"fileExtension":"html","fileHeader":"html"},{"hasRelativeAssetsUrls":false,"path":"src/app/high-frequency/category-chart-high-frequency.component.scss","content":"/* styles are loaded the Shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/\r\n","isMain":true,"fileExtension":"scss","fileHeader":"scss"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.module.ts","content":"import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppComponent } from \"./app.component\";\r\nimport { CategoryChartHighFrequencyComponent } from \"./high-frequency/category-chart-high-frequency.component\";\r\nimport { \r\n\tIgxCategoryChartModule,\r\n\tIgxLegendModule\r\n } from \"igniteui-angular-charts\";\r\nimport { IgxSliderModule } from \"igniteui-angular\";\n\n\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\r\n\tAppComponent,\r\n\tCategoryChartHighFrequencyComponent\r\n],\n  imports: [\r\n\tBrowserModule,\r\n\tBrowserAnimationsModule,\r\n\tFormsModule,\r\n\tIgxCategoryChartModule,\r\n\tIgxLegendModule,\r\n\tIgxSliderModule\r\n],\n  providers: [],\n  entryComponents: [],\n  schemas: []\n})\nexport class AppModule {}\n","isMain":true,"fileExtension":"ts","fileHeader":"modules"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.component.html","content":"<app-category-chart-high-frequency></app-category-chart-high-frequency>"}],"sampleDependencies":"{\"@angular/animations\":\"10.0.14\",\"@angular/common\":\"10.0.14\",\"@angular/compiler\":\"10.0.14\",\"@angular/core\":\"^10.0.14\",\"@angular/forms\":\"10.0.14\",\"@angular/platform-browser\":\"10.0.14\",\"@angular/platform-browser-dynamic\":\"10.0.14\",\"@types/hammerjs\":\"^2.0.35\",\"classlist.js\":\"^1.1.20150312\",\"core-js\":\"^2.6.2\",\"hammerjs\":\"^2.0.8\",\"igniteui-angular\":\"11.1.10\",\"igniteui-angular-charts\":\"11.2.0-beta.0\",\"igniteui-angular-core\":\"11.2.0-beta.0\",\"intl\":\"^1.2.5\",\"jszip\":\"^3.1.5\",\"rxjs\":\"^6.5.4\",\"tslib\":\"1.13.0\",\"web-animations-js\":\"^2.3.2\",\"zone.js\":\"~0.10.2\"}"}