{"sampleFiles":[{"hasRelativeAssetsUrls":false,"path":"src/app/maps/MapDisplayImageryBingTiles/component.ts","content":"import { AfterViewInit, Component, ViewChild } from \"@angular/core\";\r\nimport { BingMapsImageryStyle } from \"igniteui-angular-maps\";\r\nimport { IgxBingMapsMapImagery } from \"igniteui-angular-maps\";\r\nimport { IgxGeographicMapComponent } from \"igniteui-angular-maps\";\r\n\r\nimport { MapUtility } from \"../../utilities/MapUtility\";\r\n\r\n@Component({\r\n  selector: \"app-MapDisplayImageryEsriTiles\",\r\n  styleUrls: [\"./component.scss\"],\r\n  templateUrl: \"./component.html\"\r\n})\r\n\r\nexport class MapDisplayImageryBingTiles implements AfterViewInit {\r\n\r\n    @ViewChild(\"map\", {static: true})\r\n    public map: IgxGeographicMapComponent;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    public ngAfterViewInit(): void {\r\n        const tileSource = new IgxBingMapsMapImagery();\r\n        tileSource.apiKey = MapUtility.getBingKey();\r\n        tileSource.imageryStyle = BingMapsImageryStyle.AerialWithLabels;\r\n        let tileUri = tileSource.actualBingImageryRestUri;\r\n\r\n        // resolving BingMaps uri based on HTTP protocol of hosting website\r\n        const isHttpSecured = window.location.toString().startsWith(\"https:\");\r\n        if (isHttpSecured) {\r\n            tileUri = tileUri.replace(\"http:\", \"https:\");\r\n        } else {\r\n            tileUri = tileUri.replace(\"https:\", \"http:\");\r\n        }\r\n        tileSource.bingImageryRestUri = tileUri;\r\n\r\n        this.map.backgroundContent = tileSource;\r\n\r\n        this.map.windowRect = { left: 0.2, top: 0.1, width: 0.7, height: 0.7 };\r\n    }\r\n}\r\n","isMain":true,"fileExtension":"ts","fileHeader":"ts"},{"hasRelativeAssetsUrls":false,"path":"src/app/maps/MapDisplayImageryBingTiles/component.html","content":"<div class=\"container sample\">\r\n    <igx-geographic-map #map\r\n        width=\"100%\"\r\n        height=\"100%\"\r\n        zoomable=\"true\" >\r\n    </igx-geographic-map>\r\n</div>\r\n","isMain":true,"fileExtension":"html","fileHeader":"html"},{"hasRelativeAssetsUrls":false,"path":"src/app/maps/MapDisplayImageryBingTiles/component.scss","content":"/* styles are loaded the Shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/\r\n","isMain":true,"fileExtension":"scss","fileHeader":"scss"},{"hasRelativeAssetsUrls":false,"path":"src/app/utilities/MapUtility.ts","content":"import { IgxGeographicMapComponent } from 'igniteui-angular-maps';\r\n\r\nexport enum MapRegion {\r\n    Caribbean = \"Caribbean\",\r\n    UnitedStates = \"United States\",\r\n    UnitedKingdom = \"United Kingdom\",\r\n    European = \"European\",\r\n    SouthAfrica = \"South Africa\",\r\n    Poland = \"Poland\",\r\n    Australia = \"Australia\",\r\n    Japan = \"Japan\",\r\n    Uruguay = \"Uruguay\",\r\n    Egypt = \"Egypt\",\r\n    Hawaii = \"Hawaii\"\r\n}\r\n\r\nexport class MapUtility {\r\n\r\n    public static navigateTo(geoMap: IgxGeographicMapComponent, name: MapRegion) {\r\n\r\n        const geoRect = this.getRegions()[name];\r\n        geoMap.zoomToGeographic(geoRect);\r\n    }\r\n\r\n    public static toPixel(num: number): string {\r\n        const s = Math.abs(num).toFixed(0);\r\n        return s + \" px\";\r\n    }\r\n\r\n    public static toLng(num: number): string {\r\n        num = this.clamp(num, -180, 180);\r\n\r\n        let s = Math.abs(num).toFixed(1);\r\n        if (num < 100) {\r\n            s = \"  \" + s;\r\n        }\r\n\r\n        if (num > 0) {\r\n            return s + \"째E\";\r\n        } else  {\r\n            return s + \"째W\";\r\n        }\r\n    }\r\n\r\n    public static toLat(num: number): string {\r\n        num = this.clamp(num, -90, 90);\r\n\r\n        let s = Math.abs(num).toFixed(1);\r\n        if (num < 100) {\r\n            s = \"  \" + s;\r\n        }\r\n\r\n        if (num > 0) {\r\n            return s + \"째N\";\r\n        } else  {\r\n            return s + \"째S\";\r\n        }\r\n    }\r\n\r\n    public static clamp(num: number, min: number, max: number): number {\r\n        return Math.max(min, Math.min(max, num));\r\n    }\r\n\r\n    public static pad(num: number, places?: number): string {\r\n        places = places || 20;\r\n        let s = num.toFixed(1).toString();\r\n        while (s.length < places) { s = \" \" + s; }\r\n        return s;\r\n    }\r\n\r\n    public static getBingKey(): string {\r\n        return \"Aj2inbXEmvSbAbbVUKH1-DWlUeWIGjFTY3K2K8d1lqE5mEwI3_1oFX2U2tqONiHF\";\r\n    }\r\n\r\n    public static getRegions(): any {\r\n        // create regions only once\r\n        if (this.regions === undefined) {\r\n            this.createRegions();\r\n        }\r\n        return this.regions;\r\n    }\r\n\r\n    private static regions: any;\r\n\r\n    private static addRegion(name: string, geoRect: any) {\r\n        geoRect.name = name;\r\n        geoRect.longitude = geoRect.left + (geoRect.width / 2);\r\n        geoRect.latitude = geoRect.top + (geoRect.height / 2);\r\n\r\n        this.regions[name] = geoRect;\r\n    }\r\n\r\n    private static createRegions() {\r\n        this.regions = {};\r\n        this.addRegion(MapRegion.Australia, { left: 81.5, top: -52.0, width: 98.0, height: 56.0 });\r\n        this.addRegion(MapRegion.Caribbean, { left: -92.9, top: 5.4, width: 35.1, height: 25.8 });\r\n        this.addRegion(MapRegion.Egypt, { left: 19.3, top: 19.9, width: 19.3, height: 13.4 });\r\n        this.addRegion(MapRegion.European, { left: -36.0, top: 31.0, width: 98.0, height: 38.0 });\r\n        this.addRegion(MapRegion.Japan, { left: 122.7, top: 29.4, width: 27.5, height: 17.0 });\r\n        this.addRegion(MapRegion.Hawaii, { left: -161.2, top: 18.5, width: 6.6, height: 4.8 });\r\n        this.addRegion(MapRegion.Poland, { left: 13.0, top: 48.0, width: 11.0, height: 9.0 });\r\n        this.addRegion(MapRegion.SouthAfrica, { left: 9.0, top: -37.1, width: 26.0, height: 17.8 });\r\n        this.addRegion(MapRegion.UnitedStates, { left: -134.5, top: 16.0, width: 70.0, height: 37.0 });\r\n        this.addRegion(MapRegion.UnitedKingdom, { left: -15.0, top: 49.5, width: 22.5, height: 8.0 });\r\n        this.addRegion(MapRegion.Uruguay, { left: -62.1, top: -35.7, width: 10.6, height: 7.0 });\r\n    }\r\n\r\n}\r\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.module.ts","content":"import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppComponent } from \"./app.component\";\r\nimport { MapDisplayImageryBingTiles } from \"./maps/MapDisplayImageryBingTiles/component\";\r\nimport { IgxGeographicMapModule } from \"igniteui-angular-maps\";\n\n\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\r\n\tAppComponent,\r\n\tMapDisplayImageryBingTiles\r\n],\n  imports: [\r\n\tBrowserModule,\r\n\tBrowserAnimationsModule,\r\n\tFormsModule,\r\n\tIgxGeographicMapModule\r\n],\n  providers: [],\n  entryComponents: [],\n  schemas: []\n})\nexport class AppModule {}\n","isMain":true,"fileExtension":"ts","fileHeader":"modules"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.component.html","content":"<app-MapDisplayImageryEsriTiles></app-MapDisplayImageryEsriTiles>"}],"sampleDependencies":"{\"@angular/animations\":\"10.0.14\",\"@angular/common\":\"10.0.14\",\"@angular/compiler\":\"10.0.14\",\"@angular/core\":\"^10.0.14\",\"@angular/forms\":\"10.0.14\",\"@angular/platform-browser\":\"10.0.14\",\"@angular/platform-browser-dynamic\":\"10.0.14\",\"@types/hammerjs\":\"^2.0.35\",\"classlist.js\":\"^1.1.20150312\",\"core-js\":\"^2.6.2\",\"hammerjs\":\"^2.0.8\",\"igniteui-angular\":\"11.1.10\",\"igniteui-angular-charts\":\"11.2.0-beta.0\",\"igniteui-angular-core\":\"11.2.0-beta.0\",\"igniteui-angular-maps\":\"11.2.0-beta.0\",\"intl\":\"^1.2.5\",\"jszip\":\"^3.1.5\",\"rxjs\":\"^6.5.4\",\"tslib\":\"1.13.0\",\"web-animations-js\":\"^2.3.2\",\"zone.js\":\"~0.10.2\"}"}