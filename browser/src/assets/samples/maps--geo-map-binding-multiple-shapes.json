{"sampleFiles":[{"hasRelativeAssetsUrls":false,"path":"src/app/maps/geo-map-binding-multiple-shapes/map-binding-multiple-shapes.component.ts","content":"import { AfterViewInit, Component, TemplateRef, ViewChild } from \"@angular/core\";\r\nimport { IgxShapeDataSource } from \"igniteui-angular-core\";\r\nimport { IgxGeographicMapComponent } from \"igniteui-angular-maps\";\r\nimport { IgxGeographicPolylineSeriesComponent\r\n} from \"igniteui-angular-maps\";\r\nimport { IgxGeographicShapeSeriesComponent } from \"igniteui-angular-maps\";\r\nimport { IgxGeographicSymbolSeriesComponent } from \"igniteui-angular-maps\";\r\n\r\n@Component({\r\n  selector: \"app-map-binding-multiple-shapes\",\r\n  styleUrls: [\"./map-binding-multiple-shapes.component.scss\"],\r\n  templateUrl: \"./map-binding-multiple-shapes.component.html\"\r\n})\r\n\r\nexport class MapBindingMultipleShapesComponent implements AfterViewInit {\r\n\r\n    @ViewChild(\"map\", {static: true})\r\n    public map: IgxGeographicMapComponent;\r\n\r\n    @ViewChild(\"shapeSeries\", {static: true})\r\n    public shapeSeries: IgxGeographicShapeSeriesComponent;\r\n\r\n    @ViewChild(\"polylineSeries\", {static: true})\r\n    public polylineSeries: IgxGeographicPolylineSeriesComponent;\r\n\r\n    @ViewChild(\"symbolSeries\", {static: true})\r\n    public symbolSeries: IgxGeographicSymbolSeriesComponent;\r\n\r\n    @ViewChild(\"polylineTooltip\", {static: true})\r\n    public polylineTooltip: TemplateRef<object>;\r\n\r\n    @ViewChild(\"shapeTooltip\", {static: true})\r\n    public shapeTooltip: TemplateRef<object>;\r\n\r\n    @ViewChild(\"pointTooltip\", {static: true})\r\n    public pointTooltip: TemplateRef<object>;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    public ngAfterViewInit(): void {\r\n\r\n        this.map.windowRect = { left: 0.2, top: 0.1, width: 0.6, height: 0.6 };\r\n        this.map.backgroundContent = null;\r\n\r\n        // loading a shapefile with geographic polygons\r\n        const sdsPolygons = new IgxShapeDataSource();\r\n        sdsPolygons.importCompleted.subscribe(() => this.onPolygonsLoaded(sdsPolygons, \"\"));\r\n        sdsPolygons.shapefileSource = \"https://static.infragistics.com/xplatform/shapes/WorldCountries.shp\";\r\n        sdsPolygons.databaseSource  = \"https://static.infragistics.com/xplatform/shapes/WorldCountries.dbf\";\r\n        sdsPolygons.dataBind();\r\n        // loading a shapefile with geographic polylines at runtime.\r\n        const sdsPolylines = new IgxShapeDataSource();\r\n        sdsPolylines.shapefileSource = \"https://static.infragistics.com/xplatform/shapes/WorldCableRoutes.shp\";\r\n        sdsPolylines.databaseSource  = \"https://static.infragistics.com/xplatform/shapes/WorldCableRoutes.dbf\";\r\n        sdsPolylines.dataBind();\r\n        sdsPolylines.importCompleted.subscribe(() => this.onPolylinesLoaded(sdsPolylines, \"\"));\r\n        // loading a shapefile with geographic points\r\n        const sdsPoints = new IgxShapeDataSource();\r\n        sdsPoints.importCompleted.subscribe(() => this.onPointsLoaded(sdsPoints, \"\"));\r\n        sdsPoints.shapefileSource = \"https://static.infragistics.com/xplatform/shapes/WorldCities.shp\";\r\n        sdsPoints.databaseSource  = \"https://static.infragistics.com/xplatform/shapes/WorldCities.dbf\";\r\n        sdsPoints.dataBind();\r\n    }\r\n\r\n    public onPointsLoaded(sds: IgxShapeDataSource, e: any) {\r\n\r\n        const geoLocations: any[] = [];\r\n        // parsing shapefile data and creating geo-locations\r\n        for (const record of sds.getPointData()) {\r\n            const pop = record.fieldValues.POPULATION;\r\n            if (pop > 1000000) {\r\n                // each shapefile record has just one point\r\n                const location = {\r\n                    city: record.fieldValues.NAME,\r\n                    latitude: record.points[0][0].y,\r\n                    longitude: record.points[0][0].x,\r\n                    population: (pop / 1000000).toFixed(0) + \"M\"\r\n                };\r\n                geoLocations.push(location);\r\n            }\r\n        }\r\n        this.symbolSeries.dataSource = geoLocations;\r\n        this.symbolSeries.markerOutline = \"Red\";\r\n        this.symbolSeries.markerBrush = \"White\";\r\n        this.symbolSeries.tooltipTemplate = this.pointTooltip;\r\n    }\r\n\r\n    public onPolylinesLoaded(sds: IgxShapeDataSource, e: any) {\r\n\r\n        const geoPolylines: any[] = [];\r\n        // parsing shapefile data and creating geo-polygons\r\n        for (const record of sds.getPointData()) {\r\n            // using field/column names from .DBF file\r\n            const route = {\r\n                capacity: record.fieldValues.CapacityG,\r\n                distance: record.fieldValues.DistanceKM,\r\n                name: record.fieldValues.Name,\r\n                points: record.points\r\n            };\r\n            geoPolylines.push(route);\r\n        }\r\n        this.polylineSeries.shapeMemberPath = \"points\";\r\n        this.polylineSeries.shapeFilterResolution = 2.0;\r\n        this.polylineSeries.shapeStrokeThickness = 2;\r\n        this.polylineSeries.shapeStroke = \"rgba(13, 124, 252, 0.9)\";\r\n        this.polylineSeries.tooltipTemplate = this.polylineTooltip;\r\n        this.polylineSeries.dataSource = geoPolylines;\r\n    }\r\n\r\n    public onPolygonsLoaded(sds: IgxShapeDataSource, e: any) {\r\n\r\n        const geoPolygons: any[] = [];\r\n        // parsing shapefile data and creating geo-polygons\r\n        sds.getPointData().forEach((record) => {\r\n            // using field/column names from .DBF file\r\n            const pop = record.fieldValues.POPULATION;\r\n            const country = {\r\n                gdp: record.fieldValues.GDP,\r\n                name: record.fieldValues.NAME,\r\n                points: record.points,\r\n                population: (pop / 1000000).toFixed(1) + \"M\"\r\n            };\r\n            geoPolygons.push(country);\r\n        });\r\n        this.shapeSeries.dataSource = geoPolygons;\r\n        this.shapeSeries.shapeStroke = \"Black\";\r\n        this.shapeSeries.shapeFill = \"rgba(184, 183, 183, 0.5)\";\r\n        this.shapeSeries.tooltipTemplate = this.shapeTooltip;\r\n    }\r\n}\r\n","isMain":true,"fileExtension":"ts","fileHeader":"ts"},{"hasRelativeAssetsUrls":false,"path":"src/app/maps/geo-map-binding-multiple-shapes/map-binding-multiple-shapes.component.html","content":"<div class=\"container sample\">\r\n    <igx-geographic-map #map name=\"map\" width=\"100%\" height=\"100%\"\r\n        zoomable=\"true\" >\r\n        <igx-geographic-shape-series #shapeSeries\r\n            name=\"polygonSeries\"\r\n            shapeMemberPath=\"points\"\r\n            shapeFill=\"rgba(184, 183, 183, 0.5)\"\r\n            shapeStroke=\"Black\"\r\n            shapeStrokeThickness={1.0} >\r\n        </igx-geographic-shape-series>\r\n        <igx-geographic-polyline-series #polylineSeries\r\n            name=\"polylineSeries\"\r\n            shapeMemberPath=\"points\"\r\n            shapeStroke=\"rgba(13, 124, 252, 0.9)\"\r\n            thickness={2.0} >\r\n        </igx-geographic-polyline-series>\r\n        <igx-geographic-symbol-series #symbolSeries\r\n            name=\"symbolSeries\"\r\n            longitudeMemberPath=\"longitude\"\r\n            latitudeMemberPath=\"latitude\"\r\n            markerType=\"Circle\"\r\n            markerOutline=\"Red\"\r\n            markerBrush=\"White\" >\r\n        </igx-geographic-symbol-series>\r\n    </igx-geographic-map>\r\n\r\n    <ng-template let-series=\"series\" let-item=\"item\" #polylineTooltip>\r\n        <div>\r\n            <span>Cable: {{item.name}}</span><br />\r\n            <span>Length: {{item.distance}}</span>\r\n        </div>\r\n    </ng-template>\r\n\r\n    <ng-template let-series=\"series\" let-item=\"item\" #shapeTooltip>\r\n        <div>\r\n            <span>Country: {{item.name}}</span><br />\r\n            <span>Population: {{item.population}}</span>\r\n        </div>\r\n    </ng-template>\r\n\r\n    <ng-template let-series=\"series\" let-item=\"item\" #pointTooltip>\r\n        <div>\r\n            <span [style.color]=\"series.brush\">City: {{item.city}}</span><br />\r\n            <span>Population: {{item.population}}</span>\r\n        </div>\r\n    </ng-template>\r\n</div>\r\n\r\n","isMain":true,"fileExtension":"html","fileHeader":"html"},{"hasRelativeAssetsUrls":false,"path":"src/app/maps/geo-map-binding-multiple-shapes/map-binding-multiple-shapes.component.scss","content":"/* styles are loaded the Shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/\r\n","isMain":true,"fileExtension":"scss","fileHeader":"scss"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.module.ts","content":"import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppComponent } from \"./app.component\";\r\nimport { MapBindingMultipleShapesComponent } from \"./maps/geo-map-binding-multiple-shapes/map-binding-multiple-shapes.component\";\r\nimport { IgxGeographicMapModule } from \"igniteui-angular-maps\";\n\n\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\r\n\tAppComponent,\r\n\tMapBindingMultipleShapesComponent\r\n],\n  imports: [\r\n\tBrowserModule,\r\n\tBrowserAnimationsModule,\r\n\tFormsModule,\r\n\tIgxGeographicMapModule\r\n],\n  providers: [],\n  entryComponents: [],\n  schemas: []\n})\nexport class AppModule {}\n","isMain":true,"fileExtension":"ts","fileHeader":"modules"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.component.html","content":"<app-map-binding-multiple-shapes></app-map-binding-multiple-shapes>"}],"sampleDependencies":"{\"@angular/animations\":\"10.0.14\",\"@angular/common\":\"10.0.14\",\"@angular/compiler\":\"10.0.14\",\"@angular/core\":\"^10.0.14\",\"@angular/forms\":\"10.0.14\",\"@angular/platform-browser\":\"10.0.14\",\"@angular/platform-browser-dynamic\":\"10.0.14\",\"@types/hammerjs\":\"^2.0.35\",\"classlist.js\":\"^1.1.20150312\",\"core-js\":\"^2.6.2\",\"hammerjs\":\"^2.0.8\",\"igniteui-angular\":\"11.1.10\",\"igniteui-angular-charts\":\"11.2.0-beta.0\",\"igniteui-angular-core\":\"11.2.0-beta.0\",\"igniteui-angular-maps\":\"11.2.0-beta.0\",\"intl\":\"^1.2.5\",\"jszip\":\"^3.1.5\",\"rxjs\":\"^6.5.4\",\"tslib\":\"1.13.0\",\"web-animations-js\":\"^2.3.2\",\"zone.js\":\"~0.10.2\"}"}