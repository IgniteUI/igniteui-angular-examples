{"sampleFiles":[{"hasRelativeAssetsUrls":false,"path":"src/app/zoomslider-overview/zoomslider-overview.component.ts","content":"// tslint:disable:max-line-length\r\nimport { AfterViewInit, Component, TemplateRef, ViewChild } from \"@angular/core\";\r\n\r\nimport { IgxBubbleSeriesComponent } from \"igniteui-angular-charts\";\r\nimport { IgxDataChartComponent } from \"igniteui-angular-charts\";\r\nimport { IgxNumericXAxisComponent } from \"igniteui-angular-charts\";\r\nimport { IgxNumericYAxisComponent } from \"igniteui-angular-charts\";\r\nimport { IgxSizeScaleComponent } from \"igniteui-angular-charts\";\r\nimport { IgxZoomSliderComponent } from \"igniteui-angular-charts\";\r\nimport { MarkerType } from \"igniteui-angular-charts\";\r\nimport { IgRect } from \"igniteui-angular-core\";\r\nimport { IgxRectChangedEventArgs } from \"igniteui-angular-core\";\r\n\r\nimport { SampleScatterStats } from \"../SampleScatterStats\";\r\n\r\n@Component({\r\n    providers: [ SampleScatterStats ],\r\n    selector: \"app-zoomslider-overview\",\r\n    styleUrls: [\"./zoomslider-overview.component.scss\"],\r\n    templateUrl: \"./zoomslider-overview.component.html\"\r\n})\r\nexport class ZoomSliderOverviewComponent implements AfterViewInit {\r\n\r\n    public charts: IgxDataChartComponent[] = [];\r\n\r\n    @ViewChild(\"mainChart\", { static: true })\r\n    public mainChart: IgxDataChartComponent = null;\r\n\r\n    @ViewChild(\"zoomChart\", { static: true })\r\n    public zoomChart: IgxDataChartComponent = null;\r\n\r\n    @ViewChild(\"zoomSlider\", { static: true })\r\n    public zoomSlider: IgxZoomSliderComponent = null;\r\n\r\n    @ViewChild(\"seriesTooltip\", { static: true })\r\n    public seriesTooltip: TemplateRef<any>;\r\n\r\n    @ViewChild(\"container\", { static: true })\r\n    public container: HTMLDivElement;\r\n\r\n    public isSynchronizingZoom: boolean = false;\r\n    public lastRect: IgRect = { left: -1, top: -1, width: -1, height: -1};\r\n\r\n    public regions: any[];\r\n    public countriesAll: any[];\r\n    public countriesByRegion: any;\r\n\r\n    constructor(private dataService: SampleScatterStats) {\r\n\r\n        this.regions = [];\r\n        this.countriesAll = SampleScatterStats.getCountries();\r\n        this.countriesByRegion = {};\r\n        for (const country of this.countriesAll) {\r\n            const name = country.region;\r\n\r\n            if (!this.countriesByRegion[name]) {\r\n                this.countriesByRegion[name] = [];\r\n                this.regions.push(name);\r\n                console.log(\"region \" + name);\r\n            }\r\n            this.countriesByRegion[name].push(country);\r\n        }\r\n    }\r\n\r\n    public ngAfterViewInit(): void {\r\n\r\n        if (this.mainChart !== undefined || this.container !== undefined) {\r\n            console.log(\"ngAfterViewInit mainChart\");\r\n\r\n            this.createSeries(this.mainChart);\r\n\r\n            this.mainChart.actualWindowRectChanged.subscribe((e: IgxRectChangedEventArgs) =>\r\n                this.onActualWindowRectChanged(this.mainChart, e)\r\n            );\r\n            this.charts.push(this.mainChart);\r\n        }\r\n\r\n        if (this.zoomChart !== undefined) {\r\n            console.log(\"ngAfterViewInit zoomChart\");\r\n            this.createSeries(this.zoomChart);\r\n        }\r\n\r\n        if (this.zoomSlider !== undefined) {\r\n            console.log(\"ngAfterViewInit zoomSlider\");\r\n            this.zoomSlider.windowRectChanged.subscribe((e: IgxRectChangedEventArgs) =>\r\n                this.onZoomSliderWindowChanged(this.zoomSlider, e)\r\n            );\r\n            this.zoomSlider.resolvingAxisValue.subscribe((e: IgxRectChangedEventArgs) =>\r\n                this.onZoomSliderResolveAxisValue(this.zoomSlider, e)\r\n            );\r\n        }\r\n\r\n        if (this.mainChart !== undefined ||\r\n            this.container !== undefined ||\r\n            this.zoomChart !== undefined ||\r\n            this.zoomSlider !== undefined) {\r\n\r\n            this.mainChart.gridAreaRectChanged.subscribe((e: IgxRectChangedEventArgs) =>\r\n                this.onGridAreaRectChanged(this.mainChart, e)\r\n            );\r\n        }\r\n    }\r\n\r\n    public onActualWindowRectChanged(chart: IgxDataChartComponent, args: IgxRectChangedEventArgs) {\r\n\r\n        if (!this.isSynchronizingZoom) {\r\n            this.syncZooms(chart);\r\n        }\r\n    }\r\n\r\n    public onZoomSliderWindowChanged(slider: IgxZoomSliderComponent, args: IgxRectChangedEventArgs) {\r\n        if (!this.isSynchronizingZoom) {\r\n            this.syncZooms(slider);\r\n        }\r\n    }\r\n\r\n    public syncZooms(sender: any) {\r\n        window.setTimeout(() => {\r\n            try {\r\n                this.isSynchronizingZoom = true;\r\n\r\n                const zoomWindow = this.zoomSlider.windowRect;\r\n                const datanChart = sender as IgxDataChartComponent;\r\n                let chartWindow: any;\r\n                if (sender === this.zoomSlider) {\r\n                    chartWindow = this.mainChart.actualWindowRect;\r\n                } else {\r\n                    chartWindow = datanChart.actualWindowRect;\r\n                }\r\n                // console.log(\"chart \" + this.getRect(this.mainChart.actualWindowRect));\r\n                // console.log(\"zoom   \" + this.getRect(zoomWindow));\r\n\r\n                if (sender === this.zoomSlider) {\r\n                    this.charts.map((chart) => {\r\n                        this.updateChartZoom(chart, {\r\n                            top: chartWindow.top,\r\n                            left: zoomWindow.left,\r\n                            width: zoomWindow.width,\r\n                            height: chartWindow.height });\r\n                    });\r\n                } else {\r\n                    this.zoomSlider.windowRect = {\r\n                        top: zoomWindow.top,\r\n                        left: chartWindow.left,\r\n                        width: chartWindow.width,\r\n                        height: zoomWindow.height };\r\n\r\n                    this.charts.map((chart) => {\r\n                        this.updateChartZoom(chart, {\r\n                            top: zoomWindow.top,\r\n                            left: chartWindow.left,\r\n                            width: chartWindow.width,\r\n                            height: zoomWindow.height });\r\n                    });\r\n                }\r\n            } finally {\r\n                this.isSynchronizingZoom = false;\r\n            }\r\n        }, 0);\r\n    }\r\n\r\n    public onZoomSliderResolveAxisValue(slider: IgxZoomSliderComponent, args: any) {\r\n\r\n        console.log(\"onZoomSliderResolveAxisValue\");\r\n        const index = Math.round(args.position * (this.countriesAll.length - 1));\r\n        const item = this.countriesAll[index];\r\n        if (item) {\r\n            args.value = SampleScatterStats.abbreviate(item.population);\r\n        }\r\n    }\r\n\r\n    public onGridAreaRectChanged(chart: IgxDataChartComponent, e: any) {\r\n        const newRect = e.args.newRect;\r\n        if (!this.container) {\r\n            return;\r\n        }\r\n\r\n        if (newRect.left !== this.lastRect.left ||\r\n            newRect.top !== this.lastRect.top ||\r\n            newRect.width !== this.lastRect.width ||\r\n            newRect.height !== this.lastRect.height) {\r\n\r\n            let rightMargin = this.mainChart.rightMargin;\r\n            if (isNaN(rightMargin)) {\r\n                rightMargin = this.mainChart.autoMarginWidth;\r\n            }\r\n            const width = newRect.left + newRect.width + rightMargin;\r\n\r\n            const right = newRect.left + newRect.width;\r\n            const insetLeft = newRect.left;\r\n            const insetRight = width - right;\r\n            this.lastRect = newRect;\r\n            this.zoomSlider.startInset = insetLeft - this.zoomSlider.trackStartInset;\r\n            this.zoomSlider.endInset = insetRight - this.zoomSlider.trackEndInset;\r\n\r\n            if (this.zoomSlider.endInset < 0) {\r\n                const inset = this.zoomSlider.endInset;\r\n                this.zoomSlider.endInset = 0;\r\n                this.charts.map(c => c.rightMargin += (inset * -1.0));\r\n            }\r\n            if (this.zoomSlider.startInset < 0) {\r\n                const inset = this.zoomSlider.startInset;\r\n                this.zoomSlider.startInset = 0;\r\n                this.charts.map(c => c.leftMargin += (inset * -1.0));\r\n            }\r\n\r\n            this.zoomChart.leftMargin = insetLeft;\r\n            this.zoomChart.rightMargin = insetRight;\r\n            this.zoomChart.bottomMargin = this.zoomSlider.barExtent;\r\n        }\r\n    }\r\n\r\n    public updateChartZoom(chart: IgxDataChartComponent, zoom: IgRect) {\r\n\r\n        const yAxis = chart.actualAxes.filter(a => a.isNumeric)[0] as IgxNumericYAxisComponent;\r\n\r\n        let indexEnd = Math.ceil((this.countriesAll.length - 1) * (zoom.left + zoom.width));\r\n        let indexStart = Math.floor((this.countriesAll.length - 1) * zoom.left);\r\n\r\n        let min = Number.MAX_VALUE;\r\n        let max = Number.MIN_VALUE;\r\n\r\n        if (indexStart < 0) {\r\n            indexStart = 0;\r\n        }\r\n\r\n        indexEnd = Math.min(indexEnd, this.countriesAll.length - 1);\r\n        for (let i = indexStart; i <= indexEnd; i++) {\r\n            min = Math.min(min, this.countriesAll[i].gdpTotal);\r\n            max = Math.max(max, this.countriesAll[i].gdpTotal);\r\n        }\r\n\r\n        // console.log(\"data min \" + min + \" max \" + max);\r\n        // console.log(\"axis min \" + yAxis.actualMinimumValue + \" max \" + yAxis.actualMaximumValue);\r\n        const yMin = (min - yAxis.actualMinimumValue) / (yAxis.actualMaximumValue - yAxis.actualMinimumValue);\r\n        const yMax = (max - yAxis.actualMinimumValue) / (yAxis.actualMaximumValue - yAxis.actualMinimumValue);\r\n\r\n        const newZoom = {\r\n            left: zoom.left,\r\n            width: zoom.width,\r\n            top: (1.0 - yMax),\r\n            height: (yMax - yMin)\r\n        };\r\n        // console.log(\"updateChartZoom \" + this.getRect(newZoom));\r\n        chart.windowRect = newZoom;\r\n    }\r\n\r\n    public createSeries(chart: IgxDataChartComponent) {\r\n        const sizeScale1 = new IgxSizeScaleComponent();\r\n        sizeScale1.minimumValue = 15;\r\n        sizeScale1.maximumValue = 40;\r\n        const sizeScale2 = new IgxSizeScaleComponent();\r\n        sizeScale2.minimumValue = 5;\r\n        sizeScale2.maximumValue = 15;\r\n\r\n        const xAxis = chart.actualAxes.filter(a => a.isNumeric)[0] as IgxNumericXAxisComponent;\r\n        const yAxis = chart.actualAxes.filter(a => a.isNumeric)[1] as IgxNumericYAxisComponent;\r\n\r\n        const series1 = new IgxBubbleSeriesComponent();\r\n        series1.title = \"High Income Country\";\r\n        series1.dataSource = SampleScatterStats.getCountriesWithHighIncome();\r\n        series1.showDefaultTooltip = false;\r\n        series1.xMemberPath = \"population\";\r\n        series1.yMemberPath = \"gdpTotal\";\r\n        series1.radiusMemberPath = \"gdpPerCapita\";\r\n        series1.radiusScale = sizeScale1;\r\n        series1.markerType = MarkerType.Circle;\r\n        series1.xAxis = xAxis;\r\n        series1.yAxis = yAxis;\r\n        series1.tooltipTemplate = this.seriesTooltip;\r\n\r\n        const series2 = new IgxBubbleSeriesComponent();\r\n        series2.title = \"Low Income Country\";\r\n        series2.dataSource = SampleScatterStats.getCountriesWithLowIncome();\r\n        series2.showDefaultTooltip = false;\r\n        series2.xMemberPath = \"population\";\r\n        series2.yMemberPath = \"gdpTotal\";\r\n        series2.radiusMemberPath = \"gdpPerCapita\";\r\n        series2.radiusScale = sizeScale2;\r\n        series2.markerType = MarkerType.Circle;\r\n        series2.xAxis = xAxis;\r\n        series2.yAxis = yAxis;\r\n        series2.tooltipTemplate = this.seriesTooltip;\r\n\r\n        chart.series.add(series1);\r\n        chart.series.add(series2);\r\n\r\n        // chart.markerOutlines = [ \"#7446B9\", \"#9FB328\", \"#2E9CA6\", \"#525251\", \"#dcbf3f\", \"#F96232\"];\r\n        // chart.brushes = [ \"#7446B9\", \"#9FB328\", \"#2E9CA6\", \"#525251\", \"#dcbf3f\", \"#F96232\"];\r\n\r\n    }\r\n\r\n    public getRect(rect: any) {\r\n        const str = \"T \" + rect.top.toFixed(1) + \" L \" + rect.left.toFixed(1)\r\n        + \" W \" + rect.width.toFixed(1)\r\n        + \" H \" + rect.height.toFixed(1);\r\n        return str;\r\n    }\r\n}\r\n","isMain":true,"fileExtension":"ts","fileHeader":"ts"},{"hasRelativeAssetsUrls":false,"path":"src/app/zoomslider-overview/zoomslider-overview.component.html","content":"<div #container class=\"container\"\r\n    width=\"100%\" height=\"calc(100% - 200px)\">\r\n\r\n    <igx-data-chart #mainChart name=\"mainChart\"\r\n    width=\"100%\"\r\n    height=\"calc(100% - 200px)\"\r\n    isHorizontalZoomEnabled=\"true\"\r\n    isVerticalZoomEnabled=\"false\"\r\n    [dataSource]=\"countriesAll\"\r\n    chartTitle=\"World GDP vs Population\"\r\n    titleTopMargin=\"10\">\r\n\r\n        <igx-numeric-x-axis #mainXAxis\r\n            isLogarithmic=true\r\n            abbreviateLargeNumbers=true\r\n            title=\"Population\">\r\n        </igx-numeric-x-axis>\r\n        <igx-numeric-y-axis #mainYAxis\r\n            isLogarithmic=true\r\n            abbreviateLargeNumbers=true\r\n            titleLeftMargin=\"10\"\r\n            title=\"Total GDP ($)\">\r\n        </igx-numeric-y-axis>\r\n    </igx-data-chart>\r\n\r\n    <div  class=\"zoomPane\" width=\"100%\" height=\"160px\" >\r\n        <div class=\"zoomChart\" width=\"100%\" height=\"160px\"  >\r\n            <igx-data-chart\r\n            #zoomChart name=\"zoomChart\"\r\n            width=\"100%\"\r\n            height=\"160px\"\r\n            isHorizontalZoomEnabled=\"true\"\r\n            isVerticalZoomEnabled=\"true\"\r\n            [dataSource]=\"countriesAll\">\r\n\r\n                <igx-numeric-x-axis #zoomXAxis\r\n                    isLogarithmic=true\r\n                    abbreviateLargeNumbers=true\r\n                    labelVisibility=\"collapsed\" >\r\n                </igx-numeric-x-axis>\r\n                <igx-numeric-y-axis #zoomYAxis\r\n                    isLogarithmic=true\r\n                    abbreviateLargeNumbers=true\r\n                    labelVisibility=\"collapsed\" >\r\n                </igx-numeric-y-axis>\r\n\r\n            </igx-data-chart>\r\n        </div>\r\n        <div class=\"zoomSlider\" width=\"100%\" height=\"160px\" >\r\n\r\n            <igx-zoom-slider\r\n            #zoomSlider name=\"zoomSlider\"\r\n            width=\"100%\"\r\n            height=\"160px\" >\r\n            </igx-zoom-slider>\r\n        </div>\r\n    </div>\r\n\r\n    <ng-template let-series=\"series\" let-item=\"item\" #seriesTooltip>\r\n        <div>\r\n            <span>Region: {{item.region}}<br/></span>\r\n            <span>Country: {{item.name}}<br/></span>\r\n            <span>Population: {{item.getPopulation()}}<br/></span>\r\n            <span>GDP Total: {{item.getGdpTotal()}}<br/></span>\r\n            <span [style.color]=\"series.actualBrush\">GDP Per Capita: {{item.getGdpPerCapita()}}<br/></span>\r\n            <span [style.color]=\"series.actualBrush\">{{series.title}}<br/></span>\r\n\r\n        </div>\r\n    </ng-template>\r\n</div>\r\n","isMain":true,"fileExtension":"html","fileHeader":"html"},{"hasRelativeAssetsUrls":false,"path":"src/app/zoomslider-overview/zoomslider-overview.component.scss","content":".container {\r\n    display: block;\r\n    height: 100%;\r\n}\r\n\r\n.zoomPane {\r\n    position: relative;\r\n    height: 160px;\r\n}\r\n\r\n.zoomChart {\r\n    width: 100%;\r\n    position: absolute;\r\n    top: 0px;\r\n    left: 0px;\r\n}\r\n\r\n.zoomSlider {\r\n    width: 100%;\r\n    position: absolute;\r\n    top: 0px;\r\n    left: 0px;\r\n}\r\n","isMain":true,"fileExtension":"scss","fileHeader":"scss"},{"hasRelativeAssetsUrls":false,"path":"src/app/SampleScatterStats.ts","content":"import { Injectable } from \"@angular/core\";\r\n\r\n@Injectable()\r\nexport class SampleScatterStats {\r\n\r\n    public static countries: Country[];\r\n\r\n    public static getCountries(count?: number): any[] {\r\n        if (this.countries === undefined) {\r\n            this.countries = this.initData();\r\n        }\r\n        if (count === undefined) {\r\n            count = 1000;\r\n        }\r\n\r\n        const items: Country[] = [];\r\n        for (let i = 0; i < this.countries.length; i++) {\r\n            const country = this.countries[i];\r\n            if (i < count) {\r\n                items.push(country);\r\n            }\r\n        }\r\n        // items = items.sort(this.sortByPopDescending);\r\n        return items;\r\n    }\r\n\r\n    public static getCountriesWithHighIncome(): any[] {\r\n        if (this.countries === undefined) {\r\n            this.countries = this.initData();\r\n        }\r\n        const items: any[] = [];\r\n        for (const country of this.countries) {\r\n            if (country.gdpPerCapita >= 10000) {\r\n                items.push(country);\r\n            }\r\n        }\r\n        return items;\r\n    }\r\n\r\n    public static getCountriesWithLowIncome(): any[] {\r\n        if (this.countries === undefined) {\r\n            this.countries = this.initData();\r\n        }\r\n        const items: any[] = [];\r\n        for (const country of this.countries) {\r\n            if (country.gdpPerCapita < 10000) {\r\n                items.push(country);\r\n            }\r\n        }\r\n        return items;\r\n    }\r\n\r\n    public static getCountriesWithLargePop(): any[] {\r\n        if (this.countries === undefined) {\r\n            this.countries = this.initData();\r\n        }\r\n        const items: any[] = [];\r\n        for (const country of this.countries) {\r\n            if (country.population >= 10000000) {\r\n                items.push(country);\r\n            }\r\n        }\r\n        return items;\r\n    }\r\n\r\n    public static getCountriesWithSmallPop(): any[] {\r\n        if (this.countries === undefined) {\r\n            this.countries = this.initData();\r\n        }\r\n        const items: any[] = [];\r\n        for (const country of this.countries) {\r\n            if (country.population < 10000000) {\r\n                items.push(country);\r\n            }\r\n        }\r\n        return items;\r\n    }\r\n\r\n    public static sortByPopDescending(a: Country, b: Country) {\r\n        if (a.population > b.population) { return 1; }\r\n        if (a.population < b.population) { return -1; }\r\n        return 0;\r\n    }\r\n\r\n    public static sortByPopAscending(a: Country, b: Country) {\r\n        if (a.population > b.population) {return -1; }\r\n        if (a.population < b.population) {return 1; }\r\n        return 0;\r\n    }\r\n\r\n    public static sortByGdpAscending(a: Country, b: Country) {\r\n        if (a.gdpPerCapita > b.gdpPerCapita) {return -1; }\r\n        if (a.gdpPerCapita < b.gdpPerCapita) {return 1; }\r\n        return 0;\r\n    }\r\n\r\n    public static sortByGdpDescending(a: Country, b: Country) {\r\n        if (a.gdpPerCapita > b.gdpPerCapita) {return 1; }\r\n        if (a.gdpPerCapita < b.gdpPerCapita) {return -1; }\r\n        return 0;\r\n    }\r\n\r\n    public static sortByDepDescending(a: Country, b: Country) {\r\n        if (a.dptPerCapita > b.dptPerCapita) {return 1; }\r\n        if (a.dptPerCapita < b.dptPerCapita) {return -1; }\r\n        return 0;\r\n    }\r\n\r\n    public static sortByDptAscending(a: Country, b: Country) {\r\n        if (a.dptPerCapita > b.dptPerCapita) {return -1; }\r\n        if (a.dptPerCapita < b.dptPerCapita) {return 1; }\r\n        return 0;\r\n    }\r\n\r\n    public static initData(): Country[] {\r\n\r\n        let data: Country[] = [];\r\n        // Code, Population, GDP per Capita, Debt per Capita, Mobile Phones (per 100 people), Name, Region\r\n        data.push(new Country(\"AFG\", 29824536, 688, 92, 46, \"Afghanistan\", \"Asia\"));\r\n        data.push(new Country(\"ALB\", 2801681, 4406, 882, 86, \"Albania\", \"Europe\"));\r\n        data.push(new Country(\"DZA\", 38481705, 5310, 115, 88, \"Algeria\", \"Africa\"));\r\n        data.push(new Country(\"ADO\", 78360, 40365, 15212, 84, \"Andorra\", \"Europe\"));\r\n        data.push(new Country(\"AGO\", 20820525, 5539, 944, 48, \"Angola\", \"Africa\"));\r\n        data.push(new Country(\"ATG\", 89069, 13406, 4388, 193, \"Antigua and Barbuda\", \"North America\"));\r\n        data.push(new Country(\"ARG\", 41086927, 14680, 7759, 141, \"Argentina\", \"South America\"));\r\n        data.push(new Country(\"ARM\", 2969081, 3354, 1584, 130, \"Armenia\", \"Asia\"));\r\n        data.push(new Country(\"ABW\", 102384, 0, 4935, 130, \"Aruba\", \"South America\"));\r\n        data.push(new Country(\"AUS\", 22723900, 67436, 52596, 100, \"Australia\", \"Oceania\"));\r\n        data.push(new Country(\"AUT\", 8429991, 46792, 90128, 146, \"Austria\", \"Europe\"));\r\n        data.push(new Country(\"AZE\", 9295784, 7394, 8513, 100, \"Azerbaijan\", \"Asia\"));\r\n        data.push(new Country(\"BHS\", 371960, 21908, 1067, 119, \"Bahamas\", \"North America\"));\r\n        data.push(new Country(\"BHR\", 1317827, 23040, 13261, 125, \"Bahrain\", \"Asia\"));\r\n        data.push(new Country(\"BGD\", 154695368, 750, 149, 45, \"Bangladesh\", \"Asia\"));\r\n        data.push(new Country(\"BRB\", 283221, 14917, 2456, 125, \"Barbados\", \"North America\"));\r\n        data.push(new Country(\"BLR\", 9464000, 6722, 2629, 109, \"Belarus\", \"Europe\"));\r\n        data.push(new Country(\"BEL\", 11128246, 43396, 113603, 111, \"Belgium\", \"Europe\"));\r\n        data.push(new Country(\"BLZ\", 324060, 4852, 3079, 63, \"Belize\", \"North America\"));\r\n        data.push(new Country(\"BEN\", 10050702, 751, 308, 74, \"Benin\", \"Asia\"));\r\n        data.push(new Country(\"BMU\", 64798, 84471, 2575, 136, \"Bermuda\", \"North America\"));\r\n        data.push(new Country(\"BTN\", 741822, 2509, 1193, 55, \"Bhutan\", \"Asia\"));\r\n        data.push(new Country(\"BOL\", 10496285, 2576, 275, 71, \"Bolivia\", \"South America\"));\r\n        data.push(new Country(\"BIH\", 3833916, 4396, 2052, 81, \"Bosnia and Herzegovina\", \"Europe\"));\r\n        data.push(new Country(\"BWA\", 2003910, 7255, 1208, 120, \"Botswana\", \"Africa\"));\r\n        data.push(new Country(\"BRA\", 198656019, 11320, 1608, 101, \"Brazil\", \"South America\"));\r\n        data.push(new Country(\"BRN\", 412238, 41127, 0, 109, \"Brunei\", \"Oceania\"));\r\n        data.push(new Country(\"BGR\", 7305888, 7022, 6261, 138, \"Bulgaria\", \"Europe\"));\r\n        data.push(new Country(\"BFA\", 16460141, 652, 136, 37, \"Burkina Faso\", \"Africa\"));\r\n        data.push(new Country(\"BDI\", 9849569, 251, 167, 18, \"Burundi\", \"Africa\"));\r\n        data.push(new Country(\"CPV\", 494401, 3554, 714, 76, \"Cabo Verde\", \"Africa\"));\r\n        data.push(new Country(\"KHM\", 14864646, 945, 304, 57, \"Cambodia\", \"Asia\"));\r\n        data.push(new Country(\"CMR\", 21699631, 1220, 164, 42, \"Cameroon\", \"Africa\"));\r\n        data.push(new Country(\"CAN\", 34754312, 52409, 29625, 76, \"Canada\", \"North America\"));\r\n        data.push(new Country(\"CYM\", 57570, 0, 2078, 181, \"Cayman Islands\", \"North America\"));\r\n        data.push(new Country(\"CAF\", 4525209, 479, 270, 23, \"Central African Republic\", \"Africa\"));\r\n        data.push(new Country(\"TCD\", 12448175, 1035, 160, 25, \"Chad\", \"Africa\"));\r\n        data.push(new Country(\"CHL\", 17464814, 15245, 5867, 116, \"Chile\", \"South America\"));\r\n        data.push(new Country(\"CHN\", 1350695000, 6093, 2221, 63, \"China\", \"Asia\"));\r\n        data.push(new Country(\"COL\", 47704427, 7763, 1269, 96, \"Colombia\", \"South America\"));\r\n        data.push(new Country(\"COM\", 717503, 831, 430, 24, \"Comoros\", \"Africa\"));\r\n        data.push(new Country(\"ZAR\", 65705093, 418, 197, 19, \"Congo Dem. Rep.\", \"Africa\"));\r\n        data.push(new Country(\"COG\", 4337051, 3154, 1722, 90, \"Congo Rep.\", \"Africa\"));\r\n        data.push(new Country(\"CRI\", 4805295, 9443, 1874, 67, \"Costa Rica\", \"North America\"));\r\n        data.push(new Country(\"CIV\", 19839750, 1244, 527, 82, \"Cote d'Ivoire\", \"Africa\"));\r\n        data.push(new Country(\"HRV\", 4267558, 13159, 13519, 114, \"Croatia\", \"Europe\"));\r\n        data.push(new Country(\"CUB\", 11270957, 0, 1780, 9, \"Cuba\", \"North America\"));\r\n        data.push(new Country(\"CUW\", 152056, 0, 0, 138, \"Curacao\", \"North America\"));\r\n        data.push(new Country(\"CYP\", 1128994, 26352, 37812, 94, \"Cyprus\", \"Europe\"));\r\n        data.push(new Country(\"CZE\", 10510785, 18690, 8260, 123, \"Czech Republic\", \"Europe\"));\r\n        data.push(new Country(\"DNK\", 5591572, 56364, 101084, 116, \"Denmark\", \"Europe\"));\r\n        data.push(new Country(\"DJI\", 859652, 1575, 573, 20, \"Djibouti\", \"Africa\"));\r\n        data.push(new Country(\"DMA\", 71684, 6913, 3000, 148, \"Dominica\", \"North America\"));\r\n        data.push(new Country(\"DOM\", 10276621, 5733, 1162, 89, \"Dominican Republic\", \"North America\"));\r\n        data.push(new Country(\"ECU\", 15492264, 5425, 995, 99, \"Ecuador\", \"South America\"));\r\n        data.push(new Country(\"EGY\", 80721874, 3256, 391, 91, \"Egypt\", \"Africa\"));\r\n        data.push(new Country(\"SLV\", 6297394, 3782, 1953, 124, \"El Salvador\", \"North America\"));\r\n        data.push(new Country(\"GNQ\", 736296, 22391, 634, 57, \"Equatorial Guinea\", \"Africa\"));\r\n        data.push(new Country(\"ERI\", 6130922, 504, 195, 3, \"Eritrea\", \"Africa\"));\r\n        data.push(new Country(\"EST\", 1325016, 16887, 16944, 127, \"Estonia\", \"Europe\"));\r\n        data.push(new Country(\"ETH\", 91728849, 467, 51, 8, \"Ethiopia\", \"Africa\"));\r\n        data.push(new Country(\"EUU\", 505640311, 32917, 0, 118, \"Euroean Union\", \"Europe\"));\r\n        data.push(new Country(\"FRO\", 49506, 0, 0, 120, \"Faeroe Islands\", \"Europe\"));\r\n        data.push(new Country(\"FJI\", 874742, 4613, 150, 81, \"Fiji\", \"Oceania\"));\r\n        data.push(new Country(\"FIN\", 5413971, 45649, 68960, 156, \"Finland\", \"Europe\"));\r\n        data.push(new Country(\"FRA\", 65676758, 39759, 74619, 91, \"France\", \"Europe\"));\r\n        data.push(new Country(\"GAB\", 1632572, 10930, 1587, 103, \"Gabon\", \"Africa\"));\r\n        data.push(new Country(\"GMB\", 1791225, 510, 306, 88, \"Gambia\", \"Africa\"));\r\n        data.push(new Country(\"GEO\", 4490700, 3529, 1940, 91, \"Georgia\", \"Asia\"));\r\n        data.push(new Country(\"DEU\", 80425823, 42598, 57755, 106, \"Germany\", \"Europe\"));\r\n        data.push(new Country(\"GHA\", 25366462, 1646, 274, 72, \"Ghana\", \"Africa\"));\r\n        data.push(new Country(\"GRC\", 11092771, 22395, 47636, 111, \"Greece\", \"Europe\"));\r\n        data.push(new Country(\"GRL\", 56810, 0, 1035, 101, \"Greenland\", \"Europe\"));\r\n        data.push(new Country(\"GRD\", 105483, 7598, 3402, 116, \"Grenada\", \"North America\"));\r\n        data.push(new Country(\"GTM\", 15082831, 3341, 1216, 126, \"Guatemala\", \"North America\"));\r\n        data.push(new Country(\"GIN\", 11451273, 493, 305, 37, \"Guinea\", \"Asia\"));\r\n        data.push(new Country(\"GNB\", 1663558, 494, 722, 43, \"Guinea-Bissau\", \"Asia\"));\r\n        data.push(new Country(\"GUY\", 795369, 3585, 1049, 71, \"Guyana\", \"South America\"));\r\n        data.push(new Country(\"HTI\", 10173775, 776, 36, 40, \"Haiti\", \"North America\"));\r\n        data.push(new Country(\"HND\", 7935846, 2339, 465, 125, \"Honduras\", \"North America\"));\r\n        data.push(new Country(\"HKG\", 7154600, 36708, 105420, 196, \"Hong Kong\", \"Asia\"));\r\n        data.push(new Country(\"HUN\", 9920362, 12560, 14821, 120, \"Hungary\", \"Europe\"));\r\n        data.push(new Country(\"ISL\", 320716, 42362, 362942, 107, \"Iceland\", \"Europe\"));\r\n        data.push(new Country(\"IND\", 1236686732, 1503, 240, 62, \"India\", \"Asia\"));\r\n        data.push(new Country(\"IDN\", 246864191, 3551, 837, 88, \"Indonesia\", \"Asia\"));\r\n        data.push(new Country(\"IRN\", 76424443, 6578, 170, 73, \"Iran\", \"Asia\"));\r\n        data.push(new Country(\"IRQ\", 32578209, 6625, 1641, 75, \"Iraq\", \"Asia\"));\r\n        data.push(new Country(\"IRL\", 4586897, 45922, 512083, 105, \"Ireland\", \"Europe\"));\r\n        data.push(new Country(\"ISR\", 7910500, 32567, 12070, 123, \"Israel\", \"Asia\"));\r\n        data.push(new Country(\"ITA\", 59539717, 33814, 36841, 155, \"Italy\", \"Europe\"));\r\n        data.push(new Country(\"JAM\", 2707805, 5464, 4660, 116, \"Jamaica\", \"North America\"));\r\n        data.push(new Country(\"JPN\", 127561489, 46548, 24000, 97, \"Japan\", \"Asia\"));\r\n        data.push(new Country(\"JOR\", 6318000, 4909, 903, 103, \"Jordan\", \"Asia\"));\r\n        data.push(new Country(\"KAZ\", 16791425, 12120, 6060, 122, \"Kazakhstan\", \"Asia\"));\r\n        data.push(new Country(\"KEN\", 43178141, 933, 200, 61, \"Kenya\", \"Africa\"));\r\n        data.push(new Country(\"KIR\", 100786, 1736, 120, 11, \"Kiribati\", \"Oceania\"));\r\n        data.push(new Country(\"PRK\", 24763188, 0, 544, 2, \"Korea North\", \"Asia\"));\r\n        data.push(new Country(\"KOR\", 50004441, 24454, 7567, 105, \"Korea South\", \"Asia\"));\r\n        data.push(new Country(\"KSV\", 1807106, 3567, 0, 0, \"Kosovo\", \"Europe\"));\r\n        data.push(new Country(\"KWT\", 3250496, 56367, 15754, 133, \"Kuwait\", \"Asia\"));\r\n        data.push(new Country(\"KGZ\", 5607200, 1178, 699, 99, \"Kyrgyzstan\", \"Asia\"));\r\n        data.push(new Country(\"LAO\", 6645827, 1412, 900, 63, \"Laos\", \"Asia\"));\r\n        data.push(new Country(\"LVA\", 2034319, 13947, 18527, 110, \"Latvia\", \"Europe\"));\r\n        data.push(new Country(\"LBN\", 4424888, 9764, 8815, 66, \"Lebanon\", \"Asia\"));\r\n        data.push(new Country(\"LSO\", 2051545, 1135, 255, 49, \"Lesotho\", \"Africa\"));\r\n        data.push(new Country(\"LBR\", 4190435, 414, 65, 40, \"Liberia\", \"Africa\"));\r\n        data.push(new Country(\"LBY\", 6154623, 13303, 972, 180, \"Libya\", \"Africa\"));\r\n        data.push(new Country(\"LIE\", 36656, 0, 0, 98, \"Liechtenstein\", \"Europe\"));\r\n        data.push(new Country(\"LTU\", 2987773, 14172, 9995, 159, \"Lithuania\", \"Europe\"));\r\n        data.push(new Country(\"LUX\", 530946, 103859, 3696467, 143, \"Luxembourg\", \"Europe\"));\r\n        data.push(new Country(\"MAC\", 556783, 77196, 0, 210, \"Macao\", \"Asia\"));\r\n        data.push(new Country(\"MKD\", 2105575, 4548, 2668, 102, \"Macedonia\", \"Europe\"));\r\n        data.push(new Country(\"MDG\", 22293914, 443, 140, 37, \"Madagascar\", \"Africa\"));\r\n        data.push(new Country(\"MWI\", 15906483, 267, 77, 21, \"Malawi\", \"Africa\"));\r\n        data.push(new Country(\"MYS\", 29239927, 10432, 2570, 120, \"Malaysia\", \"Asia\"));\r\n        data.push(new Country(\"MDV\", 338442, 6244, 2947, 152, \"Maldives\", \"Oceania\"));\r\n        data.push(new Country(\"MLI\", 14853572, 696, 254, 53, \"Mali\", \"Africa\"));\r\n        data.push(new Country(\"MLT\", 419455, 20839, 14233, 107, \"Malta\", \"Europe\"));\r\n        data.push(new Country(\"MHL\", 52555, 3292, 1377, 0, \"Marshall Islands\", \"Oceania\"));\r\n        data.push(new Country(\"MRT\", 3796141, 1043, 831, 77, \"Mauritania\", \"Africa\"));\r\n        data.push(new Country(\"MUS\", 1291167, 8862, 3937, 97, \"Mauritius\", \"Africa\"));\r\n        data.push(new Country(\"MEX\", 120847477, 9818, 1956, 78, \"Mexico\", \"North America\"));\r\n        data.push(new Country(\"FSM\", 103395, 3155, 556, 27, \"Micronesia\", \"Oceania\"));\r\n        data.push(new Country(\"MDA\", 3559519, 2047, 1296, 71, \"Moldova\", \"Europe\"));\r\n        data.push(new Country(\"MCO\", 37579, 0, 471428, 64, \"Monaco\", \"Europe\"));\r\n        data.push(new Country(\"MNG\", 2796484, 3691, 686, 93, \"Mongolia\", \"Asia\"));\r\n        data.push(new Country(\"MNE\", 621081, 6514, 939, 189, \"Montenegro\", \"Europe\"));\r\n        data.push(new Country(\"MAR\", 32521143, 2902, 712, 101, \"Morocco\", \"Africa\"));\r\n        data.push(new Country(\"MOZ\", 25203395, 570, 231, 30, \"Mozambique\", \"Africa\"));\r\n        data.push(new Country(\"MMR\", 52797319, 0, 117, 1, \"Myanmar\", \"Asia\"));\r\n        data.push(new Country(\"NAM\", 2259393, 5931, 1131, 90, \"Namibia\", \"Africa\"));\r\n        data.push(new Country(\"NPL\", 27474377, 699, 161, 34, \"Nepal\", \"Asia\"));\r\n        data.push(new Country(\"NLD\", 16754962, 45961, 226503, 115, \"Netherlands\", \"Europe\"));\r\n        data.push(new Country(\"NCL\", 258000, 0, 385, 90, \"New Caledonia\", \"Oceania\"));\r\n        data.push(new Country(\"NZL\", 4433000, 38680, 52300, 108, \"New Zealand\", \"Oceania\"));\r\n        data.push(new Country(\"NIC\", 5991733, 1777, 693, 68, \"Nicaragua\", \"North America\"));\r\n        data.push(new Country(\"NER\", 17157042, 395, 178, 23, \"Niger\", \"Africa\"));\r\n        data.push(new Country(\"NGA\", 168833776, 2722, 71, 55, \"Nigeria\", \"Africa\"));\r\n        data.push(new Country(\"NAC\", 348692795, 51826, 0, 90, \"North America\", \"North America\"));\r\n        data.push(new Country(\"NOR\", 5018573, 99636, 131220, 114, \"Norway\", \"Europe\"));\r\n        data.push(new Country(\"OMN\", 3314001, 23624, 2962, 164, \"Oman\", \"Asia\"));\r\n        data.push(new Country(\"PAK\", 179160111, 1255, 366, 57, \"Pakistan\", \"Asia\"));\r\n        data.push(new Country(\"PLW\", 20754, 11202, 0, 71, \"Palau\", \"Oceania\"));\r\n        data.push(new Country(\"PAN\", 3802281, 9982, 3927, 181, \"Panama\", \"North America\"));\r\n        data.push(new Country(\"PNG\", 7167010, 2184, 238, 28, \"Papua New Guinea\", \"Oceania\"));\r\n        data.push(new Country(\"PRY\", 6687361, 3680, 382, 92, \"Paraguay\", \"South America\"));\r\n        data.push(new Country(\"PER\", 29987800, 6424, 1126, 100, \"Peru\", \"South America\"));\r\n        data.push(new Country(\"PHL\", 96706764, 2587, 636, 89, \"Philippines\", \"Asia\"));\r\n        data.push(new Country(\"POL\", 38535873, 12721, 6586, 123, \"Poland\", \"Europe\"));\r\n        data.push(new Country(\"PRT\", 10514844, 20175, 47835, 115, \"Portugal\", \"Europe\"));\r\n        data.push(new Country(\"PRI\", 3651545, 27795, 15692, 79, \"Puerto Rico\", \"North America\"));\r\n        data.push(new Country(\"QAT\", 2050514, 92633, 41988, 125, \"Qatar\", \"Asia\"));\r\n        data.push(new Country(\"ROM\", 20076727, 8437, 5082, 111, \"Romania\", \"Europe\"));\r\n        data.push(new Country(\"RUS\", 143178000, 14091, 3634, 166, \"Russian\", \"Asia\"));\r\n        data.push(new Country(\"RWA\", 11457801, 623, 284, 33, \"Rwanda\", \"Africa\"));\r\n        data.push(new Country(\"WSM\", 188889, 3623, 968, 0, \"Samoa\", \"Oceania\"));\r\n        data.push(new Country(\"SMR\", 31247, 0, 8388, 99, \"San Marino\", \"Europe\"));\r\n        data.push(new Country(\"STP\", 188098, 1400, 2193, 58, \"Sao Tome and Principe\", \"Oceania\"));\r\n        data.push(new Country(\"SAU\", 28287855, 25946, 3176, 189, \"Saudi Arabia\", \"Asia\"));\r\n        data.push(new Country(\"SEN\", 13726021, 1023, 296, 64, \"Senegal\", \"Africa\"));\r\n        data.push(new Country(\"SRB\", 7199077, 5294, 4178, 125, \"Serbia\", \"Europe\"));\r\n        data.push(new Country(\"SYC\", 88303, 11689, 15614, 129, \"Seychelles\", \"Africa\"));\r\n        data.push(new Country(\"SLE\", 5978727, 633, 340, 35, \"Sierra Leone\", \"Africa\"));\r\n        data.push(new Country(\"SGP\", 5312400, 54007, 0, 145, \"Singapore\", \"Asia\"));\r\n        data.push(new Country(\"SVK\", 5407579, 16893, 10926, 109, \"Slovakia\", \"Europe\"));\r\n        data.push(new Country(\"SVN\", 2057159, 22059, 25555, 103, \"Slovenia\", \"Europe\"));\r\n        data.push(new Country(\"SLB\", 549598, 1819, 355, 22, \"Solomon Islands\", \"Oceania\"));\r\n        data.push(new Country(\"SOM\", 10195134, 0, 386, 7, \"Somalia\", \"Africa\"));\r\n        data.push(new Country(\"ZAF\", 52274945, 7314, 1613, 98, \"South Africa\", \"Africa\"));\r\n        data.push(new Country(\"SAS\", 1649249388, 1396, 0, 60, \"South Asia\", \"South Asia\"));\r\n        data.push(new Country(\"SSD\", 10837527, 974, 0, 0, \"South Sudan\", \"Africa\"));\r\n        data.push(new Country(\"ESP\", 46761264, 28282, 52045, 111, \"Spain\", \"Europe\"));\r\n        data.push(new Country(\"LKA\", 20328000, 2922, 881, 84, \"Sri Lanka\", \"Asia\"));\r\n        data.push(new Country(\"KNA\", 53584, 13658, 6408, 153, \"St. Kitts and Nevis\", \"North America\"));\r\n        data.push(new Country(\"LCA\", 180870, 7288, 1586, 112, \"St. Lucia\", \"North America\"));\r\n        data.push(new Country(\"VCT\", 109373, 6349, 4477, 121, \"St. Vincent and the Grenadines\", \"North America\"));\r\n        data.push(new Country(\"SXM\", 30959, 0, 0, 0, \"Sint Maarten\", \"North America\"));\r\n        data.push(new Country(\"SDN\", 37195349, 1695, 946, 42, \"Sudan\", \"Africa\"));\r\n        data.push(new Country(\"SUR\", 534541, 9376, 1011, 99, \"Suriname\", \"South America\"));\r\n        data.push(new Country(\"SWZ\", 1230985, 3290, 428, 61, \"Swaziland\", \"Africa\"));\r\n        data.push(new Country(\"SWE\", 9519374, 55039, 91487, 117, \"Sweden\", \"Europe\"));\r\n        data.push(new Country(\"CHE\", 7996861, 78929, 154063, 123, \"Switzerland\", \"Europe\"));\r\n        data.push(new Country(\"SYR\", 22399254, 0, 373, 54, \"Syria\", \"Asia\"));\r\n        data.push(new Country(\"TJK\", 8008990, 953, 262, 78, \"Tajikistan\", \"Asia\"));\r\n        data.push(new Country(\"TZA\", 47783107, 609, 183, 47, \"Tanzania\", \"Africa\"));\r\n        data.push(new Country(\"THA\", 66785001, 5480, 1292, 108, \"Thailand\", \"Asia\"));\r\n        data.push(new Country(\"TMP\", 1148958, 1179, 0, 44, \"East Timor\", \"Oceania\"));\r\n        data.push(new Country(\"TGO\", 6642928, 589, 0, 41, \"Togo\", \"Africa\"));\r\n        data.push(new Country(\"TON\", 104941, 4494, 799, 52, \"Tonga\", \"Africa\"));\r\n        data.push(new Country(\"TTO\", 1337439, 17523, 3502, 143, \"Trinidad and Tobago\", \"North America\"));\r\n        data.push(new Country(\"TUN\", 10777500, 4197, 1779, 105, \"Tunisia\", \"Africa\"));\r\n        data.push(new Country(\"TUR\", 73997128, 10661, 3794, 86, \"Turkey\", \"Asia\"));\r\n        data.push(new Country(\"TKM\", 5172931, 6798, 978, 63, \"Turkmenistan\", \"Asia\"));\r\n        data.push(new Country(\"TUV\", 9860, 4044, 0, 16, \"Tuvalu\", \"Oceania\"));\r\n        data.push(new Country(\"UGA\", 36345860, 551, 85, 38, \"Uganda\", \"Africa\"));\r\n        data.push(new Country(\"UKR\", 45593300, 3873, 2144, 117, \"Ukraine\", \"Europe\"));\r\n        data.push(new Country(\"ARE\", 9205651, 41692, 24273, 129, \"United Arab Emirates\", \"Asia\"));\r\n        data.push(new Country(\"GBR\", 63695687, 38649, 160158, 124, \"United Kingdom\", \"Europe\"));\r\n        data.push(new Country(\"USA\", 313873685, 51755, 52170, 91, \"United States\", \"North America\"));\r\n        data.push(new Country(\"URY\", 3395253, 14728, 3989, 132, \"Uruguay\", \"South America\"));\r\n        data.push(new Country(\"UZB\", 29774500, 1719, 150, 76, \"Uzbekistan\", \"Asia\"));\r\n        data.push(new Country(\"VUT\", 247262, 3183, 389, 72, \"Vanuatu\", \"Oceania\"));\r\n        data.push(new Country(\"VEN\", 29954782, 12729, 1906, 96, \"Venezuela\", \"South America\"));\r\n        data.push(new Country(\"VNM\", 88772900, 1755, 379, 125, \"Vietnam\", \"Asia\"));\r\n        data.push(new Country(\"WBG\", 4046901, 2530, 414, 65, \"Palestine\", \"Asia\"));\r\n        data.push(new Country(\"YEM\", 23852409, 1341, 293, 49, \"Yemen Rep.\", \"Asia\"));\r\n        data.push(new Country(\"ZMB\", 14075099, 1463, 264, 41, \"Zambia\", \"Africa\"));\r\n        data.push(new Country(\"ZWE\", 13724317, 909, 609, 59, \"Zimbabwe\", \"Africa\"));\r\n\r\n        // data = data.sort(this.sortByPopAscending);\r\n        data = data.sort(this.sortByPopDescending);\r\n\r\n        const countries: Country[] = [];\r\n        for (const country of data) {\r\n            if (country.isValid()) {\r\n                countries.push(country);\r\n            }\r\n        }\r\n        return countries;\r\n    }\r\n\r\n    public static abbreviate(value: number): string {\r\n        const suffixes = [\"\", \"K\", \"M\", \"B\", \"T\"];\r\n        const suffixNum = Math.floor((\"\" + value).length / 3);\r\n        const shortValue = parseFloat((suffixNum !== 0 ? (value / Math.pow(1000, suffixNum)) : value).toFixed(1));\r\n\r\n        return shortValue + suffixes[suffixNum];\r\n    }\r\n}\r\n\r\nclass Country {\r\n    public population: number;\r\n    public gdpPerCapita: number;\r\n    public gdpTotal: number;\r\n    public dptPerCapita: number;\r\n    public phonePer100: number;\r\n\r\n    public code: string;\r\n    public name: string;\r\n    public region: string;\r\n\r\n    constructor(code: string, pop: number, gdp: number, dpt: number, phones: number, name: string, region: string) {\r\n        this.code = code;\r\n        this.region = region;\r\n        this.name = name;\r\n\r\n        this.population = pop;\r\n        this.gdpPerCapita = gdp;\r\n        this.gdpTotal = gdp * pop;\r\n        this.dptPerCapita = dpt;\r\n        this.phonePer100 = phones;\r\n    }\r\n\r\n    public getPopulation(): string {\r\n        return SampleScatterStats.abbreviate(this.population);\r\n    }\r\n    public getGdpTotal(): string {\r\n        return SampleScatterStats.abbreviate(this.gdpTotal);\r\n    }\r\n    public getGdpPerCapita(): string {\r\n        return SampleScatterStats.abbreviate(this.gdpPerCapita);\r\n    }\r\n\r\n    public isValid(): boolean {\r\n        return this.gdpPerCapita > 0 && this.population > 0  &&\r\n               this.dptPerCapita > 0 && this.phonePer100 > 0;\r\n    }\r\n}\r\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.module.ts","content":"import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppComponent } from \"./app.component\";\r\nimport { ZoomSliderOverviewComponent } from \"./zoomslider-overview/zoomslider-overview.component\";\r\nimport { \r\n\tIgxZoomSliderDynamicModule,\r\n\tIgxNumericYAxisModule,\r\n\tIgxNumericXAxisModule,\r\n\tIgxCrosshairLayerModule,\r\n\tIgxDataChartScatterModule,\r\n\tIgxDataChartScatterCoreModule,\r\n\tIgxDataChartCoreModule,\r\n\tIgxDataChartCategoryModule,\r\n\tIgxDataChartCategoryCoreModule,\r\n\tIgxDataChartAnnotationModule,\r\n\tIgxDataChartInteractivityModule,\r\n\tIgxBubbleSeriesModule\r\n } from \"igniteui-angular-charts\";\r\nimport { SampleScatterStats } from \"./SampleScatterStats\";\n\n\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\r\n\tAppComponent,\r\n\tZoomSliderOverviewComponent\r\n],\n  imports: [\r\n\tBrowserModule,\r\n\tBrowserAnimationsModule,\r\n\tFormsModule,\r\n\tIgxZoomSliderDynamicModule,\r\n\tIgxNumericYAxisModule,\r\n\tIgxNumericXAxisModule,\r\n\tIgxCrosshairLayerModule,\r\n\tIgxDataChartScatterModule,\r\n\tIgxDataChartScatterCoreModule,\r\n\tIgxDataChartCoreModule,\r\n\tIgxDataChartCategoryModule,\r\n\tIgxDataChartCategoryCoreModule,\r\n\tIgxDataChartAnnotationModule,\r\n\tIgxDataChartInteractivityModule,\r\n\tIgxBubbleSeriesModule\r\n],\n  providers: [SampleScatterStats],\n  entryComponents: [],\n  schemas: []\n})\nexport class AppModule {}\n","isMain":true,"fileExtension":"ts","fileHeader":"modules"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.component.html","content":"<app-zoomslider-overview></app-zoomslider-overview>"}],"sampleDependencies":"{\"@angular/animations\":\"10.0.14\",\"@angular/common\":\"10.0.14\",\"@angular/compiler\":\"10.0.14\",\"@angular/core\":\"^10.0.14\",\"@angular/forms\":\"10.0.14\",\"@angular/platform-browser\":\"10.0.14\",\"@angular/platform-browser-dynamic\":\"10.0.14\",\"@types/hammerjs\":\"^2.0.35\",\"classlist.js\":\"^1.1.20150312\",\"core-js\":\"^2.6.2\",\"hammerjs\":\"^2.0.8\",\"igniteui-angular\":\"11.1.10\",\"igniteui-angular-charts\":\"11.2.0-beta.0\",\"igniteui-angular-core\":\"11.2.0-beta.0\",\"intl\":\"^1.2.5\",\"jszip\":\"^3.1.5\",\"rxjs\":\"^6.5.4\",\"tslib\":\"1.13.0\",\"web-animations-js\":\"^2.3.2\",\"zone.js\":\"~0.10.2\"}"}