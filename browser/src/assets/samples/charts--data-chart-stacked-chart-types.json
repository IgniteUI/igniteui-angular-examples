{"sampleFiles":[{"hasRelativeAssetsUrls":false,"path":"src/app/stacked-series/data-chart-stacked-series.component.ts","content":"import { Component, OnInit, ViewChild } from \"@angular/core\";\n\nimport { IgxCategoryXAxisComponent } from \"igniteui-angular-charts\";\nimport { IgxCategoryYAxisComponent } from \"igniteui-angular-charts\";\nimport { IgxDataChartComponent } from \"igniteui-angular-charts\";\nimport { IgxNumericXAxisComponent } from \"igniteui-angular-charts\";\nimport { IgxNumericYAxisComponent } from \"igniteui-angular-charts\";\n\nimport { IgxStacked100AreaSeriesComponent } from \"igniteui-angular-charts\";\nimport { IgxStacked100BarSeriesComponent } from \"igniteui-angular-charts\";\nimport { IgxStacked100ColumnSeriesComponent } from \"igniteui-angular-charts\";\nimport { IgxStacked100LineSeriesComponent } from \"igniteui-angular-charts\";\nimport { IgxStacked100SplineSeriesComponent } from \"igniteui-angular-charts\";\n\nimport { IgxStackedAreaSeriesComponent } from \"igniteui-angular-charts\";\nimport { IgxStackedBarSeriesComponent } from \"igniteui-angular-charts\";\nimport { IgxStackedColumnSeriesComponent } from \"igniteui-angular-charts\";\nimport { IgxStackedFragmentSeriesComponent } from \"igniteui-angular-charts\";\nimport { IgxStackedLineSeriesComponent } from \"igniteui-angular-charts\";\nimport { IgxStackedSplineSeriesComponent } from \"igniteui-angular-charts\";\n\n@Component({\n    selector: \"app-data-chart-stacked-series\",\n    styleUrls: [\"./data-chart-stacked-series.component.scss\"],\n    templateUrl: \"./data-chart-stacked-series.component.html\"\n})\nexport class DataChartStackedSeriesComponent implements OnInit {\n\n    public data: any[];\n\n    public catXAxis: IgxCategoryXAxisComponent;\n    public numYAxis: IgxNumericYAxisComponent;\n\n    public catYAxis: IgxCategoryYAxisComponent;\n    public numXAxis: IgxNumericXAxisComponent;\n\n    @ViewChild(\"chart\", { static: true })\n    public chart: IgxDataChartComponent;\n\n    constructor() {\n        this.catXAxis = new IgxCategoryXAxisComponent();\n        this.catXAxis.label = \"Year\";\n\n        this.catYAxis = new IgxCategoryYAxisComponent();\n        this.catYAxis.label = \"Year\";\n\n        this.numXAxis = new IgxNumericXAxisComponent();\n        this.numYAxis = new IgxNumericYAxisComponent();\n\n        this.initData();\n    }\n\n    public ngOnInit() {\n        this.setSeries(\"Stacked Column\");\n    }\n\n    public getFragments(): IgxStackedFragmentSeriesComponent[] {\n        const fragment1 = new IgxStackedFragmentSeriesComponent();\n        fragment1.valueMemberPath = \"USA\";\n        fragment1.title = \"USA\";\n        const fragment2 = new IgxStackedFragmentSeriesComponent();\n        fragment2.valueMemberPath = \"Europe\";\n        fragment2.title = \"Europe\";\n        const fragment3 = new IgxStackedFragmentSeriesComponent();\n        fragment3.valueMemberPath = \"China\";\n        fragment3.title = \"China\";\n\n        const fragments: IgxStackedFragmentSeriesComponent[] = [];\n        fragments.push(fragment1);\n        fragments.push(fragment2);\n        fragments.push(fragment3);\n        return fragments;\n    }\n\n    public onSeriesTypeChanged(e: any) {\n        const selectedSeries = e.target.value.toString();\n        this.chart.series.clear();\n        this.setSeries(selectedSeries);\n    }\n\n    public setSeries(seriesType: string) {\n\n        this.chart.axes.clear();\n        this.chart.series.clear();\n\n        const fragments = this.getFragments();\n\n        if (seriesType === \"Stacked Column\") {\n            const stack = new IgxStackedColumnSeriesComponent();\n            stack.xAxis = this.catXAxis;\n            stack.yAxis = this.numYAxis;\n            this.chart.axes.add(this.catXAxis);\n            this.chart.axes.add(this.numYAxis);\n            for (const frag of fragments) {\n                stack.series.add(frag);\n            }\n            this.chart.series.add(stack);\n\n        } else if (seriesType === \"Stacked 100 Column\") {\n            const stack = new IgxStacked100ColumnSeriesComponent();\n            stack.xAxis = this.catXAxis;\n            stack.yAxis = this.numYAxis;\n            this.chart.axes.add(this.catXAxis);\n            this.chart.axes.add(this.numYAxis);\n            for (const frag of fragments) {\n                stack.series.add(frag);\n            }\n            this.chart.series.add(stack);\n\n        } else if (seriesType === \"Stacked Area\") {\n            const stack = new IgxStackedAreaSeriesComponent();\n            stack.xAxis = this.catXAxis;\n            stack.yAxis = this.numYAxis;\n            this.chart.axes.add(this.catXAxis);\n            this.chart.axes.add(this.numYAxis);\n            for (const frag of fragments) {\n                stack.series.add(frag);\n            }\n            this.chart.series.add(stack);\n\n        } else if (seriesType === \"Stacked 100 Area\") {\n            const stack = new IgxStacked100AreaSeriesComponent();\n            stack.xAxis = this.catXAxis;\n            stack.yAxis = this.numYAxis;\n            this.chart.axes.add(this.catXAxis);\n            this.chart.axes.add(this.numYAxis);\n            for (const frag of fragments) {\n                stack.series.add(frag);\n            }\n            this.chart.series.add(stack);\n\n        } else if (seriesType === \"Stacked Line\") {\n            const stack = new IgxStackedLineSeriesComponent();\n            stack.xAxis = this.catXAxis;\n            stack.yAxis = this.numYAxis;\n            this.chart.axes.add(this.catXAxis);\n            this.chart.axes.add(this.numYAxis);\n            for (const frag of fragments) {\n                stack.series.add(frag);\n            }\n            this.chart.series.add(stack);\n\n        } else if (seriesType === \"Stacked 100 Line\") {\n            const stack = new IgxStacked100LineSeriesComponent();\n            stack.xAxis = this.catXAxis;\n            stack.yAxis = this.numYAxis;\n            this.chart.axes.add(this.catXAxis);\n            this.chart.axes.add(this.numYAxis);\n            for (const frag of fragments) {\n                stack.series.add(frag);\n            }\n            this.chart.series.add(stack);\n\n        } else if (seriesType === \"Stacked Spline\") {\n            const stack = new IgxStackedSplineSeriesComponent();\n            stack.xAxis = this.catXAxis;\n            stack.yAxis = this.numYAxis;\n            this.chart.axes.add(this.catXAxis);\n            this.chart.axes.add(this.numYAxis);\n            for (const frag of fragments) {\n                stack.series.add(frag);\n            }\n            this.chart.series.add(stack);\n\n        } else if (seriesType === \"Stacked 100 Spline\") {\n            const stack = new IgxStacked100SplineSeriesComponent();\n            stack.xAxis = this.catXAxis;\n            stack.yAxis = this.numYAxis;\n            this.chart.axes.add(this.catXAxis);\n            this.chart.axes.add(this.numYAxis);\n            for (const frag of fragments) {\n                stack.series.add(frag);\n            }\n            this.chart.series.add(stack);\n\n        } else if (seriesType === \"Stacked Bar\") {\n            const stack = new IgxStackedBarSeriesComponent();\n            stack.xAxis = this.numXAxis;\n            stack.yAxis = this.catYAxis;\n            this.chart.axes.add(this.numXAxis);\n            this.chart.axes.add(this.catYAxis);\n            for (const frag of fragments) {\n                stack.series.add(frag);\n            }\n            this.chart.series.add(stack);\n\n        } else if (seriesType === \"Stacked 100 Bar\") {\n            const stack = new IgxStacked100BarSeriesComponent();\n            stack.xAxis = this.numXAxis;\n            stack.yAxis = this.catYAxis;\n            this.chart.axes.add(this.numXAxis);\n            this.chart.axes.add(this.catYAxis);\n            for (const frag of fragments) {\n                stack.series.add(frag);\n            }\n\n            this.chart.series.add(stack);\n        }\n    }\n\n    public initData() {\n\n        this.data = [\n            { Year: \"2011\", USA: 14,  Europe: 65, China: 30 },\n            { Year: \"2012\", USA: 16,  Europe: 75, China: 40 },\n            { Year: \"2013\", USA: 17,  Europe: 80, China: 50 },\n            { Year: \"2014\", USA: 30,  Europe: 40, China: 45 },\n            { Year: \"2015\", USA: 20,  Europe: 80, China: 50 },\n            { Year: \"2016\", USA: 50,  Europe: 55, China: 90 },\n            { Year: \"2017\", USA: 50,  Europe: 80, China: 130 },\n            { Year: \"2018\", USA: 65,  Europe: 50, China: 135 },\n            { Year: \"2019\", USA: 80,  Europe: 90, China: 150 },\n            { Year: \"2020\", USA: 115, Europe: 70, China: 175 },\n            { Year: \"2021\", USA: 150, Europe: 90, China: 195 }\n        ];\n    }\n}\n","isMain":true,"fileExtension":"ts","fileHeader":"ts"},{"hasRelativeAssetsUrls":false,"path":"src/app/stacked-series/data-chart-stacked-series.component.html","content":"<div class=\"container sample\">\n    <div class=\"options vertical\">\n        <span id=\"legendTitle\">Electricity Production from Renewables</span>\n        <div class=\"legend\">\n            <igx-legend #legend orientation=\"horizontal\"></igx-legend>\n        </div>\n        <div class=\"overlay-right\">\n            <div class=\"options horizontal\">\n                <label class=\"options-label\">Stacked Series: </label>\n                <select (change)=onSeriesTypeChanged($event)>\n                    <option>Stacked Column</option>\n                    <option>Stacked 100 Column</option>\n                    <option>Stacked Area</option>\n                    <option>Stacked 100 Area</option>\n                    <option>Stacked Line</option>\n                    <option>Stacked 100 Line</option>\n                    <option>Stacked Spline</option>\n                    <option>Stacked 100 Spline</option>\n                    <option>Stacked Bar</option>\n                    <option>Stacked 100 Bar</option>\n                </select>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"container\">\n        <igx-data-chart #chart width=\"100%\" height=\"100%\" [dataSource]=\"data\" [legend]=\"legend\">\n        </igx-data-chart>\n    </div>\n</div>\n","isMain":true,"fileExtension":"html","fileHeader":"html"},{"hasRelativeAssetsUrls":false,"path":"src/app/stacked-series/data-chart-stacked-series.component.scss","content":"/* styles are loaded the Shared CSS file located at:\nhttps://static.infragistics.com/xplatform/css/samples/\n*/\n","isMain":true,"fileExtension":"scss","fileHeader":"scss"},{"hasRelativeAssetsUrls":false,"path":"src/app/SharedData.ts","content":"import { Injectable } from \"@angular/core\";\r\n\r\n@Injectable()\r\nexport class SharedData {\r\n\r\n    public static getEnergyProduction() {\r\n        const data: any[] = [\r\n            {\r\n                Coal: 400000000,\r\n                Country: \"Canada\",\r\n                Gas: 175000000,\r\n                Hydro: 350000000,\r\n                Nuclear: 225000000,\r\n                Oil: 100000000\r\n            },\r\n            {\r\n                Coal: 925000000,\r\n                Country: \"China\",\r\n                Gas: 350000000,\r\n                Hydro: 625000000,\r\n                Nuclear: 400000000,\r\n                Oil: 200000000\r\n            },\r\n            {\r\n                Coal: 550000000,\r\n                Country: \"Russia\",\r\n                Gas: 250000000,\r\n                Hydro: 425000000,\r\n                Nuclear: 475000000,\r\n                Oil: 200000000\r\n            },\r\n            {\r\n                Coal: 450000000,\r\n                Country: \"Australia\",\r\n                Gas: 150000000,\r\n                Hydro: 350000000,\r\n                Nuclear: 175000000,\r\n                Oil: 100000000\r\n            },\r\n            {\r\n                Coal: 800000000,\r\n                Country: \"United States\",\r\n                Gas: 475000000,\r\n                Hydro: 750000000,\r\n                Nuclear: 575000000,\r\n                Oil: 250000000\r\n            },\r\n            {\r\n                Coal: 375000000,\r\n                Country: \"France\",\r\n                Gas: 350000000,\r\n                Hydro: 325000000,\r\n                Nuclear: 275000000,\r\n                Oil: 150000000\r\n            }\r\n        ];\r\n        return data;\r\n    }\r\n\r\n    public static getItems(startValue: number, maxPoints: number, useShortLabels?: boolean): any[] {\r\n\r\n        const data: any[] = [];\r\n        let value = startValue;\r\n        for (let i = 0; i <= maxPoints; i++) {\r\n            value += Math.random() * 4.0 - 2.0;\r\n            const v = Math.round(value);\r\n            let l = i.toString();\r\n            if (useShortLabels) {\r\n                l = this.toShortString(i);\r\n            }\r\n            data.push({ Label: l, Value: v });\r\n        }\r\n        return data;\r\n    }\r\n\r\n    public static getTemperatures(startValue: number, startYear: number, endYear: number): any[] {\r\n        const data: any[] = [];\r\n        let value = startValue;\r\n        for (let i = startYear; i <= endYear; i++) {\r\n            value += (Math.random() - 0.5) * 0.5;\r\n            const high = value + (Math.random() * 2);\r\n            const low = value - (Math.random() * 2);\r\n            const v = Math.abs(Math.round(value * 10) / 10);\r\n            const h = Math.abs(Math.round(high * 10) / 10);\r\n            const l = Math.abs(Math.round(low * 10) / 10);\r\n            data.push({ Label: i.toString(), Value: v, High: h, Low: l });\r\n        }\r\n        return data;\r\n    }\r\n\r\n    public static getLastItem(array: any[]): any {\r\n        if (array.length === 0) {\r\n            return null;\r\n        }\r\n        return array[array.length - 1];\r\n    }\r\n\r\n    public static getNewItem(array: any[], index: number): any {\r\n        const lastItem = this.getLastItem(array);\r\n        const newValue = lastItem.Value + Math.random() * 4.0 - 2.0;\r\n        return { Label: index.toString(), Value: newValue };\r\n    }\r\n\r\n    public static toShortString(largeValue: number): string {\r\n        let roundValue: number;\r\n\r\n        if (largeValue >= 1000000) {\r\n            roundValue = Math.round(largeValue / 100000) / 10;\r\n            return roundValue + \"m\";\r\n        }\r\n        if (largeValue >= 1000) {\r\n            roundValue = Math.round(largeValue / 100) / 10;\r\n            return roundValue + \"k\";\r\n        }\r\n\r\n        roundValue = Math.round(largeValue);\r\n        return roundValue + \"\";\r\n    }\r\n\r\n    public static addDays(date: Date, days: number): Date {\r\n        date.setDate(date.getDate() + days);\r\n        return date;\r\n    }\r\n}\r\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.module.ts","content":"import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppComponent } from \"./app.component\";\r\nimport { DataChartStackedSeriesComponent } from \"./stacked-series/data-chart-stacked-series.component\";\r\nimport { \r\n\tIgxDataChartCoreModule,\r\n\tIgxDataChartCategoryModule,\r\n\tIgxDataChartInteractivityModule,\r\n\tIgxLegendModule,\r\n\tIgxDataChartStackedModule,\r\n\tIgxStackedFragmentSeriesModule\r\n } from \"igniteui-angular-charts\";\r\nimport { SharedData } from \"./SharedData\";\n\n\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\r\n\tAppComponent,\r\n\tDataChartStackedSeriesComponent\r\n],\n  imports: [\r\n\tBrowserModule,\r\n\tBrowserAnimationsModule,\r\n\tFormsModule,\r\n\tIgxDataChartCoreModule,\r\n\tIgxDataChartCategoryModule,\r\n\tIgxDataChartInteractivityModule,\r\n\tIgxLegendModule,\r\n\tIgxDataChartStackedModule,\r\n\tIgxStackedFragmentSeriesModule\r\n],\n  providers: [SharedData],\n  entryComponents: [],\n  schemas: []\n})\nexport class AppModule {}\n","isMain":true,"fileExtension":"ts","fileHeader":"modules"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.component.html","content":"<app-data-chart-stacked-series></app-data-chart-stacked-series>"}],"sampleDependencies":"{\"@angular/animations\":\"10.0.14\",\"@angular/common\":\"10.0.14\",\"@angular/compiler\":\"10.0.14\",\"@angular/core\":\"^10.0.14\",\"@angular/forms\":\"10.0.14\",\"@angular/platform-browser\":\"10.0.14\",\"@angular/platform-browser-dynamic\":\"10.0.14\",\"@types/hammerjs\":\"^2.0.35\",\"classlist.js\":\"^1.1.20150312\",\"core-js\":\"^2.6.2\",\"hammerjs\":\"^2.0.8\",\"igniteui-angular\":\"11.1.10\",\"igniteui-angular-charts\":\"11.2.0-beta.0\",\"igniteui-angular-core\":\"11.2.0-beta.0\",\"intl\":\"^1.2.5\",\"jszip\":\"^3.1.5\",\"rxjs\":\"^6.5.4\",\"tslib\":\"1.13.0\",\"web-animations-js\":\"^2.3.2\",\"zone.js\":\"~0.10.2\"}"}