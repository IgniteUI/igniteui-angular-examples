{"sampleFiles":[{"hasRelativeAssetsUrls":false,"path":"src/app/data-chart-series-tooltips/data-chart-series-tooltips.component.ts","content":"import { Component, ViewChild } from \"@angular/core\";\r\n\r\nimport { IgxCategoryXAxisComponent } from \"igniteui-angular-charts\";\r\nimport { IgxDataChartComponent } from \"igniteui-angular-charts\";\r\nimport { IgxNumericYAxisComponent } from \"igniteui-angular-charts\";\r\n\r\nimport { IgxCategoryToolTipLayerComponent } from \"igniteui-angular-charts\";\r\nimport { IgxItemToolTipLayerComponent } from \"igniteui-angular-charts\";\r\n\r\n@Component({\r\n    selector: \"app-data-chart-series-tooltips\",\r\n    styleUrls: [\"./data-chart-series-tooltips.component.scss\"],\r\n    templateUrl: \"./data-chart-series-tooltips.component.html\"\r\n})\r\nexport class DataChartSeriesTooltipsComponent {\r\n\r\n    public data: any[];\r\n\r\n    public showDefaultTooltip: boolean = true;\r\n    public showItemTooltipLayer: boolean = false;\r\n    public showCategoryTooltipLayer: boolean = false;\r\n\r\n    public itemTooltipLayer: IgxItemToolTipLayerComponent;\r\n    public categoryTooltipLayer: IgxCategoryToolTipLayerComponent;\r\n\r\n    public set toolTipType(val: string) {\r\n        const oldValue = this._toolTipType;\r\n        this._toolTipType = val;\r\n        if (oldValue !== val) {\r\n            this.onTooltipTypeChanged();\r\n        }\r\n    }\r\n    public get toolTipType(): string {\r\n        return this._toolTipType;\r\n    }\r\n\r\n    @ViewChild(\"chart\", { static: true })\r\n    public chart: IgxDataChartComponent;\r\n\r\n    @ViewChild(\"xAxis\", { static: true })\r\n    public xAxis: IgxCategoryXAxisComponent;\r\n\r\n    @ViewChild(\"yAxis\", { static: true })\r\n    public yAxis: IgxNumericYAxisComponent;\r\n\r\n    private _toolTipType: string = \"Default\";\r\n\r\n    constructor() {\r\n        this.initData();\r\n\r\n        this.itemTooltipLayer = new IgxItemToolTipLayerComponent();\r\n        this.categoryTooltipLayer = new IgxCategoryToolTipLayerComponent();\r\n    }\r\n\r\n    public initData() {\r\n        this.data = [\r\n            { Country: \"Canada\", Coal: 400, Oil: 100, Gas: 175, Nuclear: 225, Hydro: 350 },\r\n            { Country: \"China\", Coal: 925, Oil: 200, Gas: 350, Nuclear: 400, Hydro: 625 },\r\n            { Country: \"Russia\", Coal: 550, Oil: 200, Gas: 250, Nuclear: 475, Hydro: 425 },\r\n            { Country: \"Australia\", Coal: 450, Oil: 100, Gas: 150, Nuclear: 175, Hydro: 350 },\r\n            { Country: \"United States\", Coal: 800, Oil: 250, Gas: 475, Nuclear: 575, Hydro: 750 },\r\n            { Country: \"France\", Coal: 375, Oil: 150, Gas: 350, Nuclear: 275, Hydro: 325 }\r\n        ];\r\n    }\r\n\r\n    public onTooltipTypeChanged() {\r\n        switch (this.toolTipType) {\r\n            case \"Default\": {\r\n                this.chart.series.remove(this.itemTooltipLayer);\r\n                this.chart.series.remove(this.categoryTooltipLayer);\r\n                break;\r\n            }\r\n            case \"Item\": {\r\n                this.chart.series.remove(this.categoryTooltipLayer);\r\n                this.chart.series.add(this.itemTooltipLayer);\r\n                break;\r\n            }\r\n            case \"Category\": {\r\n                this.chart.series.remove(this.itemTooltipLayer);\r\n                this.chart.series.add(this.categoryTooltipLayer);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n","isMain":true,"fileExtension":"ts","fileHeader":"ts"},{"hasRelativeAssetsUrls":false,"path":"src/app/data-chart-series-tooltips/data-chart-series-tooltips.component.html","content":"<div class=\"container sample\">\r\n    <div class=\"options horizontal\">\r\n        <span class=\"options-label\">Tooltip Type: </span>\r\n        <select [(ngModel)]=\"toolTipType\">\r\n            <option>Default</option>\r\n            <option>Item</option>\r\n            <option>Category</option>\r\n        </select>\r\n    </div>\r\n\r\n    <div class=\"container\">\r\n      <igx-data-chart #chart height=\"100%\" width=\"100%\" [dataSource]=\"data\">\r\n\r\n        <igx-category-x-axis #xAxis name=\"xAxis\" label=\"Country\"></igx-category-x-axis>\r\n        <igx-numeric-y-axis #yAxis name=\"yAxis\" minValue=0></igx-numeric-y-axis>\r\n\r\n        <igx-column-series name=\"series1\" title=\"Coal\" [xAxis]=\"xAxis\" [yAxis]=\"yAxis\" valueMemberPath=\"Coal\"\r\n          showDefaultTooltip=true></igx-column-series>\r\n        <igx-column-series name=\"series2\" title=\"Hydro\" [xAxis]=\"xAxis\" [yAxis]=\"yAxis\" valueMemberPath=\"Hydro\"\r\n          showDefaultTooltip=true></igx-column-series>\r\n        <igx-column-series name=\"series3\" title=\"Nuclear\" [xAxis]=\"xAxis\" [yAxis]=\"yAxis\" valueMemberPath=\"Nuclear\"\r\n          showDefaultTooltip=true></igx-column-series>\r\n        <igx-column-series name=\"series4\" title=\"Gas\" [xAxis]=\"xAxis\" [yAxis]=\"yAxis\" valueMemberPath=\"Gas\"\r\n          showDefaultTooltip=true></igx-column-series>\r\n        <igx-column-series name=\"series5\" title=\"Oil\" [xAxis]=\"xAxis\" [yAxis]=\"yAxis\" valueMemberPath=\"Oil\"\r\n          showDefaultTooltip=true></igx-column-series>\r\n      </igx-data-chart>\r\n    </div>\r\n  </div>\r\n","isMain":true,"fileExtension":"html","fileHeader":"html"},{"hasRelativeAssetsUrls":false,"path":"src/app/data-chart-series-tooltips/data-chart-series-tooltips.component.scss","content":"/* styles are loaded the Shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/\r\n","isMain":true,"fileExtension":"scss","fileHeader":"scss"},{"hasRelativeAssetsUrls":false,"path":"src/app/SharedData.ts","content":"import { Injectable } from \"@angular/core\";\r\n\r\n@Injectable()\r\nexport class SharedData {\r\n\r\n    public static getEnergyProduction() {\r\n        const data: any[] = [\r\n            {\r\n                Coal: 400000000,\r\n                Country: \"Canada\",\r\n                Gas: 175000000,\r\n                Hydro: 350000000,\r\n                Nuclear: 225000000,\r\n                Oil: 100000000\r\n            },\r\n            {\r\n                Coal: 925000000,\r\n                Country: \"China\",\r\n                Gas: 350000000,\r\n                Hydro: 625000000,\r\n                Nuclear: 400000000,\r\n                Oil: 200000000\r\n            },\r\n            {\r\n                Coal: 550000000,\r\n                Country: \"Russia\",\r\n                Gas: 250000000,\r\n                Hydro: 425000000,\r\n                Nuclear: 475000000,\r\n                Oil: 200000000\r\n            },\r\n            {\r\n                Coal: 450000000,\r\n                Country: \"Australia\",\r\n                Gas: 150000000,\r\n                Hydro: 350000000,\r\n                Nuclear: 175000000,\r\n                Oil: 100000000\r\n            },\r\n            {\r\n                Coal: 800000000,\r\n                Country: \"United States\",\r\n                Gas: 475000000,\r\n                Hydro: 750000000,\r\n                Nuclear: 575000000,\r\n                Oil: 250000000\r\n            },\r\n            {\r\n                Coal: 375000000,\r\n                Country: \"France\",\r\n                Gas: 350000000,\r\n                Hydro: 325000000,\r\n                Nuclear: 275000000,\r\n                Oil: 150000000\r\n            }\r\n        ];\r\n        return data;\r\n    }\r\n\r\n    public static getItems(startValue: number, maxPoints: number, useShortLabels?: boolean): any[] {\r\n\r\n        const data: any[] = [];\r\n        let value = startValue;\r\n        for (let i = 0; i <= maxPoints; i++) {\r\n            value += Math.random() * 4.0 - 2.0;\r\n            const v = Math.round(value);\r\n            let l = i.toString();\r\n            if (useShortLabels) {\r\n                l = this.toShortString(i);\r\n            }\r\n            data.push({ Label: l, Value: v });\r\n        }\r\n        return data;\r\n    }\r\n\r\n    public static getTemperatures(startValue: number, startYear: number, endYear: number): any[] {\r\n        const data: any[] = [];\r\n        let value = startValue;\r\n        for (let i = startYear; i <= endYear; i++) {\r\n            value += (Math.random() - 0.5) * 0.5;\r\n            const high = value + (Math.random() * 2);\r\n            const low = value - (Math.random() * 2);\r\n            const v = Math.abs(Math.round(value * 10) / 10);\r\n            const h = Math.abs(Math.round(high * 10) / 10);\r\n            const l = Math.abs(Math.round(low * 10) / 10);\r\n            data.push({ Label: i.toString(), Value: v, High: h, Low: l });\r\n        }\r\n        return data;\r\n    }\r\n\r\n    public static getLastItem(array: any[]): any {\r\n        if (array.length === 0) {\r\n            return null;\r\n        }\r\n        return array[array.length - 1];\r\n    }\r\n\r\n    public static getNewItem(array: any[], index: number): any {\r\n        const lastItem = this.getLastItem(array);\r\n        const newValue = lastItem.Value + Math.random() * 4.0 - 2.0;\r\n        return { Label: index.toString(), Value: newValue };\r\n    }\r\n\r\n    public static toShortString(largeValue: number): string {\r\n        let roundValue: number;\r\n\r\n        if (largeValue >= 1000000) {\r\n            roundValue = Math.round(largeValue / 100000) / 10;\r\n            return roundValue + \"m\";\r\n        }\r\n        if (largeValue >= 1000) {\r\n            roundValue = Math.round(largeValue / 100) / 10;\r\n            return roundValue + \"k\";\r\n        }\r\n\r\n        roundValue = Math.round(largeValue);\r\n        return roundValue + \"\";\r\n    }\r\n\r\n    public static addDays(date: Date, days: number): Date {\r\n        date.setDate(date.getDate() + days);\r\n        return date;\r\n    }\r\n}\r\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.module.ts","content":"import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppComponent } from \"./app.component\";\r\nimport { DataChartSeriesTooltipsComponent } from \"./data-chart-series-tooltips/data-chart-series-tooltips.component\";\r\nimport { \r\n\tIgxDataChartCoreModule,\r\n\tIgxDataChartCategoryModule,\r\n\tIgxLegendModule,\r\n\tIgxDataChartInteractivityModule\r\n } from \"igniteui-angular-charts\";\r\nimport { SharedData } from \"./SharedData\";\n\n\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\r\n\tAppComponent,\r\n\tDataChartSeriesTooltipsComponent\r\n],\n  imports: [\r\n\tBrowserModule,\r\n\tBrowserAnimationsModule,\r\n\tFormsModule,\r\n\tIgxDataChartCoreModule,\r\n\tIgxDataChartCategoryModule,\r\n\tIgxLegendModule,\r\n\tIgxDataChartInteractivityModule\r\n],\n  providers: [SharedData],\n  entryComponents: [],\n  schemas: []\n})\nexport class AppModule {}\n","isMain":true,"fileExtension":"ts","fileHeader":"modules"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.component.html","content":"<app-data-chart-series-tooltips></app-data-chart-series-tooltips>"}],"sampleDependencies":"{\"@angular/animations\":\"10.0.14\",\"@angular/common\":\"10.0.14\",\"@angular/compiler\":\"10.0.14\",\"@angular/core\":\"^10.0.14\",\"@angular/forms\":\"10.0.14\",\"@angular/platform-browser\":\"10.0.14\",\"@angular/platform-browser-dynamic\":\"10.0.14\",\"@types/hammerjs\":\"^2.0.35\",\"classlist.js\":\"^1.1.20150312\",\"core-js\":\"^2.6.2\",\"hammerjs\":\"^2.0.8\",\"igniteui-angular\":\"11.1.10\",\"igniteui-angular-charts\":\"11.2.0-beta.0\",\"igniteui-angular-core\":\"11.2.0-beta.0\",\"intl\":\"^1.2.5\",\"jszip\":\"^3.1.5\",\"rxjs\":\"^6.5.4\",\"tslib\":\"1.13.0\",\"web-animations-js\":\"^2.3.2\",\"zone.js\":\"~0.10.2\"}"}