{"sampleFiles":[{"hasRelativeAssetsUrls":false,"path":"src/app/data-chart-axis-types/data-chart-axis-types.component.ts","content":"import { Component, OnInit, ViewChild } from \"@angular/core\";\r\nimport { IgxDataChartComponent } from \"igniteui-angular-charts\";\r\n\r\nimport { IgxCategoryXAxisComponent } from \"igniteui-angular-charts\";\r\nimport { IgxCategoryYAxisComponent } from \"igniteui-angular-charts\";\r\nimport { IgxNumericXAxisComponent } from \"igniteui-angular-charts\";\r\nimport { IgxNumericYAxisComponent } from \"igniteui-angular-charts\";\r\nimport { IgxTimeXAxisComponent } from \"igniteui-angular-charts\";\r\n\r\nimport { IgxBarSeriesComponent } from \"igniteui-angular-charts\";\r\nimport { IgxColumnSeriesComponent } from \"igniteui-angular-charts\";\r\nimport { IgxFinancialPriceSeriesComponent } from \"igniteui-angular-charts\";\r\nimport { IgxScatterSeriesComponent } from \"igniteui-angular-charts\";\r\nimport { MarkerType } from \"igniteui-angular-charts\";\r\n\r\nimport { SampleCategoryData } from \"../SampleCategoryData\";\r\nimport { SampleFinancialData } from \"../SampleFinancialData\";\r\nimport { SampleScatterData } from \"../SampleScatterData\";\r\n\r\n@Component({\r\n    selector: \"app-data-chart-axis-types\",\r\n    styleUrls: [\"./data-chart-axis-types.component.scss\"],\r\n    templateUrl: \"./data-chart-axis-types.component.html\"\r\n})\r\nexport class DataChartAxisTypesComponent implements OnInit {\r\n\r\n    public categoryData: any[];\r\n    public financialData: any[];\r\n    public scatterData: any[];\r\n\r\n    public chartType: string = \"Column (CategoryXAxis)\";\r\n\r\n    @ViewChild(\"chart\", { static: true })\r\n    public chart: IgxDataChartComponent;\r\n\r\n    public numericXAxis: IgxNumericXAxisComponent;\r\n    public numericYAxis: IgxNumericYAxisComponent;\r\n\r\n    public categoryXAxis: IgxCategoryXAxisComponent;\r\n    public categoryYAxis: IgxCategoryYAxisComponent;\r\n\r\n    public timeXAxis: IgxTimeXAxisComponent;\r\n\r\n    public columnSeries1: IgxColumnSeriesComponent;\r\n    public columnSeries2: IgxColumnSeriesComponent;\r\n\r\n    public barSeries1: IgxBarSeriesComponent;\r\n    public barSeries2: IgxBarSeriesComponent;\r\n\r\n    public scatterSeries1: IgxScatterSeriesComponent;\r\n    public scatterSeries2: IgxScatterSeriesComponent;\r\n\r\n    public financialSeries: IgxFinancialPriceSeriesComponent;\r\n\r\n    constructor() {\r\n        this.initData();\r\n        this.initAxes();\r\n        this.initCategorySeries();\r\n        this.initScatterSeries();\r\n        this.initFinancialSeries();\r\n    }\r\n\r\n    public ngOnInit() {\r\n        this.chart.axes.add(this.categoryXAxis);\r\n        this.chart.axes.add(this.numericYAxis);\r\n\r\n        this.chart.series.add(this.columnSeries1);\r\n        this.chart.series.add(this.columnSeries2);\r\n    }\r\n\r\n    public initCategorySeries() {\r\n        this.columnSeries1 = new IgxColumnSeriesComponent();\r\n        this.columnSeries1.dataSource = this.categoryData;\r\n        this.columnSeries1.xAxis = this.categoryXAxis;\r\n        this.columnSeries1.yAxis = this.numericYAxis;\r\n        this.columnSeries1.valueMemberPath = \"USA\";\r\n\r\n        this.columnSeries2 = new IgxColumnSeriesComponent();\r\n        this.columnSeries2.dataSource = this.categoryData;\r\n        this.columnSeries2.xAxis = this.categoryXAxis;\r\n        this.columnSeries2.yAxis = this.numericYAxis;\r\n        this.columnSeries2.valueMemberPath = \"RUS\";\r\n\r\n        this.barSeries1 = new IgxBarSeriesComponent();\r\n        this.barSeries1.dataSource = this.categoryData;\r\n        this.barSeries1.xAxis = this.numericXAxis;\r\n        this.barSeries1.yAxis = this.categoryYAxis;\r\n        this.barSeries1.valueMemberPath = \"USA\";\r\n\r\n        this.barSeries2 = new IgxBarSeriesComponent();\r\n        this.barSeries2.dataSource = this.categoryData;\r\n        this.barSeries2.xAxis = this.numericXAxis;\r\n        this.barSeries2.yAxis = this.categoryYAxis;\r\n        this.barSeries2.valueMemberPath = \"RUS\";\r\n    }\r\n\r\n    public initAxes() {\r\n        this.categoryXAxis = new IgxCategoryXAxisComponent();\r\n        this.categoryXAxis.title = \"Category X Axis\";\r\n        this.categoryXAxis.dataSource = this.categoryData;\r\n        this.categoryXAxis.label = \"Year\";\r\n\r\n        this.categoryYAxis = new IgxCategoryYAxisComponent();\r\n        this.categoryYAxis.title = \"Category Y Axis\";\r\n        this.categoryYAxis.dataSource = this.categoryData;\r\n        this.categoryYAxis.label = \"Year\";\r\n\r\n        this.numericXAxis = new IgxNumericXAxisComponent();\r\n        this.numericXAxis.title = \"Numeric X Axis\";\r\n\r\n        this.numericYAxis = new IgxNumericYAxisComponent();\r\n        this.numericYAxis.title = \"Numeric Y Axis\";\r\n\r\n        this.timeXAxis = new IgxTimeXAxisComponent();\r\n        this.timeXAxis.title = \"Time X Axis\";\r\n        this.timeXAxis.dataSource = this.financialData;\r\n        this.timeXAxis.dateTimeMemberPath = \"Time\";\r\n        this.timeXAxis.label = \"Date\";\r\n    }\r\n\r\n    public initFinancialSeries() {\r\n        this.financialSeries = new IgxFinancialPriceSeriesComponent();\r\n        this.financialSeries.dataSource = this.financialData;\r\n        this.financialSeries.xAxis = this.timeXAxis;\r\n        this.financialSeries.yAxis = this.numericYAxis;\r\n        this.financialSeries.highMemberPath = \"High\";\r\n        this.financialSeries.lowMemberPath = \"Low\";\r\n        this.financialSeries.closeMemberPath = \"Close\";\r\n        this.financialSeries.openMemberPath = \"Open\";\r\n        this.financialSeries.volumeMemberPath = \"Volume\";\r\n    }\r\n\r\n    public initScatterSeries() {\r\n        this.scatterSeries1 = new IgxScatterSeriesComponent();\r\n        this.scatterSeries1.dataSource = this.scatterData;\r\n        this.scatterSeries1.xAxis = this.numericXAxis;\r\n        this.scatterSeries1.yAxis = this.numericYAxis;\r\n        this.scatterSeries1.xMemberPath = \"Index\";\r\n        this.scatterSeries1.yMemberPath = \"SinValue\";\r\n        this.scatterSeries1.markerType = MarkerType.Circle;\r\n\r\n        this.scatterSeries2 = new IgxScatterSeriesComponent();\r\n        this.scatterSeries2.dataSource = this.scatterData;\r\n        this.scatterSeries2.xAxis = this.numericXAxis;\r\n        this.scatterSeries2.yAxis = this.numericYAxis;\r\n        this.scatterSeries2.xMemberPath = \"Index\";\r\n        this.scatterSeries2.yMemberPath = \"CosValue\";\r\n        this.scatterSeries2.markerType = MarkerType.Circle;\r\n    }\r\n\r\n    public initData() {\r\n        this.categoryData = SampleCategoryData.create();\r\n        this.scatterData = SampleScatterData.createWaveData();\r\n        this.financialData = SampleFinancialData.create();\r\n    }\r\n\r\n    public onAxisTypeChange = (e: any) => {\r\n        this.chart.axes.clear();\r\n        this.chart.series.clear();\r\n\r\n        const value: string = e.target.value;\r\n\r\n        if (value.includes(\"Column\")) {\r\n            this.chart.axes.add(this.categoryXAxis);\r\n            this.chart.axes.add(this.numericYAxis);\r\n\r\n            this.chart.series.add(this.columnSeries1);\r\n            this.chart.series.add(this.columnSeries2);\r\n        } else if (value.includes(\"Bar\")) {\r\n            this.chart.axes.add(this.categoryYAxis);\r\n            this.chart.axes.add(this.numericXAxis);\r\n\r\n            this.chart.series.add(this.barSeries1);\r\n            this.chart.series.add(this.barSeries2);\r\n        } else if (value.includes(\"Scatter\")) {\r\n            this.chart.axes.add(this.numericXAxis);\r\n            this.chart.axes.add(this.numericYAxis);\r\n\r\n            this.chart.series.add(this.scatterSeries1);\r\n            this.chart.series.add(this.scatterSeries2);\r\n        } else {\r\n            this.chart.axes.add(this.timeXAxis);\r\n            this.chart.axes.add(this.numericYAxis);\r\n\r\n            this.chart.series.add(this.financialSeries);\r\n        }\r\n    }\r\n}\r\n","isMain":true,"fileExtension":"ts","fileHeader":"ts"},{"hasRelativeAssetsUrls":false,"path":"src/app/data-chart-axis-types/data-chart-axis-types.component.html","content":"<div class=\"container sample\">\r\n    <div class=\"options horizontal\">\r\n        <span class=\"options-item\"> Series Type: </span>\r\n        <!-- [(ngModel)]=\"chartType\"  -->\r\n        <select value={{chartType}}\r\n            (change)=\"this.onAxisTypeChange($event)\">\r\n            <option>Column (CategoryXAxis)</option>\r\n            <option>Bar (CategoryYAxis)</option>\r\n            <option>Scatter (NumericXAxis)</option>\r\n            <option>Financial (TimeXAxis)</option>\r\n        </select>\r\n    </div>\r\n    <div class=\"container\">\r\n        <igx-data-chart #chart\r\n            width=\"100%\"\r\n            height=\"100%\">\r\n        </igx-data-chart>\r\n    </div>\r\n</div>\r\n","isMain":true,"fileExtension":"html","fileHeader":"html"},{"hasRelativeAssetsUrls":false,"path":"src/app/data-chart-axis-types/data-chart-axis-types.component.scss","content":"/* styles are loaded the Shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/\r\n","isMain":true,"fileExtension":"scss","fileHeader":"scss"},{"hasRelativeAssetsUrls":false,"path":"src/app/SampleCategoryData.ts","content":"import { Injectable } from \"@angular/core\";\r\n\r\n@Injectable()\r\nexport class SampleCategoryData {\r\n\r\n    public static create(): any[] {\r\n        const data: any[] = [];\r\n        // total olympic medals for top countries\r\n        data.push({Year: \"1996\", USA: 148, CHN: 110, RUS: 95});\r\n        data.push({Year: \"2000\", USA: 142, CHN: 115, RUS: 91});\r\n        data.push({Year: \"2004\", USA: 134, CHN: 121, RUS: 86});\r\n        data.push({Year: \"2008\", USA: 131, CHN: 129, RUS: 65});\r\n        data.push({Year: \"2012\", USA: 135, CHN: 115, RUS: 77});\r\n        data.push({Year: \"2016\", USA: 146, CHN: 112, RUS: 88});\r\n        return data;\r\n    }\r\n}\r\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/SampleFinancialData.ts","content":"import { Injectable } from \"@angular/core\";\r\n\r\n@Injectable()\r\nexport class SampleFinancialData {\r\n\r\n    public static create(): any[] {\r\n        // initial values\r\n        let v = 10000;\r\n        let o = 500;\r\n        let h = o + (Math.random() * 5);\r\n        let l = o - (Math.random() * 5);\r\n        let c = l + (Math.random() * (h - l));\r\n\r\n        const items = 100;\r\n        const end = new Date(2020, 11, 1);\r\n        let time = this.addDays(end, -items);\r\n\r\n        const data: any[] = [];\r\n        for (let i = 0; i < items; i++) {\r\n            const date = time.toDateString();\r\n            // const date = this.getDate(time);\r\n            // adding new data item\r\n            data.push({Time: time, Date: date, Close: c, Open: o, High: h, Low: l, Volume: v});\r\n            // generating new values\r\n            const mod = Math.random() - 0.4;\r\n            o = o + (mod * 5 * 2);\r\n            v = v + (mod * 5 * 100);\r\n            h = o + (Math.random() * 5);\r\n            l = o - (Math.random() * 5);\r\n            c = l + (Math.random() * (h - l));\r\n            time = this.addDays(time, 1);\r\n        }\r\n        return data;\r\n    }\r\n\r\n    public static addDays(dt: Date, days: number): Date {\r\n        return new Date(dt.getTime() + days * 24 * 60 * 60 * 1000);\r\n    }\r\n    public static getDate(dt: Date): string {\r\n        return dt.getDay() + \"/\" + dt.getMonth() + \"/\" + dt.getFullYear();\r\n    }\r\n}\r\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/SampleScatterData.ts","content":"import { Injectable } from \"@angular/core\";\r\n\r\n@Injectable()\r\nexport class SampleScatterData {\r\n\r\n    public static create(): any[] {\r\n\r\n        const data: any[] = [];\r\n        const xMin = -180;\r\n        const xMax = 180;\r\n        const yMin = -90;\r\n        const yMax = 90;\r\n        const xCount = 11;\r\n        const yCount = 11;\r\n\r\n        const xStep = (xMax - xMin) / (xCount - 1);\r\n        const yStep = (yMax - yMin) / (yCount - 1);\r\n        let index = 0;\r\n        for (let x = xMin; x <= xMax; x += xStep) {\r\n            for (let y = yMin; y <= yMax; y += yStep) {\r\n                const z = Math.cos(x) + Math.cos(y);\r\n                data.push({ X: x, Y: y, Z: z, Index: index++ });\r\n            }\r\n        }\r\n        return data;\r\n    }\r\n\r\n    public static createWaveData(): any[] {\r\n        const data: any[] = [];\r\n        let index = 0;\r\n        for (let angle = 0; angle <= 360; angle += 10) {\r\n            const radians = angle * Math.PI / 180;\r\n            const sin = Math.sin(radians);\r\n            const cos = Math.cos(radians);\r\n            data.push({ Angle: angle, Radians: radians, SinValue: sin, CosValue: cos, Index: index++ });\r\n        }\r\n        return data;\r\n    }\r\n}\r\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.module.ts","content":"import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppComponent } from \"./app.component\";\r\nimport { DataChartAxisTypesComponent } from \"./data-chart-axis-types/data-chart-axis-types.component\";\r\nimport { \r\n\tIgxDataChartCoreModule,\r\n\tIgxDataChartCategoryModule,\r\n\tIgxLegendModule,\r\n\tIgxDataChartScatterCoreModule,\r\n\tIgxDataChartScatterModule,\r\n\tIgxTimeXAxisModule,\r\n\tIgxCategoryXAxisModule,\r\n\tIgxCategoryYAxisModule,\r\n\tIgxNumericXAxisModule,\r\n\tIgxNumericYAxisModule,\r\n\tIgxNumericAngleAxisModule,\r\n\tIgxNumericRadiusAxisModule,\r\n\tIgxCategoryAngleAxisModule\r\n } from \"igniteui-angular-charts\";\r\nimport { SampleFinancialData } from \"./SampleFinancialData\";\r\nimport { SampleCategoryData } from \"./SampleCategoryData\";\r\nimport { SampleScatterData } from \"./SampleScatterData\";\n\n\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\r\n\tAppComponent,\r\n\tDataChartAxisTypesComponent\r\n],\n  imports: [\r\n\tBrowserModule,\r\n\tBrowserAnimationsModule,\r\n\tFormsModule,\r\n\tIgxDataChartCoreModule,\r\n\tIgxDataChartCategoryModule,\r\n\tIgxLegendModule,\r\n\tIgxDataChartScatterCoreModule,\r\n\tIgxDataChartScatterModule,\r\n\tIgxTimeXAxisModule,\r\n\tIgxCategoryXAxisModule,\r\n\tIgxCategoryYAxisModule,\r\n\tIgxNumericXAxisModule,\r\n\tIgxNumericYAxisModule,\r\n\tIgxNumericAngleAxisModule,\r\n\tIgxNumericRadiusAxisModule,\r\n\tIgxCategoryAngleAxisModule\r\n],\n  providers: [\r\n\tSampleFinancialData,\r\n\tSampleCategoryData,\r\n\tSampleScatterData\r\n],\n  entryComponents: [],\n  schemas: []\n})\nexport class AppModule {}\n","isMain":true,"fileExtension":"ts","fileHeader":"modules"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.component.html","content":"<app-data-chart-axis-types></app-data-chart-axis-types>"}],"sampleDependencies":"{\"@angular/animations\":\"10.0.14\",\"@angular/common\":\"10.0.14\",\"@angular/compiler\":\"10.0.14\",\"@angular/core\":\"^10.0.14\",\"@angular/forms\":\"10.0.14\",\"@angular/platform-browser\":\"10.0.14\",\"@angular/platform-browser-dynamic\":\"10.0.14\",\"@types/hammerjs\":\"^2.0.35\",\"classlist.js\":\"^1.1.20150312\",\"core-js\":\"^2.6.2\",\"hammerjs\":\"^2.0.8\",\"igniteui-angular\":\"11.1.10\",\"igniteui-angular-charts\":\"11.2.0-beta.0\",\"igniteui-angular-core\":\"11.2.0-beta.0\",\"intl\":\"^1.2.5\",\"jszip\":\"^3.1.5\",\"rxjs\":\"^6.5.4\",\"tslib\":\"1.13.0\",\"web-animations-js\":\"^2.3.2\",\"zone.js\":\"~0.10.2\"}"}