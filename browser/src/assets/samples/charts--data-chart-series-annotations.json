{"sampleFiles":[{"hasRelativeAssetsUrls":false,"path":"src/app/data-chart-series-annotations/data-chart-series-annotations.component.ts","content":"import { Component, ViewChild } from \"@angular/core\";\r\nimport { IgxCategoryXAxisComponent } from \"igniteui-angular-charts\";\r\nimport { IgxDataChartComponent } from \"igniteui-angular-charts\";\r\nimport { IgxNumericYAxisComponent } from \"igniteui-angular-charts\";\r\n\r\nimport { IgxCalloutLayerComponent} from \"igniteui-angular-charts\";\r\nimport { IgxCrosshairLayerComponent} from \"igniteui-angular-charts\";\r\nimport { IgxFinalValueLayerComponent} from \"igniteui-angular-charts\";\r\nimport { IgxSeriesComponent } from \"igniteui-angular-charts\";\r\n\r\nimport { FinalValueSelectionMode } from \"igniteui-angular-charts\";\r\n\r\n@Component({\r\n    selector: \"app-data-chart-series-annotations\",\r\n    styleUrls: [\"./data-chart-series-annotations.component.scss\"],\r\n    templateUrl: \"./data-chart-series-annotations.component.html\"\r\n})\r\nexport class DataChartSeriesAnnotationsComponent {\r\n\r\n    public data: any[];\r\n\r\n    @ViewChild(\"chart\", { static: true })\r\n    public chart: IgxDataChartComponent;\r\n\r\n    @ViewChild(\"xAxis\", { static: true })\r\n    public xAxis: IgxCategoryXAxisComponent;\r\n\r\n    @ViewChild(\"yAxis\", { static: true })\r\n    public yAxis: IgxNumericYAxisComponent;\r\n\r\n    public calloutLayer: IgxCalloutLayerComponent;\r\n    public crosshairLayer: IgxCrosshairLayerComponent;\r\n    public finalValueLayer: IgxFinalValueLayerComponent;\r\n\r\n    public calloutsVisible: boolean = false;\r\n    public crosshairsVisible: boolean = false;\r\n    public finalValuesVisible: boolean = false;\r\n\r\n    constructor() {\r\n        this.initData();\r\n\r\n        this.calloutLayer = new IgxCalloutLayerComponent();\r\n        this.calloutLayer.xMemberPath = \"index\";\r\n        this.calloutLayer.yMemberPath = \"value\";\r\n        this.calloutLayer.labelMemberPath = \"info\";\r\n\r\n        this.crosshairLayer = new IgxCrosshairLayerComponent();\r\n        this.crosshairLayer.brush = \"#9FB328\";\r\n        this.crosshairLayer.outline = \"Black\";\r\n\r\n        this.finalValueLayer = new IgxFinalValueLayerComponent();\r\n        this.finalValueLayer.axisAnnotationInterpolatedValuePrecision = 0;\r\n        this.finalValueLayer.axisAnnotationBackground = \"#9FB328\";\r\n        this.finalValueLayer.axisAnnotationOutline = \"#9FB328\";\r\n        this.finalValueLayer.axisAnnotationTextColor = \"White\";\r\n        this.finalValueLayer.finalValueSelectionMode = FinalValueSelectionMode.FinalVisibleInterpolated;\r\n\r\n    }\r\n\r\n    public initData() {\r\n        const year: number = new Date().getFullYear();\r\n        this.data = [\r\n            { temperature: 74, date: new Date(year, 0, 1), month: \"JAN\" },\r\n            { temperature: 74, date: new Date(year, 1, 1), month: \"FEB\" },\r\n            { temperature: 76, date: new Date(year, 2, 1), month: \"MAR\" },\r\n            { temperature: 78, date: new Date(year, 3, 1), month: \"APR\" },\r\n            { temperature: 83, date: new Date(year, 4, 1), month: \"MAY\" },\r\n            { temperature: 87, date: new Date(year, 5, 1), month: \"JUN\" },\r\n            { temperature: 94, date: new Date(year, 6, 1), month: \"JUL\" },\r\n            { temperature: 97, date: new Date(year, 7, 1), month: \"AUG\" },\r\n            { temperature: 93, date: new Date(year, 8, 1), month: \"SEP\" },\r\n            { temperature: 86, date: new Date(year, 9, 1), month: \"OCT\" },\r\n            { temperature: 81, date: new Date(year, 10, 1), month: \"NOV\" },\r\n            { temperature: 79, date: new Date(year, 11, 1), month: \"DEC\" }\r\n        ];\r\n\r\n        let minVal: number = Number.MAX_VALUE;\r\n        let maxVal: number = Number.MIN_VALUE;\r\n\r\n        let minIndex: number = 0;\r\n        let maxIndex: number = 0;\r\n        let idx: number = 0;\r\n\r\n        for (const item of this.data) {\r\n\r\n            if (minVal > item.temperature) {\r\n                minVal = item.temperature;\r\n                minIndex = idx;\r\n            }\r\n            if (maxVal < item.temperature) {\r\n                maxVal = item.temperature;\r\n                maxIndex = idx;\r\n            }\r\n\r\n            item.index = idx;\r\n            item.value = item.temperature;\r\n\r\n            const month = item.date.getMonth();\r\n            if (month >= 11 || month < 3) {\r\n                item.info = \"WINTER\";\r\n            } else if (month >= 3 && month < 5) {\r\n                item.info = \"SPRING\";\r\n            } else if (month >= 5 && month < 8) {\r\n                item.info = \"SUMMER\";\r\n            } else if (month >= 8 && month < 11) {\r\n                item.info = \"FALL\";\r\n            }\r\n            idx++;\r\n        }\r\n\r\n        this.data[minIndex].info = \"MIN\";\r\n        this.data[maxIndex].info = \"MAX\";\r\n    }\r\n\r\n    public onFinalValueChange = (e: any) => {\r\n        const isChecked: boolean = e.target.checked;\r\n        this.toggleFinalValues(isChecked);\r\n    }\r\n\r\n    public onCalloutChange = (e: any) => {\r\n        const isChecked: boolean = e.target.checked;\r\n        this.toggleCallouts(isChecked);\r\n    }\r\n\r\n    public onCrosshairChange = (e: any) => {\r\n        const isChecked: boolean = e.target.checked;\r\n        this.toggleCrosshairs(isChecked);\r\n    }\r\n\r\n    public toggleCrosshairs(isChecked: boolean) {\r\n        this.toggleSeries(this.crosshairLayer, isChecked);\r\n    }\r\n\r\n    public toggleFinalValues(isChecked: boolean) {\r\n        this.toggleSeries(this.finalValueLayer, isChecked);\r\n    }\r\n\r\n    public toggleCallouts(isChecked: boolean) {\r\n        this.toggleSeries(this.calloutLayer, isChecked);\r\n    }\r\n\r\n    public toggleSeries(series: IgxSeriesComponent, isChecked: boolean) {\r\n        if (isChecked) {\r\n            this.chart.series.add(series);\r\n        } else {\r\n            this.chart.series.remove(series);\r\n        }\r\n    }\r\n\r\n    public formatDateLabel(item: any): string {\r\n        const months = [\r\n            \"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\",\r\n            \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"\r\n        ];\r\n        return months[item.date.getMonth()];\r\n    }\r\n}\r\n","isMain":true,"fileExtension":"ts","fileHeader":"ts"},{"hasRelativeAssetsUrls":false,"path":"src/app/data-chart-series-annotations/data-chart-series-annotations.component.html","content":"<div class=\"container sample\">\r\n    <div class=\"options horizontal\">\r\n        <span class=\"options-item\">Annotations: </span>\r\n        <label class=\"options-item\"><input type=\"checkbox\" [(ngModel)]=\"calloutsVisible\"\r\n            (change)=\"onCalloutChange($event)\" /> Callouts </label>\r\n        <label class=\"options-item\"><input type=\"checkbox\" [(ngModel)]=\"finalValuesVisible\"\r\n            (change)=\"onFinalValueChange($event)\"/> Final Value </label>\r\n        <label class=\"options-item\"><input type=\"checkbox\" [(ngModel)]=\"crosshairsVisible\"\r\n            (change)=\"onCrosshairChange($event)\" /> Crosshairs </label>\r\n    </div>\r\n    <div class=\"container\">\r\n        <igx-data-chart #chart [dataSource]=\"data\" width=\"100%\" height=\"100%\">\r\n            <igx-category-x-axis #xAxis interval=1 label=\"month\">\r\n\r\n            </igx-category-x-axis>\r\n            <igx-numeric-y-axis #yAxis minValue=50 maxValue=120 labelLocation=\"OutsideRight\">\r\n\r\n            </igx-numeric-y-axis>\r\n\r\n            <igx-column-series [xAxis]=\"xAxis\" [yAxis]=\"yAxis\" valueMemberPath=\"temperature\"></igx-column-series>\r\n\r\n        </igx-data-chart>\r\n    </div>\r\n</div>\r\n","isMain":true,"fileExtension":"html","fileHeader":"html"},{"hasRelativeAssetsUrls":false,"path":"src/app/data-chart-series-annotations/data-chart-series-annotations.component.scss","content":"/* styles are loaded the Shared CSS file located at:\r\nhttps://static.infragistics.com/xplatform/css/samples/\r\n*/\r\n","isMain":true,"fileExtension":"scss","fileHeader":"scss"},{"hasRelativeAssetsUrls":false,"path":"src/app/SharedData.ts","content":"import { Injectable } from \"@angular/core\";\r\n\r\n@Injectable()\r\nexport class SharedData {\r\n\r\n    public static getEnergyProduction() {\r\n        const data: any[] = [\r\n            {\r\n                Coal: 400000000,\r\n                Country: \"Canada\",\r\n                Gas: 175000000,\r\n                Hydro: 350000000,\r\n                Nuclear: 225000000,\r\n                Oil: 100000000\r\n            },\r\n            {\r\n                Coal: 925000000,\r\n                Country: \"China\",\r\n                Gas: 350000000,\r\n                Hydro: 625000000,\r\n                Nuclear: 400000000,\r\n                Oil: 200000000\r\n            },\r\n            {\r\n                Coal: 550000000,\r\n                Country: \"Russia\",\r\n                Gas: 250000000,\r\n                Hydro: 425000000,\r\n                Nuclear: 475000000,\r\n                Oil: 200000000\r\n            },\r\n            {\r\n                Coal: 450000000,\r\n                Country: \"Australia\",\r\n                Gas: 150000000,\r\n                Hydro: 350000000,\r\n                Nuclear: 175000000,\r\n                Oil: 100000000\r\n            },\r\n            {\r\n                Coal: 800000000,\r\n                Country: \"United States\",\r\n                Gas: 475000000,\r\n                Hydro: 750000000,\r\n                Nuclear: 575000000,\r\n                Oil: 250000000\r\n            },\r\n            {\r\n                Coal: 375000000,\r\n                Country: \"France\",\r\n                Gas: 350000000,\r\n                Hydro: 325000000,\r\n                Nuclear: 275000000,\r\n                Oil: 150000000\r\n            }\r\n        ];\r\n        return data;\r\n    }\r\n\r\n    public static getItems(startValue: number, maxPoints: number, useShortLabels?: boolean): any[] {\r\n\r\n        const data: any[] = [];\r\n        let value = startValue;\r\n        for (let i = 0; i <= maxPoints; i++) {\r\n            value += Math.random() * 4.0 - 2.0;\r\n            const v = Math.round(value);\r\n            let l = i.toString();\r\n            if (useShortLabels) {\r\n                l = this.toShortString(i);\r\n            }\r\n            data.push({ Label: l, Value: v });\r\n        }\r\n        return data;\r\n    }\r\n\r\n    public static getTemperatures(startValue: number, startYear: number, endYear: number): any[] {\r\n        const data: any[] = [];\r\n        let value = startValue;\r\n        for (let i = startYear; i <= endYear; i++) {\r\n            value += (Math.random() - 0.5) * 0.5;\r\n            const high = value + (Math.random() * 2);\r\n            const low = value - (Math.random() * 2);\r\n            const v = Math.abs(Math.round(value * 10) / 10);\r\n            const h = Math.abs(Math.round(high * 10) / 10);\r\n            const l = Math.abs(Math.round(low * 10) / 10);\r\n            data.push({ Label: i.toString(), Value: v, High: h, Low: l });\r\n        }\r\n        return data;\r\n    }\r\n\r\n    public static getLastItem(array: any[]): any {\r\n        if (array.length === 0) {\r\n            return null;\r\n        }\r\n        return array[array.length - 1];\r\n    }\r\n\r\n    public static getNewItem(array: any[], index: number): any {\r\n        const lastItem = this.getLastItem(array);\r\n        const newValue = lastItem.Value + Math.random() * 4.0 - 2.0;\r\n        return { Label: index.toString(), Value: newValue };\r\n    }\r\n\r\n    public static toShortString(largeValue: number): string {\r\n        let roundValue: number;\r\n\r\n        if (largeValue >= 1000000) {\r\n            roundValue = Math.round(largeValue / 100000) / 10;\r\n            return roundValue + \"m\";\r\n        }\r\n        if (largeValue >= 1000) {\r\n            roundValue = Math.round(largeValue / 100) / 10;\r\n            return roundValue + \"k\";\r\n        }\r\n\r\n        roundValue = Math.round(largeValue);\r\n        return roundValue + \"\";\r\n    }\r\n\r\n    public static addDays(date: Date, days: number): Date {\r\n        date.setDate(date.getDate() + days);\r\n        return date;\r\n    }\r\n}\r\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.module.ts","content":"import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppComponent } from \"./app.component\";\r\nimport { DataChartSeriesAnnotationsComponent } from \"./data-chart-series-annotations/data-chart-series-annotations.component\";\r\nimport { \r\n\tIgxDataChartCoreModule,\r\n\tIgxDataChartCategoryModule,\r\n\tIgxDataChartAnnotationModule,\r\n\tIgxLegendModule,\r\n\tIgxCalloutLayerModule,\r\n\tIgxCrosshairLayerModule,\r\n\tIgxFinalValueLayerModule,\r\n\tIgxDataChartInteractivityModule\r\n } from \"igniteui-angular-charts\";\r\nimport { SharedData } from \"./SharedData\";\n\n\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\r\n\tAppComponent,\r\n\tDataChartSeriesAnnotationsComponent\r\n],\n  imports: [\r\n\tBrowserModule,\r\n\tBrowserAnimationsModule,\r\n\tFormsModule,\r\n\tIgxDataChartCoreModule,\r\n\tIgxDataChartCategoryModule,\r\n\tIgxDataChartAnnotationModule,\r\n\tIgxLegendModule,\r\n\tIgxCalloutLayerModule,\r\n\tIgxCrosshairLayerModule,\r\n\tIgxFinalValueLayerModule,\r\n\tIgxDataChartInteractivityModule\r\n],\n  providers: [SharedData],\n  entryComponents: [],\n  schemas: []\n})\nexport class AppModule {}\n","isMain":true,"fileExtension":"ts","fileHeader":"modules"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.component.html","content":"<app-data-chart-series-annotations></app-data-chart-series-annotations>"}],"sampleDependencies":"{\"@angular/animations\":\"10.0.14\",\"@angular/common\":\"10.0.14\",\"@angular/compiler\":\"10.0.14\",\"@angular/core\":\"^10.0.14\",\"@angular/forms\":\"10.0.14\",\"@angular/platform-browser\":\"10.0.14\",\"@angular/platform-browser-dynamic\":\"10.0.14\",\"@types/hammerjs\":\"^2.0.35\",\"classlist.js\":\"^1.1.20150312\",\"core-js\":\"^2.6.2\",\"hammerjs\":\"^2.0.8\",\"igniteui-angular\":\"11.1.10\",\"igniteui-angular-charts\":\"11.2.0-beta.0\",\"igniteui-angular-core\":\"11.2.0-beta.0\",\"intl\":\"^1.2.5\",\"jszip\":\"^3.1.5\",\"rxjs\":\"^6.5.4\",\"tslib\":\"1.13.0\",\"web-animations-js\":\"^2.3.2\",\"zone.js\":\"~0.10.2\"}"}