{"sampleFiles":[{"hasRelativeAssetsUrls":false,"path":"src/app/excel-library/working-with/sparklines.component.ts","content":"import { ChangeDetectionStrategy, Component, OnInit, ViewChild } from \"@angular/core\";\r\n// importing IG components:\r\nimport { IgxGridComponent } from \"igniteui-angular\";\r\nimport { WorkbookFormat } from \"igniteui-angular-excel\";\r\nimport { SparklineType } from \"igniteui-angular-excel\";\r\nimport { Workbook } from \"igniteui-angular-excel\";\r\nimport {\r\n    WorkbookExportService\r\n} from \"../../utilities/excel-exporter\";\r\nimport { ExcelUtility } from \"../../utilities/excel-utility\";\r\n\r\n@Component({\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [ WorkbookExportService ],\r\n    selector: \"app-sparklines\",\r\n    styleUrls: [\"./sparklines.component.scss\"],\r\n    templateUrl: \"./sparklines.component.html\"\r\n})\r\nexport class ExcelLibraryWorkingWithSparklinesComponent implements OnInit {\r\n\r\n    @ViewChild(\"grid\", { read: IgxGridComponent, static: true })\r\n    public grid: IgxGridComponent;\r\n    public data: any[];\r\n    public exportAsTable: boolean = true;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    public exportGrid() {\r\n        const headers = [\"Orders\", \"Company Name\", \"Contact Name\", \"Contact Title\", \"Country\"];\r\n        const keys = [\"Orders\", \"CompanyName\", \"ContactName\", \"ContactTitle\", \"Country\"];\r\n        const orderHeaders = [\"Customer ID\", \"Order ID\", \"Freight\"];\r\n\r\n        const wb = new Workbook(WorkbookFormat.Excel2007);\r\n        const exportSheet = wb.worksheets().add(\"Sheet1\");\r\n        const ordersSheet = wb.worksheets().add(\"Orders\");\r\n\r\n        exportSheet.defaultColumnWidth = 300 * 20;\r\n        exportSheet.defaultRowHeight = 50 * 20;\r\n\r\n        for (let i = 0; i < headers.length; i++) {\r\n            exportSheet.rows(0).cells(i).value = headers[i];\r\n        }\r\n\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            const item = this.data[i];\r\n            const orders = item.Orders;\r\n\r\n            for (let j = 0; j < orders.length; j++) {\r\n                ordersSheet.rows(i).cells(j).value = orders[j].Freight;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < this.data.length; i++) {\r\n\r\n            const index = (i + 1).toString();\r\n            const dataItem = this.data[i];\r\n\r\n            for (let j = 0; j < headers.length; j++) {\r\n                if (j === 0) {\r\n                    exportSheet.sparklineGroups().add(SparklineType.Column,\r\n                         \"A\" + (i + 2).toString(), \"Orders!A\" + index + \":F\" + index);\r\n                } else {\r\n                    exportSheet.rows(i + 1).cells(j).value = dataItem[keys[j]];\r\n                }\r\n            }\r\n        }\r\n\r\n        ExcelUtility.save(wb, \"myWorksheet\");\r\n    }\r\n\r\n    public ngOnInit(): void {\r\n        const companies = [\"Amazon\", \"Ford\", \"Jaguar\", \"Tesla\", \"IBM\", \"Microsoft\" ];\r\n        const firstNames = [\"Andrew\", \"Mike\", \"Martin\", \"Ann\", \"Victoria\", \"John\", \"Brian\", \"Jason\", \"David\" ];\r\n        const lastNames = [\"Smith\", \"Jordan\", \"Johnson\", \"Anderson\", \"Louis\", \"Phillips\", \"Williams\", \"Novak\" ];\r\n        const cities = [\"London\", \"Paris\", \"Boston\", \"Berlin\" ];\r\n        const countries = [\"UK\", \"France\", \"USA\", \"Germany\" ];\r\n        const titles = [\"Sales Rep.\", \"Owner\", \"Administrator\", \"Manager\" ];\r\n        const streets = [\"Main St\", \"Madison St\", \"Broad Way\" ];\r\n        const shippings = [\"Federal Ex\", \"UPS Air\", \"UPS Ground\" ];\r\n\r\n        const data = new Array<any>();\r\n        // generating excel data source\r\n        for (let i = 0; i < 10; i++) {\r\n            const companyName = this.getItem(companies);\r\n            const contactTitle = this.getItem(titles);\r\n            const country = this.getItem(countries);\r\n            const city = this.getItem(cities);\r\n            const shipping = this.getItem(shippings);\r\n            const contactName = this.getItem(firstNames) + \" \" + this.getItem(lastNames);\r\n            const employeeName = this.getItem(firstNames) + \" \" + this.getItem(lastNames);\r\n            const address = this.getRandom(10, 60) + \" \" + this.getItem(streets);\r\n            const postalCode = this.getRandom(100, 400) + \" \" + this.getRandom(50, 90);\r\n            const customerID = \"CID-\" + this.getRandom(500, 900);\r\n            const phone = this.getRandom(500, 900) + \"-\" + this.getRandom(200, 900) + \"-\" + this.getRandom(2000, 9000);\r\n            const fax = this.getRandom(500, 900) + \"-\" + this.getRandom(200, 900) + \"-\" + this.getRandom(2000, 9000);\r\n\r\n            const companyOrders = new Array<any>();\r\n            for (let o = 0; o < 6; o++) {\r\n                const reqDate = \"2020-06-\" + this.getRandom(1, 25) + \"T\" + this.getRandom(10, 12) + \":00:00\";\r\n                const shipDate = \"2020-06-\" + this.getRandom(1, 25) + \"T\" + this.getRandom(10, 12) + \":00:00\";\r\n                const orderDate = \"2020-05-\" + this.getRandom(1, 25) + \"T\" + this.getRandom(10, 12) + \":00:00\";\r\n                const order = {\r\n                    ContactName: contactName,\r\n                    CustomerID: customerID,\r\n                    EmployeeID: this.getRandom(1000, 8000),\r\n                    EmployeeName: employeeName,\r\n                    Freight: this.getRandom(1, 10),\r\n                    OrderDate: orderDate,\r\n                    OrderID: this.getRandom(3000, 5000),\r\n                    RequiredDate: reqDate,\r\n                    ShipAddress: address,\r\n                    ShipCity: city,\r\n                    ShipCountry: country,\r\n                    ShipName: companyName,\r\n                    ShipPostalCode: postalCode,\r\n                    ShipRegion: null,\r\n                    ShipVia: this.getRandom(1, 10),\r\n                    ShippedDate: shipDate,\r\n                    ShipperID: this.getRandom(1, 10),\r\n                    ShipperName: shipping,\r\n                    TotalItems: this.getRandom(10, 20),\r\n                    TotalPrice: this.getRandom(400, 600)\r\n                };\r\n                companyOrders.push(order);\r\n            }\r\n            const dataItem = {\r\n                Address: address,\r\n                City: city,\r\n                CompanyName: companyName,\r\n                ContactName: contactName,\r\n                ContactTitle: contactTitle,\r\n                Country: country,\r\n                Fax: fax,\r\n                ID: customerID,\r\n                Orders: companyOrders,\r\n                Phone: phone,\r\n                PostalCode: postalCode,\r\n                Region: null\r\n            };\r\n            data.push(dataItem);\r\n        }\r\n        this.data = data;\r\n\r\n    }\r\n    public getRandom(min: number, max: number): number {\r\n        return Math.floor(Math.random() * (max - min + 1) + min);\r\n    }\r\n    public getItem(array: string[]): string {\r\n        const i = this.getRandom(0, array.length - 1);\r\n        return array[i];\r\n    }\r\n}\r\n","isMain":true,"fileExtension":"ts","fileHeader":"ts"},{"hasRelativeAssetsUrls":false,"path":"src/app/excel-library/working-with/sparklines.component.html","content":"<div class=\"sample-wrapper container\">\r\n    <div class=\"options\">\r\n        <input type=\"checkbox\" id=\"exportAsTable\" [(ngModel)]=\"exportAsTable\">\r\n        <label for=\"exportAsTable\">Export As Table </label>\r\n        <button (click)=\"exportGrid()\">Export to Excel</button>\r\n    </div>\r\n    <igx-grid #grid [data]=\"data\" [autoGenerate]=\"false\" height=\"500px\" width=\"100%\">\r\n        <igx-column field=\"Orders\" header=\"Order History\" resizable=true>\r\n            <ng-template igxCell let-cell=\"cell\" let-val>\r\n                <igx-data-chart\r\n                  width=\"100%\"\r\n                  height=\"100%\"\r\n                  [dataSource]=\"val\"\r\n                  isHorizontalZoomEnabled=\"false\"\r\n                  isVerticalZoomEnabled=\"false\">\r\n                  <igx-category-x-axis\r\n                    label=\"Label\"\r\n                    labelVisibility=\"collapsed\"\r\n                    #xAxis>\r\n                  </igx-category-x-axis>\r\n                  <igx-numeric-y-axis\r\n                    minimumValue=\"0\"\r\n                    labelVisibility=\"collapsed\"\r\n                    #yAxis\r\n                    majorStroke=\"transparent\">\r\n                  </igx-numeric-y-axis>\r\n                  <igx-column-series\r\n                    [xAxis]=\"xAxis\"\r\n                    [yAxis]=\"yAxis\"\r\n                    outline=\"#376092\"\r\n                    brush=\"#376092\"\r\n                    valueMemberPath=\"Freight\">\r\n                  </igx-column-series>\r\n              </igx-data-chart>\r\n            </ng-template>\r\n          </igx-column>\r\n        <igx-column field=\"CompanyName\" header=\"Company Name\"></igx-column>\r\n        <igx-column field=\"ContactName\" header=\"Contact Name\"></igx-column>\r\n        <igx-column field=\"ContactTitle\" header=\"Contact Title\"></igx-column>\r\n        <igx-column field=\"Country\" header=\"Country\"></igx-column>\r\n    </igx-grid>\r\n</div>\r\n","isMain":true,"fileExtension":"html","fileHeader":"html"},{"hasRelativeAssetsUrls":false,"path":"src/app/excel-library/working-with/sparklines.component.scss","content":".container {\r\n    display: flex;\r\n    flex-flow: column;\r\n    height: 100%;\r\n    min-width: 300px;\r\n}\r\n\r\n.options {\r\n    margin-top: 5px;\r\n    margin-bottom: 5px;\r\n    margin-right: 10px;\r\n    margin-left: 10px;\r\n}","isMain":true,"fileExtension":"scss","fileHeader":"scss"},{"hasRelativeAssetsUrls":false,"path":"src/app/utilities/excel-utility.ts","content":"import { saveAs } from \"file-saver\";\r\nimport { Workbook } from \"igniteui-angular-excel\";\r\nimport { WorkbookFormat } from \"igniteui-angular-excel\";\r\nimport { WorkbookSaveOptions } from \"igniteui-angular-excel\";\r\n\r\nexport class ExcelUtility {\r\n    public static getExtension(format: WorkbookFormat) {\r\n        switch (format) {\r\n            case WorkbookFormat.StrictOpenXml:\r\n            case WorkbookFormat.Excel2007:\r\n                return \".xlsx\";\r\n            case WorkbookFormat.Excel2007MacroEnabled:\r\n                return \".xlsm\";\r\n            case WorkbookFormat.Excel2007MacroEnabledTemplate:\r\n                return \".xltm\";\r\n            case WorkbookFormat.Excel2007Template:\r\n                return \".xltx\";\r\n            case WorkbookFormat.Excel97To2003:\r\n                return \".xls\";\r\n            case WorkbookFormat.Excel97To2003Template:\r\n                return \".xlt\";\r\n        }\r\n    }\r\n\r\n    public static load(file: File): Promise<Workbook> {\r\n        return new Promise<Workbook>((resolve, reject) => {\r\n            ExcelUtility.readFileAsUint8Array(file).then((a) => {\r\n                Workbook.load(a, null, (w) => {\r\n                    resolve(w);\r\n                }, (e) => {\r\n                    reject(e);\r\n                });\r\n            }, (e) => {\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    public static loadFromUrl(url: string): Promise<Workbook> {\r\n        return new Promise<Workbook>((resolve, reject) => {\r\n            const req = new XMLHttpRequest();\r\n            req.open(\"GET\", url, true);\r\n            req.responseType = \"arraybuffer\";\r\n            req.onload = (d) => {\r\n                const data = new Uint8Array(req.response);\r\n                Workbook.load(data, null, (w) => {\r\n                    resolve(w);\r\n                }, (e) => {\r\n                    reject(e);\r\n                });\r\n            };\r\n            req.send();\r\n        });\r\n    }\r\n\r\n    public static save(workbook: Workbook, fileNameWithoutExtension: string): Promise<string> {\r\n        return new Promise<string>((resolve, reject) => {\r\n            const opt = new WorkbookSaveOptions();\r\n            opt.type = \"blob\";\r\n\r\n            workbook.save(opt, (d) => {\r\n                const fileExt = ExcelUtility.getExtension(workbook.currentFormat);\r\n                const fileName = fileNameWithoutExtension + fileExt;\r\n                saveAs(d as Blob, fileName);\r\n                resolve(fileName);\r\n            }, (e) => {\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    private static readFileAsUint8Array(file: File): Promise<Uint8Array> {\r\n        return new Promise<Uint8Array>((resolve, reject) => {\r\n            const fr = new FileReader();\r\n            fr.onerror = (e) => {\r\n                reject(fr.error);\r\n            };\r\n\r\n            if (fr.readAsBinaryString) {\r\n                fr.onload = (e) => {\r\n                    const rs = (fr as any).resultString;\r\n                    const str: string = rs != null ? rs : fr.result;\r\n                    const result = new Uint8Array(str.length);\r\n                    for (let i = 0; i < str.length; i++) {\r\n                        result[i] = str.charCodeAt(i);\r\n                    }\r\n                    resolve(result);\r\n                };\r\n                fr.readAsBinaryString(file);\r\n            } else {\r\n                fr.onload = (e) => {\r\n                    resolve(new Uint8Array(fr.result as ArrayBuffer));\r\n                };\r\n                fr.readAsArrayBuffer(file);\r\n            }\r\n        });\r\n    }\r\n}\r\n"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.module.ts","content":"import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { AppComponent } from \"./app.component\";\r\nimport { \r\n\tIgxButtonModule,\r\n\tIgxGridModule\r\n } from \"igniteui-angular\";\r\nimport { \r\n\tIgxCategoryChartModule,\r\n\tIgxDataChartCategoryModule,\r\n\tIgxDataChartCoreModule,\r\n\tIgxDataChartInteractivityModule\r\n } from \"igniteui-angular-charts\";\r\nimport { IgxExcelModule } from \"igniteui-angular-excel\";\r\nimport { ExcelUtility } from \"./utilities/excel-utility\";\r\nimport { ExcelLibraryWorkingWithSparklinesComponent } from \"./excel-library/working-with/sparklines.component\";\n\n\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\r\n\tAppComponent,\r\n\tExcelLibraryWorkingWithSparklinesComponent\r\n],\n  imports: [\r\n\tBrowserModule,\r\n\tBrowserAnimationsModule,\r\n\tFormsModule,\r\n\tIgxButtonModule,\r\n\tIgxCategoryChartModule,\r\n\tIgxGridModule,\r\n\tIgxExcelModule,\r\n\tIgxDataChartCategoryModule,\r\n\tIgxDataChartCoreModule,\r\n\tIgxDataChartInteractivityModule\r\n],\n  providers: [],\n  entryComponents: [],\n  schemas: []\n})\nexport class AppModule {}\n","isMain":true,"fileExtension":"ts","fileHeader":"modules"},{"hasRelativeAssetsUrls":false,"path":"src/app/app.component.html","content":"<app-sparklines></app-sparklines>"}],"sampleDependencies":"{\"@angular/animations\":\"10.0.14\",\"@angular/common\":\"10.0.14\",\"@angular/compiler\":\"10.0.14\",\"@angular/core\":\"^10.0.14\",\"@angular/forms\":\"10.0.14\",\"@angular/platform-browser\":\"10.0.14\",\"@angular/platform-browser-dynamic\":\"10.0.14\",\"@types/hammerjs\":\"^2.0.35\",\"classlist.js\":\"^1.1.20150312\",\"core-js\":\"^2.6.2\",\"hammerjs\":\"^2.0.8\",\"igniteui-angular\":\"11.1.10\",\"igniteui-angular-core\":\"11.2.0-beta.0\",\"igniteui-angular-excel\":\"11.2.0-beta.0\",\"intl\":\"^1.2.5\",\"jszip\":\"^3.1.5\",\"rxjs\":\"^6.5.4\",\"tslib\":\"1.13.0\",\"web-animations-js\":\"^2.3.2\",\"zone.js\":\"~0.10.2\"}"}